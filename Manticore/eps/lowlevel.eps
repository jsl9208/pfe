%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: highLevel.pdf
%%Creator: Adobe Acrobat 10.0.0
%%For: yf-Lab
%%CreationDate: 2014/9/27, 15:17:19
%%BoundingBox: 153 355 456 613
%%HiResBoundingBox: 0 0 595.3201 841.9200
%%CropBox: 0 0 595.3201 841.9200
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 940 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2014-09-27T14:58:41+08:00"
   xmp:CreatorTool="Microsoft® Word 2010"
   xmp:ModifyDate="2014-09-27T15:00:31+08:00"
   xmp:MetadataDate="2014-09-27T15:00:31+08:00"
   pdf:Producer="Microsoft® Word 2010"
   xmpMM:DocumentID="uuid:33acd60d-01e3-4130-b3d8-46c2c2f901cf"
   xmpMM:InstanceID="uuid:f954f726-4740-41e8-b0b6-2fb024743d5c">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>yf-Lab</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -841.92 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 841.92 li
595.32 841.92 li
595.32 0 li
cp
clp
gsave
0 841.92 mo
596 841.92 li
596 -.080091 li
0 -.080091 li
0 841.92 li
clp
gsave
153.653 492.235 mo
461.839 492.235 li
461.839 234.802 li
153.653 234.802 li
153.653 492.235 li
clp
154.265 234.802 mo
455.113 234.802 li
455.113 613.308 li
154.265 613.308 li
154.265 234.802 li
false sop
0 0 0 0 cmyk
f
grestore
354.324 321.008 mo
354.32 320.841 354.184 320.708 354.018 320.708 cv
354.016 320.708 354.014 320.708 354.012 320.708 cv
353.776 320.713 353.538 320.715 353.302 320.715 cv
352.73 320.715 352.158 320.702 351.586 320.678 cv
351.581 320.678 351.577 320.677 351.573 320.677 cv
351.41 320.677 351.275 320.805 351.267 320.969 cv
350.657 320.938 350.047 320.893 349.438 320.834 cv
349.455 320.666 349.334 320.516 349.166 320.499 cv
348.362 320.414 347.56 320.306 346.762 320.172 cv
346.745 320.169 346.728 320.168 346.711 320.168 cv
346.564 320.168 346.435 320.273 346.41 320.422 cv
345.809 320.317 345.208 320.198 344.611 320.065 cv
344.649 319.9 344.546 319.737 344.382 319.699 cv
343.595 319.517 342.813 319.31 342.036 319.08 cv
342.007 319.071 341.978 319.067 341.949 319.067 cv
341.818 319.067 341.696 319.153 341.657 319.285 cv
341.072 319.107 340.493 318.915 339.916 318.709 cv
339.973 318.551 339.892 318.376 339.733 318.318 cv
338.976 318.041 338.225 317.74 337.482 317.415 cv
337.442 317.397 337.401 317.389 337.36 317.389 cv
337.242 317.389 337.13 317.457 337.08 317.572 cv
336.523 317.323 335.971 317.061 335.424 316.785 cv
335.5 316.635 335.441 316.452 335.291 316.375 cv
334.574 316.007 333.867 315.615 333.169 315.201 cv
333.12 315.171 333.066 315.158 333.013 315.158 cv
332.909 315.158 332.808 315.211 332.75 315.306 cv
332.229 314.991 331.714 314.663 331.205 314.322 cv
331.299 314.182 331.263 313.992 331.124 313.898 cv
330.459 313.445 329.805 312.969 329.163 312.471 cv
329.107 312.428 329.041 312.407 328.976 312.407 cv
328.885 312.407 328.795 312.447 328.735 312.524 cv
328.256 312.147 327.785 311.759 327.321 311.356 cv
327.431 311.229 327.419 311.037 327.292 310.925 cv
326.689 310.395 326.097 309.843 325.519 309.269 cv
325.459 309.21 325.382 309.18 325.304 309.18 cv
325.225 309.18 325.147 309.21 325.087 309.27 cv
324.654 308.833 324.235 308.391 323.825 307.939 cv
323.951 307.827 323.961 307.634 323.849 307.508 cv
323.307 306.9 322.787 306.28 322.289 305.648 cv
322.228 305.571 322.139 305.531 322.048 305.531 cv
321.982 305.531 321.916 305.553 321.86 305.596 cv
321.484 305.111 321.119 304.618 320.769 304.12 cv
320.907 304.024 320.941 303.834 320.846 303.695 cv
320.383 303.027 319.943 302.347 319.526 301.658 cv
319.468 301.563 319.367 301.51 319.264 301.51 cv
319.21 301.51 319.156 301.524 319.107 301.554 cv
318.793 301.027 318.493 300.493 318.206 299.955 cv
318.355 299.877 318.413 299.692 318.335 299.543 cv
317.959 298.823 317.606 298.095 317.278 297.358 cv
317.227 297.244 317.115 297.177 316.998 297.177 cv
316.957 297.177 316.915 297.185 316.875 297.203 cv
316.629 296.64 316.398 296.076 316.179 295.505 cv
316.337 295.446 316.417 295.27 316.358 295.112 cv
316.074 294.352 315.814 293.586 315.578 292.813 cv
315.538 292.681 315.417 292.597 315.286 292.597 cv
315.257 292.597 315.227 292.601 315.198 292.61 cv
315.024 292.023 314.863 291.432 314.717 290.839 cv
314.881 290.8 314.982 290.635 314.943 290.471 cv
314.754 289.683 314.591 288.89 314.452 288.094 cv
314.426 287.946 314.297 287.841 314.151 287.841 cv
314.134 287.841 314.116 287.843 314.099 287.846 cv
313.998 287.241 313.912 286.637 313.839 286.03 cv
314.006 286.01 314.126 285.86 314.108 285.692 cv
314.018 284.888 313.952 284.081 313.911 283.273 cv
313.903 283.11 313.768 282.983 313.606 282.983 cv
313.601 282.983 313.596 282.983 313.591 282.983 cv
313.565 282.371 313.553 281.761 313.555 281.149 cv
313.556 281.149 313.557 281.149 313.558 281.149 cv
313.725 281.149 313.862 281.014 313.863 280.847 cv
313.872 280.038 313.905 279.229 313.964 278.422 cv
313.976 278.254 313.85 278.108 313.682 278.096 cv
313.73 277.486 313.793 276.878 313.869 276.271 cv
313.883 276.273 313.896 276.274 313.909 276.274 cv
314.06 276.274 314.191 276.162 314.212 276.009 cv
314.319 275.208 314.451 274.409 314.608 273.615 cv
314.64 273.449 314.533 273.289 314.368 273.256 cv
314.49 272.659 314.627 272.061 314.777 271.469 cv
314.803 271.475 314.829 271.478 314.854 271.478 cv
314.99 271.478 315.114 271.387 315.15 271.25 cv
315.354 270.469 315.583 269.693 315.836 268.923 cv
315.888 268.763 315.802 268.591 315.642 268.538 cv
315.837 267.958 316.045 267.386 316.268 266.814 cv
316.305 266.829 316.343 266.836 316.38 266.836 cv
316.502 266.836 316.617 266.763 316.664 266.643 cv
316.963 265.894 317.286 265.152 317.632 264.419 cv
317.704 264.267 317.639 264.085 317.487 264.012 cv
317.752 263.463 318.029 262.92 318.321 262.38 cv
318.368 262.406 318.418 262.418 318.467 262.418 cv
318.575 262.418 318.68 262.361 318.736 262.26 cv
319.124 261.554 319.536 260.858 319.971 260.172 cv
320.061 260.03 320.019 259.842 319.877 259.751 cv
320.207 259.239 320.55 258.734 320.906 258.235 cv
320.96 258.274 321.023 258.292 321.085 258.292 cv
321.179 258.292 321.273 258.248 321.332 258.166 cv
321.804 257.515 322.299 256.875 322.815 256.247 cv
322.922 256.117 322.904 255.925 322.774 255.818 cv
323.164 255.351 323.567 254.89 323.982 254.438 cv
324.041 254.492 324.115 254.519 324.19 254.519 cv
324.272 254.519 324.353 254.486 324.414 254.421 cv
324.739 254.072 325.072 253.726 325.413 253.386 cv
325.646 253.152 325.882 252.922 326.12 252.696 cv
326.242 252.58 326.247 252.386 326.131 252.264 cv
326.579 251.844 327.036 251.435 327.498 251.039 cv
327.559 251.111 327.645 251.148 327.732 251.148 cv
327.801 251.148 327.871 251.124 327.929 251.076 cv
328.552 250.551 329.187 250.049 329.833 249.569 cv
329.968 249.469 329.997 249.278 329.897 249.142 cv
330.392 248.781 330.896 248.43 331.404 248.095 cv
331.462 248.184 331.56 248.233 331.66 248.233 cv
331.717 248.233 331.775 248.217 331.826 248.184 cv
332.508 247.74 333.2 247.32 333.901 246.924 cv
334.048 246.841 334.1 246.655 334.017 246.508 cv
334.554 246.21 335.095 245.926 335.642 245.654 cv
335.695 245.763 335.803 245.826 335.917 245.826 cv
335.961 245.826 336.007 245.816 336.05 245.795 cv
336.78 245.44 337.519 245.109 338.265 244.802 cv
338.421 244.737 338.495 244.559 338.431 244.403 cv
338.999 244.174 339.573 243.959 340.149 243.758 cv
340.192 243.884 340.311 243.964 340.438 243.964 cv
340.47 243.964 340.504 243.959 340.537 243.947 cv
341.304 243.686 342.077 243.448 342.857 243.235 cv
343.019 243.19 343.115 243.023 343.071 242.86 cv
343.662 242.704 344.259 242.56 344.855 242.431 cv
344.885 242.575 345.012 242.673 345.154 242.673 cv
345.174 242.673 345.195 242.671 345.216 242.667 cv
346.009 242.502 346.806 242.361 347.606 242.245 cv
347.773 242.221 347.888 242.066 347.865 241.899 cv
348.471 241.816 349.079 241.747 349.687 241.692 cv
349.701 241.851 349.834 241.971 349.991 241.971 cv
350 241.971 350.009 241.971 350.017 241.97 cv
350.824 241.903 351.632 241.861 352.441 241.843 cv
352.609 241.84 352.743 241.7 352.74 241.532 cv
352.927 241.529 353.114 241.528 353.301 241.528 cv
353.726 241.528 354.149 241.535 354.574 241.548 cv
354.568 241.716 354.699 241.858 354.867 241.865 cv
355.675 241.897 356.483 241.953 357.288 242.035 cv
357.298 242.036 357.309 242.036 357.319 242.036 cv
357.474 242.036 357.607 241.919 357.623 241.762 cv
358.23 241.828 358.837 241.908 359.441 242.002 cv
359.414 242.168 359.527 242.325 359.694 242.352 cv
360.491 242.483 361.285 242.637 362.075 242.817 cv
362.098 242.822 362.12 242.824 362.143 242.824 cv
362.282 242.824 362.408 242.729 362.441 242.587 cv
363.035 242.727 363.627 242.881 364.215 243.048 cv
364.168 243.21 364.261 243.379 364.423 243.427 cv
365.198 243.654 365.967 243.905 366.729 244.18 cv
366.763 244.192 366.798 244.198 366.833 244.198 cv
366.958 244.198 367.075 244.121 367.12 243.997 cv
367.692 244.209 368.261 244.434 368.824 244.673 cv
368.758 244.828 368.829 245.007 368.984 245.074 cv
369.724 245.394 370.456 245.738 371.179 246.106 cv
371.223 246.129 371.27 246.139 371.317 246.139 cv
371.428 246.139 371.535 246.079 371.589 245.973 cv
372.13 246.253 372.666 246.547 373.196 246.854 cv
373.111 247 373.16 247.186 373.305 247.272 cv
373.999 247.681 374.682 248.112 375.355 248.567 cv
375.408 248.603 375.467 248.62 375.526 248.62 cv
375.624 248.62 375.72 248.573 375.779 248.486 cv
376.281 248.831 376.776 249.188 377.265 249.558 cv
377.163 249.692 377.188 249.884 377.321 249.986 cv
377.959 250.477 378.585 250.99 379.198 251.525 cv
379.256 251.575 379.328 251.6 379.399 251.6 cv
379.484 251.6 379.568 251.565 379.629 251.496 cv
380.084 251.899 380.533 252.315 380.973 252.743 cv
380.856 252.863 380.857 253.056 380.977 253.174 cv
381.19 253.386 li
381.19 253.386 li
381.766 253.962 382.321 254.551 382.854 255.153 cv
382.914 255.221 382.998 255.256 383.083 255.256 cv
383.154 255.256 383.226 255.231 383.284 255.18 cv
383.688 255.642 384.08 256.114 384.459 256.59 cv
384.326 256.694 384.303 256.886 384.407 257.019 cv
384.908 257.66 385.387 258.313 385.843 258.977 cv
385.902 259.063 385.998 259.109 386.095 259.109 cv
386.154 259.109 386.214 259.092 386.267 259.056 cv
386.61 259.565 386.941 260.08 387.259 260.6 cv
387.115 260.687 387.068 260.875 387.155 261.019 cv
387.572 261.716 387.966 262.423 388.337 263.139 cv
388.392 263.244 388.498 263.304 388.609 263.304 cv
388.656 263.304 388.704 263.293 388.748 263.27 cv
389.026 263.816 389.291 264.369 389.542 264.925 cv
389.388 264.994 389.318 265.174 389.386 265.328 cv
389.714 266.07 390.018 266.82 390.297 267.577 cv
390.343 267.701 390.46 267.777 390.585 267.777 cv
390.619 267.777 390.655 267.771 390.689 267.759 cv
390.897 268.334 391.091 268.915 391.272 269.498 cv
391.111 269.547 391.019 269.717 391.068 269.879 cv
391.302 270.655 391.51 271.437 391.695 272.224 cv
391.728 272.364 391.854 272.459 391.992 272.459 cv
392.015 272.459 392.038 272.457 392.062 272.451 cv
392.197 273.049 392.318 273.647 392.426 274.249 cv
392.26 274.278 392.148 274.436 392.177 274.602 cv
392.313 275.4 392.425 276.202 392.512 277.006 cv
392.529 277.162 392.661 277.279 392.815 277.279 cv
392.826 277.279 392.837 277.278 392.848 277.277 cv
392.909 277.887 392.956 278.494 392.989 279.106 cv
392.821 279.114 392.691 279.257 392.699 279.425 cv
392.728 280.041 392.742 280.658 392.742 281.274 cv
392.742 281.467 392.741 281.659 392.738 281.852 cv
392.735 282.02 392.87 282.159 393.038 282.162 cv
393.025 282.774 392.997 283.383 392.955 283.994 cv
392.948 283.994 392.94 283.993 392.933 283.993 cv
392.774 283.993 392.641 284.115 392.628 284.276 cv
392.567 285.082 392.481 285.887 392.371 286.689 cv
392.36 286.764 392.379 286.837 392.417 286.896 cv
392.085 287.046 391.756 287.201 391.427 287.361 cv
391.275 287.434 391.212 287.617 391.286 287.769 cv
391.286 287.77 391.286 287.77 391.286 287.77 cv
390.739 288.042 390.199 288.325 389.662 288.624 cv
389.662 288.623 389.662 288.623 389.661 288.623 cv
389.605 288.523 389.502 288.467 389.395 288.467 cv
389.344 288.467 389.292 288.48 389.245 288.507 cv
388.532 288.91 387.829 289.336 387.137 289.786 cv
386.996 289.879 386.956 290.068 387.048 290.209 cv
387.048 290.21 387.048 290.21 387.048 290.21 cv
386.541 290.546 386.037 290.897 385.542 291.258 cv
385.541 291.258 385.541 291.258 385.541 291.257 cv
385.481 291.176 385.389 291.134 385.295 291.134 cv
385.232 291.134 385.168 291.153 385.113 291.194 cv
384.457 291.681 383.812 292.191 383.18 292.723 cv
383.05 292.832 383.034 293.025 383.143 293.154 cv
383.143 293.155 383.143 293.155 383.143 293.155 cv
382.681 293.551 382.224 293.959 381.776 294.38 cv
381.776 294.38 381.775 294.379 381.775 294.379 cv
381.715 294.316 381.635 294.284 381.554 294.284 cv
381.478 294.284 381.402 294.312 381.343 294.368 cv
381.102 294.598 380.862 294.832 380.625 295.069 cv
380.279 295.415 379.941 295.765 379.611 296.12 cv
379.611 296.121 li
379.496 296.244 379.503 296.438 379.626 296.553 cv
379.626 296.553 379.627 296.553 379.627 296.553 cv
379.212 297.006 378.809 297.466 378.419 297.933 cv
378.418 297.933 378.418 297.933 378.418 297.933 cv
378.361 297.886 378.292 297.863 378.224 297.863 cv
378.136 297.863 378.048 297.901 377.988 297.974 cv
377.463 298.612 376.961 299.262 376.482 299.923 cv
376.383 300.06 376.414 300.251 376.55 300.35 cv
376.55 300.35 376.551 300.35 376.551 300.35 cv
376.195 300.85 375.852 301.355 375.522 301.867 cv
375.522 301.866 375.521 301.866 375.521 301.866 cv
375.47 301.834 375.414 301.818 375.358 301.818 cv
375.256 301.818 375.157 301.869 375.099 301.96 cv
374.657 302.657 374.239 303.364 373.845 304.08 cv
373.763 304.228 373.817 304.414 373.965 304.495 cv
373.965 304.495 373.966 304.496 373.966 304.496 cv
373.674 305.035 373.397 305.579 373.132 306.128 cv
373.132 306.128 373.131 306.128 373.131 306.128 cv
373.089 306.108 373.044 306.098 373.001 306.098 cv
372.886 306.098 372.776 306.163 372.724 306.274 cv
372.372 307.018 372.044 307.771 371.741 308.532 cv
371.678 308.689 371.755 308.867 371.912 308.929 cv
371.912 308.93 371.912 308.93 371.913 308.93 cv
371.69 309.501 371.482 310.074 371.286 310.653 cv
371.286 310.653 371.286 310.653 371.286 310.653 cv
371.254 310.642 371.222 310.637 371.19 310.637 cv
371.062 310.637 370.942 310.719 370.9 310.848 cv
370.643 311.629 370.41 312.417 370.203 313.211 cv
370.16 313.374 370.258 313.541 370.421 313.584 cv
370.421 313.584 370.422 313.584 370.422 313.584 cv
370.272 314.176 370.135 314.774 370.012 315.371 cv
370.012 315.371 370.012 315.371 370.012 315.371 cv
369.992 315.367 369.972 315.365 369.952 315.365 cv
369.809 315.365 369.681 315.466 369.653 315.612 cv
369.518 316.295 369.401 316.981 369.302 317.67 cv
369.069 317.772 368.833 317.873 368.598 317.971 cv
368.549 317.853 368.435 317.781 368.315 317.781 cv
368.277 317.781 368.238 317.789 368.2 317.804 cv
367.449 318.11 366.69 318.392 365.925 318.65 cv
365.765 318.703 365.679 318.876 365.732 319.036 cv
365.15 319.227 364.566 319.404 363.976 319.568 cv
363.939 319.432 363.816 319.342 363.682 319.342 cv
363.655 319.342 363.629 319.346 363.602 319.353 cv
362.82 319.564 362.032 319.75 361.24 319.912 cv
361.075 319.946 360.968 320.107 361.002 320.272 cv
360.401 320.39 359.798 320.494 359.194 320.584 cv
359.172 320.432 359.041 320.322 358.892 320.322 cv
358.878 320.322 358.863 320.323 358.849 320.325 cv
358.047 320.438 357.242 320.527 356.436 320.591 cv
356.268 320.604 356.143 320.751 356.156 320.919 cv
355.545 320.963 354.936 320.992 354.324 321.008 cv
346.575 274.548 mo
346.575 288.001 li
360.028 288.001 li
360.028 274.548 li
346.575 274.548 li
false sop
.178439 .11664 0 0 cmyk
f
381.623 252.953 mo
382.207 253.538 382.77 254.136 383.311 254.747 cv
383.423 254.874 383.412 255.067 383.285 255.179 cv
383.159 255.291 382.966 255.279 382.854 255.153 cv
382.321 254.551 381.766 253.962 381.19 253.386 cv
381.071 253.266 381.071 253.073 381.19 252.953 cv
381.31 252.834 381.503 252.834 381.623 252.953 cv
384.889 256.642 mo
385.398 257.293 385.884 257.956 386.347 258.63 cv
386.442 258.77 386.407 258.96 386.268 259.055 cv
386.129 259.151 385.938 259.116 385.843 258.977 cv
385.387 258.313 384.908 257.66 384.407 257.019 cv
384.303 256.886 384.327 256.694 384.46 256.59 cv
384.592 256.486 384.785 256.509 384.889 256.642 cv
384.889 256.642 li
387.679 260.705 mo
388.103 261.412 388.504 262.131 388.88 262.858 cv
388.958 263.008 388.899 263.192 388.749 263.27 cv
388.599 263.348 388.415 263.289 388.337 263.139 cv
387.966 262.423 387.572 261.716 387.155 261.019 cv
387.068 260.874 387.115 260.687 387.26 260.6 cv
387.405 260.513 387.592 260.56 387.679 260.705 cv
389.946 265.081 mo
390.279 265.835 390.587 266.596 390.871 267.365 cv
390.93 267.524 390.849 267.7 390.69 267.758 cv
390.532 267.817 390.356 267.736 390.297 267.577 cv
390.018 266.82 389.714 266.07 389.386 265.328 cv
389.318 265.173 389.388 264.993 389.543 264.925 cv
389.697 264.856 389.877 264.926 389.946 265.081 cv
389.946 265.081 li
391.654 269.703 mo
391.891 270.491 392.103 271.285 392.29 272.084 cv
392.329 272.248 392.227 272.413 392.063 272.451 cv
391.898 272.49 391.734 272.388 391.695 272.224 cv
391.51 271.437 391.302 270.655 391.068 269.879 cv
391.019 269.717 391.111 269.547 391.273 269.498 cv
391.434 269.449 391.605 269.541 391.654 269.703 cv
392.78 274.499 mo
392.918 275.31 393.031 276.124 393.12 276.94 cv
393.138 277.108 393.017 277.259 392.849 277.277 cv
392.681 277.295 392.53 277.174 392.512 277.006 cv
392.425 276.202 392.313 275.4 392.177 274.602 cv
392.148 274.435 392.26 274.278 392.427 274.249 cv
392.593 274.221 392.751 274.333 392.78 274.499 cv
393.31 279.397 mo
393.339 280.022 393.354 280.648 393.354 281.274 cv
393.354 281.47 393.352 281.665 393.349 281.861 cv
393.347 282.029 393.208 282.164 393.039 282.162 cv
392.87 282.159 392.735 282.021 392.738 281.852 cv
392.741 281.659 392.742 281.467 392.742 281.274 cv
392.742 280.658 392.728 280.041 392.699 279.425 cv
392.691 279.257 392.821 279.113 392.99 279.106 cv
393.159 279.098 393.302 279.228 393.31 279.397 cv
393.238 284.322 mo
393.176 285.141 393.089 285.958 392.977 286.772 cv
392.954 286.939 392.799 287.056 392.632 287.033 cv
392.465 287.01 392.348 286.856 392.371 286.689 cv
392.481 285.887 392.567 285.082 392.628 284.276 cv
392.641 284.108 392.788 283.981 392.956 283.994 cv
393.125 284.007 393.251 284.154 393.238 284.322 cv
392.566 289.201 mo
392.404 290.006 392.218 290.806 392.006 291.601 cv
391.963 291.764 391.795 291.861 391.632 291.818 cv
391.469 291.774 391.372 291.607 391.415 291.444 cv
391.623 290.661 391.807 289.873 391.966 289.081 cv
391.999 288.915 392.161 288.808 392.326 288.841 cv
392.492 288.875 392.599 289.036 392.566 289.201 cv
391.3 293.961 mo
391.042 294.739 390.758 295.51 390.45 296.273 cv
390.387 296.43 390.209 296.506 390.052 296.442 cv
389.896 296.379 389.82 296.201 389.883 296.044 cv
390.186 295.293 390.465 294.534 390.72 293.768 cv
390.774 293.608 390.947 293.521 391.107 293.574 cv
391.267 293.628 391.354 293.801 391.3 293.961 cv
389.459 298.528 mo
389.106 299.267 388.73 299.997 388.33 300.717 cv
388.247 300.865 388.061 300.918 387.914 300.836 cv
387.766 300.754 387.713 300.568 387.795 300.42 cv
388.189 299.711 388.56 298.992 388.907 298.265 cv
388.98 298.113 389.162 298.048 389.314 298.121 cv
389.467 298.193 389.531 298.376 389.459 298.528 cv
387.067 302.832 mo
386.627 303.521 386.163 304.198 385.676 304.865 cv
385.577 305.001 385.385 305.031 385.249 304.931 cv
385.113 304.832 385.083 304.64 385.183 304.504 cv
385.662 303.848 386.118 303.18 386.552 302.503 cv
386.643 302.36 386.832 302.319 386.974 302.41 cv
387.116 302.501 387.158 302.69 387.067 302.832 cv
384.162 306.809 mo
383.641 307.437 383.098 308.052 382.533 308.655 cv
382.418 308.778 382.224 308.784 382.101 308.669 cv
381.978 308.554 381.972 308.36 382.087 308.237 cv
382.644 307.643 383.179 307.037 383.692 306.418 cv
383.799 306.288 383.992 306.27 384.122 306.378 cv
384.252 306.486 384.27 306.679 384.162 306.809 cv
380.794 310.401 mo
380.193 310.969 379.578 311.515 378.952 312.039 cv
378.822 312.147 378.629 312.13 378.521 312 cv
378.413 311.87 378.43 311.678 378.56 311.569 cv
379.177 311.054 379.782 310.516 380.374 309.956 cv
380.497 309.84 380.691 309.846 380.806 309.969 cv
380.922 310.091 380.917 310.285 380.794 310.401 cv
377.012 313.561 mo
376.347 314.051 375.67 314.517 374.983 314.961 cv
374.841 315.052 374.651 315.011 374.56 314.869 cv
374.468 314.727 374.509 314.538 374.651 314.447 cv
375.328 314.01 375.995 313.551 376.65 313.068 cv
376.786 312.968 376.977 312.997 377.077 313.133 cv
377.177 313.269 377.148 313.461 377.012 313.561 cv
372.87 316.232 mo
372.151 316.635 371.422 317.015 370.683 317.37 cv
370.531 317.443 370.349 317.379 370.275 317.227 cv
370.202 317.075 370.266 316.892 370.418 316.819 cv
371.145 316.469 371.863 316.096 372.571 315.699 cv
372.719 315.616 372.905 315.668 372.988 315.816 cv
373.07 315.963 373.018 316.149 372.87 316.232 cv
368.431 318.37 mo
367.668 318.681 366.897 318.967 366.12 319.229 cv
365.96 319.283 365.786 319.197 365.733 319.037 cv
365.679 318.877 365.765 318.703 365.925 318.65 cv
366.69 318.392 367.449 318.11 368.2 317.804 cv
368.356 317.74 368.534 317.815 368.598 317.972 cv
368.662 318.128 368.587 318.307 368.431 318.37 cv
363.761 319.943 mo
362.966 320.158 362.167 320.347 361.363 320.511 cv
361.197 320.545 361.036 320.438 361.002 320.273 cv
360.968 320.108 361.075 319.946 361.24 319.912 cv
362.032 319.75 362.82 319.564 363.602 319.353 cv
363.765 319.309 363.933 319.406 363.977 319.569 cv
364.021 319.732 363.924 319.9 363.761 319.943 cv
358.934 320.931 mo
358.12 321.046 357.303 321.136 356.485 321.2 cv
356.316 321.214 356.169 321.088 356.156 320.92 cv
356.142 320.751 356.268 320.604 356.436 320.591 cv
357.242 320.527 358.047 320.438 358.849 320.325 cv
359.016 320.302 359.171 320.418 359.194 320.585 cv
359.218 320.752 359.101 320.907 358.934 320.931 cv
354.023 321.32 mo
353.783 321.324 353.542 321.326 353.302 321.326 cv
352.721 321.326 352.14 321.314 351.56 321.289 cv
351.391 321.281 351.26 321.139 351.267 320.97 cv
351.275 320.801 351.417 320.671 351.586 320.678 cv
352.158 320.702 352.73 320.715 353.302 320.715 cv
353.538 320.715 353.776 320.713 354.012 320.708 cv
354.181 320.706 354.321 320.84 354.324 321.009 cv
354.327 321.177 354.192 321.317 354.023 321.32 cv
349.102 321.107 mo
348.286 321.021 347.472 320.911 346.661 320.775 cv
346.494 320.747 346.382 320.59 346.41 320.423 cv
346.438 320.257 346.595 320.144 346.762 320.172 cv
347.56 320.306 348.362 320.414 349.166 320.499 cv
349.334 320.516 349.456 320.667 349.438 320.835 cv
349.421 321.003 349.27 321.125 349.102 321.107 cv
344.245 320.294 mo
343.445 320.11 342.651 319.9 341.862 319.666 cv
341.7 319.618 341.608 319.448 341.656 319.286 cv
341.704 319.124 341.874 319.032 342.036 319.08 cv
342.813 319.31 343.595 319.517 344.382 319.699 cv
344.547 319.737 344.649 319.901 344.611 320.065 cv
344.573 320.23 344.409 320.332 344.245 320.294 cv
339.523 318.892 mo
338.754 318.611 337.991 318.305 337.237 317.975 cv
337.082 317.907 337.012 317.727 337.079 317.573 cv
337.147 317.418 337.327 317.347 337.482 317.415 cv
338.225 317.74 338.976 318.041 339.733 318.318 cv
339.892 318.376 339.974 318.551 339.916 318.71 cv
339.858 318.869 339.682 318.95 339.523 318.892 cv
335.012 316.919 mo
334.284 316.545 333.565 316.148 332.857 315.726 cv
332.711 315.64 332.664 315.452 332.75 315.307 cv
332.836 315.162 333.024 315.114 333.169 315.201 cv
333.867 315.615 334.574 316.007 335.291 316.375 cv
335.441 316.452 335.5 316.636 335.423 316.786 cv
335.346 316.936 335.162 316.996 335.012 316.919 cv
330.78 314.403 mo
330.104 313.943 329.44 313.46 328.788 312.954 cv
328.655 312.851 328.631 312.659 328.734 312.525 cv
328.838 312.392 329.03 312.367 329.163 312.471 cv
329.805 312.969 330.459 313.445 331.124 313.898 cv
331.263 313.993 331.299 314.183 331.204 314.323 cv
331.109 314.462 330.919 314.498 330.78 314.403 cv
326.889 311.385 mo
326.276 310.846 325.675 310.285 325.088 309.703 cv
324.969 309.584 324.968 309.39 325.087 309.27 cv
325.206 309.151 325.399 309.15 325.519 309.269 cv
326.097 309.843 326.689 310.395 327.292 310.925 cv
327.419 311.037 327.432 311.23 327.32 311.357 cv
327.209 311.484 327.015 311.496 326.889 311.385 cv
323.393 307.915 mo
322.842 307.298 322.314 306.668 321.808 306.026 cv
321.704 305.894 321.727 305.701 321.859 305.597 cv
321.992 305.492 322.184 305.515 322.289 305.648 cv
322.787 306.28 323.307 306.9 323.849 307.508 cv
323.961 307.634 323.951 307.827 323.825 307.94 cv
323.699 308.052 323.505 308.041 323.393 307.915 cv
320.343 304.044 mo
319.873 303.365 319.426 302.675 319.003 301.974 cv
318.915 301.83 318.961 301.642 319.106 301.555 cv
319.25 301.467 319.438 301.513 319.526 301.658 cv
319.943 302.347 320.383 303.027 320.846 303.695 cv
320.942 303.834 320.907 304.025 320.768 304.121 cv
320.629 304.217 320.439 304.182 320.343 304.044 cv
317.793 299.826 mo
317.411 299.095 317.053 298.355 316.719 297.607 cv
316.65 297.453 316.72 297.272 316.874 297.203 cv
317.028 297.135 317.209 297.204 317.278 297.358 cv
317.606 298.095 317.959 298.823 318.335 299.543 cv
318.413 299.692 318.355 299.877 318.206 299.955 cv
318.056 300.034 317.871 299.976 317.793 299.826 cv
315.785 295.326 mo
315.497 294.555 315.233 293.776 314.994 292.992 cv
314.944 292.83 315.035 292.659 315.197 292.61 cv
315.358 292.561 315.529 292.652 315.578 292.813 cv
315.814 293.586 316.074 294.352 316.358 295.112 cv
316.417 295.27 316.337 295.446 316.179 295.505 cv
316.02 295.565 315.844 295.484 315.785 295.326 cv
314.348 290.613 mo
314.157 289.813 313.991 289.008 313.849 288.2 cv
313.82 288.033 313.932 287.875 314.098 287.846 cv
314.264 287.817 314.423 287.928 314.452 288.094 cv
314.591 288.89 314.754 289.683 314.943 290.471 cv
314.982 290.635 314.88 290.8 314.716 290.84 cv
314.552 290.879 314.387 290.777 314.348 290.613 cv
314.348 290.613 li
313.5 285.76 mo
313.408 284.943 313.342 284.124 313.301 283.304 cv
313.292 283.135 313.422 282.992 313.591 282.983 cv
313.759 282.975 313.903 283.104 313.911 283.273 cv
313.952 284.081 314.018 284.888 314.108 285.692 cv
314.126 285.86 314.006 286.011 313.838 286.03 cv
313.67 286.049 313.519 285.928 313.5 285.76 cv
313.5 285.76 li
313.252 280.84 mo
313.261 280.019 313.295 279.198 313.354 278.378 cv
313.366 278.21 313.512 278.083 313.681 278.095 cv
313.849 278.107 313.976 278.254 313.964 278.422 cv
313.905 279.229 313.872 280.038 313.863 280.847 cv
313.862 281.016 313.723 281.151 313.554 281.149 cv
313.385 281.148 313.25 281.009 313.252 280.84 cv
313.606 275.927 mo
313.715 275.114 313.849 274.303 314.008 273.497 cv
314.04 273.331 314.201 273.223 314.367 273.256 cv
314.532 273.288 314.64 273.449 314.608 273.615 cv
314.451 274.409 314.319 275.208 314.212 276.009 cv
314.19 276.176 314.036 276.293 313.869 276.271 cv
313.701 276.249 313.584 276.095 313.606 275.927 cv
313.606 275.927 li
314.558 271.095 mo
314.766 270.302 314.998 269.514 315.255 268.732 cv
315.308 268.572 315.48 268.485 315.641 268.537 cv
315.801 268.59 315.888 268.763 315.836 268.923 cv
315.583 269.693 315.354 270.469 315.15 271.25 cv
315.107 271.413 314.94 271.511 314.776 271.468 cv
314.613 271.426 314.515 271.258 314.558 271.095 cv
316.096 266.417 mo
316.4 265.656 316.727 264.903 317.079 264.158 cv
317.151 264.005 317.334 263.94 317.486 264.012 cv
317.639 264.084 317.704 264.266 317.632 264.419 cv
317.286 265.152 316.963 265.894 316.664 266.643 cv
316.602 266.8 316.424 266.877 316.267 266.814 cv
316.11 266.751 316.034 266.574 316.096 266.417 cv
318.2 261.964 mo
318.595 261.248 319.013 260.541 319.454 259.845 cv
319.545 259.702 319.734 259.66 319.876 259.75 cv
320.019 259.841 320.061 260.03 319.971 260.172 cv
319.536 260.858 319.124 261.554 318.736 262.26 cv
318.654 262.407 318.468 262.461 318.32 262.38 cv
318.172 262.298 318.119 262.112 318.2 261.964 cv
320.837 257.807 mo
321.317 257.146 321.818 256.496 322.343 255.859 cv
322.45 255.728 322.643 255.71 322.773 255.817 cv
322.904 255.924 322.922 256.117 322.815 256.247 cv
322.299 256.875 321.804 257.515 321.332 258.166 cv
321.233 258.303 321.042 258.333 320.906 258.234 cv
320.769 258.135 320.738 257.944 320.837 257.807 cv
323.966 254.005 mo
324.296 253.65 324.635 253.299 324.981 252.953 cv
325.217 252.716 325.457 252.483 325.698 252.253 cv
325.821 252.136 326.014 252.141 326.131 252.264 cv
326.247 252.386 326.242 252.579 326.12 252.696 cv
325.882 252.922 325.646 253.152 325.413 253.386 cv
325.072 253.726 324.739 254.072 324.414 254.421 cv
324.298 254.545 324.105 254.552 323.981 254.437 cv
323.858 254.322 323.851 254.128 323.966 254.005 cv
327.535 250.608 mo
328.167 250.075 328.812 249.566 329.469 249.078 cv
329.604 248.978 329.796 249.006 329.896 249.142 cv
329.997 249.277 329.969 249.469 329.833 249.569 cv
329.187 250.049 328.552 250.551 327.929 251.076 cv
327.799 251.184 327.607 251.168 327.498 251.039 cv
327.389 250.91 327.406 250.717 327.535 250.608 cv
331.493 247.671 mo
332.185 247.221 332.888 246.794 333.6 246.391 cv
333.747 246.308 333.934 246.36 334.017 246.507 cv
334.1 246.654 334.048 246.841 333.901 246.924 cv
333.2 247.32 332.508 247.74 331.826 248.184 cv
331.685 248.276 331.495 248.235 331.403 248.094 cv
331.311 247.952 331.351 247.763 331.493 247.671 cv
335.783 245.245 mo
336.524 244.884 337.274 244.548 338.032 244.236 cv
338.188 244.172 338.367 244.246 338.431 244.402 cv
338.495 244.559 338.421 244.737 338.265 244.802 cv
337.519 245.109 336.78 245.44 336.05 245.795 cv
335.898 245.869 335.715 245.805 335.641 245.654 cv
335.568 245.502 335.631 245.319 335.783 245.245 cv
340.339 243.369 mo
341.118 243.103 341.904 242.862 342.695 242.645 cv
342.858 242.601 343.026 242.696 343.071 242.859 cv
343.115 243.022 343.019 243.19 342.857 243.235 cv
342.077 243.448 341.304 243.686 340.537 243.947 cv
340.377 244.002 340.203 243.917 340.148 243.757 cv
340.094 243.597 340.179 243.423 340.339 243.369 cv
345.091 242.068 mo
345.897 241.9 346.706 241.758 347.518 241.64 cv
347.685 241.615 347.84 241.731 347.865 241.898 cv
347.889 242.065 347.773 242.221 347.606 242.245 cv
346.806 242.361 346.009 242.502 345.216 242.667 cv
345.051 242.701 344.889 242.595 344.854 242.43 cv
344.82 242.265 344.926 242.103 345.091 242.068 cv
349.967 241.361 mo
350.786 241.293 351.606 241.25 352.428 241.232 cv
352.596 241.228 352.736 241.362 352.74 241.531 cv
352.743 241.7 352.61 241.84 352.441 241.843 cv
351.632 241.861 350.824 241.903 350.017 241.97 cv
349.849 241.984 349.701 241.859 349.687 241.691 cv
349.673 241.522 349.798 241.375 349.967 241.361 cv
354.892 241.254 mo
355.712 241.286 356.532 241.344 357.35 241.426 cv
357.518 241.443 357.64 241.593 357.623 241.761 cv
357.606 241.929 357.456 242.052 357.288 242.035 cv
356.483 241.953 355.675 241.897 354.867 241.865 cv
354.699 241.858 354.567 241.716 354.574 241.547 cv
354.581 241.379 354.723 241.247 354.892 241.254 cv
359.792 241.749 mo
360.602 241.881 361.408 242.038 362.21 242.22 cv
362.375 242.258 362.478 242.422 362.441 242.586 cv
362.403 242.751 362.24 242.854 362.075 242.817 cv
361.285 242.637 360.491 242.483 359.694 242.352 cv
359.527 242.325 359.414 242.168 359.441 242.001 cv
359.468 241.835 359.625 241.722 359.792 241.749 cv
364.595 242.84 mo
365.382 243.07 366.162 243.325 366.937 243.605 cv
367.096 243.662 367.178 243.837 367.12 243.996 cv
367.063 244.155 366.888 244.237 366.729 244.18 cv
365.967 243.905 365.198 243.654 364.423 243.427 cv
364.261 243.379 364.168 243.209 364.215 243.047 cv
364.263 242.885 364.433 242.792 364.595 242.84 cv
364.595 242.84 li
369.227 244.513 mo
369.978 244.838 370.722 245.188 371.456 245.561 cv
371.606 245.637 371.666 245.822 371.59 245.972 cv
371.513 246.123 371.329 246.183 371.179 246.106 cv
370.456 245.738 369.724 245.394 368.984 245.074 cv
368.829 245.007 368.757 244.827 368.825 244.672 cv
368.892 244.517 369.072 244.446 369.227 244.513 cv
369.227 244.513 li
373.616 246.745 mo
374.32 247.16 375.014 247.599 375.698 248.06 cv
375.838 248.155 375.874 248.345 375.78 248.485 cv
375.685 248.625 375.495 248.662 375.355 248.567 cv
374.682 248.112 373.999 247.681 373.305 247.272 cv
373.16 247.186 373.111 246.999 373.197 246.853 cv
373.283 246.708 373.47 246.659 373.616 246.745 cv
377.695 249.502 mo
378.342 250 378.977 250.521 379.6 251.064 cv
379.727 251.175 379.74 251.368 379.63 251.495 cv
379.519 251.622 379.325 251.636 379.198 251.525 cv
378.585 250.99 377.959 250.477 377.321 249.986 cv
377.188 249.883 377.163 249.691 377.266 249.558 cv
377.369 249.424 377.561 249.399 377.695 249.502 cv
381.407 252.739 mo
381.623 252.953 li
381.742 253.073 381.742 253.266 381.623 253.386 cv
381.503 253.505 381.31 253.505 381.19 253.386 cv
380.977 253.174 li
380.857 253.056 380.856 252.862 380.974 252.742 cv
381.093 252.622 381.286 252.62 381.407 252.739 cv
0 0 0 1 cmyk
f
360.028 288.001 mo
346.575 288.001 li
346.575 274.548 li
360.028 274.548 li
360.028 288.001 li
.287388 .195163 0 0 cmyk
f
.611481 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
346.575 274.854 mo
360.028 274.854 li
360.028 288.306 li
346.575 288.306 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: PBAAAA+Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Helvetica
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc0000036c6670
676d000000000000042800000a1d676c7966000000000000134400001368
686561640000000000000e4800000036686865610000000000000e800000
0024686d74780000000000000ea40000005c6c6f63610000000000000f00
000000306d6178700000000000000f30000000206e616d65000000000000
0f5000000024707265700000000000000f74000003cf6764697200000000
000000000000000005c0001005bd00280580001a042f001f0000ffd90000
ffda0000ffd9fe55ffe605c70010fe6dfff1033b000000b9000000b902fe
3f3c00c0008d009b00af000600a800c00028005e009800c9016a00b9015c
00b400d6011e002e0080000400b8004c00cc01ffffd1006600a400af0074
00c2009500b1000c0028006d0015004c008e0125ff7a000c0040004c0062
0084ffa200240038008600bd0039005e008e00edffa9ffb3004000520055
00aa00ab00c200cb012302b10413ffaeffe4000800510074008400aa00d1
ff4cffaf0012002c004200500051008400be012503daff680018003b0098
009c009f00a100c100ec018201b4ff68ff76ffd0ffe100020018001c0053
0053007d01b401e103af0486ff9cffeafffe001f0028002a005200600093
00a300aa00af00af00c001000145016b0174019301950240028202b40485
0517fefd00060029004700470048006f008800b400b900c400f200f901ef
02180310037403c5ff35fff3000b004b004c005200550065007600760087
0087008e00ab00bb0106013001430150017d0194019501d3022a02550258
0277027802e6034e035c037903d3047304b2058c0598060bfef5ffbbffc7
ffd50017001d005b0072007e009c00c200d000f400fa01030106011c0125
013b0142015e015e0180019b02b901a101b9025001c001d002aa01df01e3
01ef01fb0205020c0215022b0274029302ab02c202ce03690395039903df
03f5043e050205a105e5062507dbfe62fe89feceff3bffe1fff800030008
002100390042004e005f0061006f00700034007f008e00ad00ad00af00bd
00c400c500c900c900c900e3011c00ed00f800f901000112011a0132014d
014d014e014f01660169019e01ba01ba01be01e301ef01f6020002000209
02110217021c02530262026d028002d50280031b032a034a035a03af03af
03c803d603fb03fb04050413041504470449008c046d049a049a04a604a8
04b204cf0539053e054e055605800589058c036305d105d6067e068e06b2
06ef06f00728074c076f078c00b400c900c000c100000000000000000000
00000004012400af0032006e0063014401620096014301a10161008a0074
0064018801ef01700028ff5d037e0347023000aa00be007b0062009a007d
0089035c00a1ffd803aa00d70093006c0000008000a70442001d0597001d
00820030002a002a002a002a002a40292a292827262524232221201f1e1d
1c1b1a191817161514131211100d0c0b0a090807060504030201002c4523
466020b02660b004262348482d2c452346236120b02661b004262348482d
2c45234660b0206120b04660b004262348482d2c4523462361b0206020b0
2661b02061b004262348482d2c45234660b0406120b06660b00426234848
2d2c4523462361b0406020b02661b04061b004262348482d2c0110203c00
3c2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed515823
20b04d44235920b09051582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b9400000000a2d2c00b9000040000b
2d2c2045b00043617d6818b0004360442d2c45b01a234445b01923442d2c
2045b00325456164b050515845441b2121592d2c20b0032552582359212d
2c69b04061b0008b0c6423648bb8400062600c642364615c58b0036159b0
02602d2c45b0112bb0172344b0177ae5182d2c45b0112bb01723442d2c45
b0112bb017458cb0172344b0177ae5182d2cb002254661658a46b040608b
482d2cb0022546608a46b040618c482d2c4b53205c58b002855958b00185
592d2c20b0032545b019236a4445b01a23444565234520b00325606a20b0
09234223688a6a606120b0005258b21a401a4523614459b0005058b21940
1945236144592d2cb9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b
2d2cb93b21e7830b2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845
441b2121592d2c0120b003252349b04060b0206320b000525823b0022538
23b002256538008a63381b212121212159012d2c456920b00943b0022660
b00325b005254961b0805358b21940194523616844b21a401a4523606a44
b209191a45652345604259b00943608a103a2d2c01b005251023208af500
b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b00625
10f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d
2c764520b003254523616818236860442d2c7645b0032545236168231845
6860442d2c7645b0032545616823452361442d2c4569b014b0324b505821
b0205961442db8002b2c4bb800095058b101018e59b801ff85b800441db9
000900035f5e2db8002c2c2020456944b001602db8002d2cb8002c2a212d
b8002e2c2046b003254652582359208a208a49648a204620686164b00425
4620686164525823658a592f20b00053586920b000545821b040591b6920
b000545821b0406559593a2db8002f2c2046b00425465258238a59204620
6a6164b0042546206a61645258238a592ffd2db800302c4b20b003265058
5158b080441bb04044591b21212045b0c05058b0c0441b2159592db80031
2c2020456944b001602020457d691844b001602db800322cb800312a2db8
00332c4b20b003265358b0801bb040598a8a20b0032653582321b0c08a8a
1b8a235920b0032653582321b801008a8a1b8a235920b0032653582321b8
01408a8a1b8a235920b80003265358b0032545b8018050582321b8018023
211bb003254523212321591b2159442db800342c4b535845441b2121592d
b800352c4bb800095058b101018e59b801ff85b800441db9000900035f5e
2db800362c2020456944b001602db800372cb800362a212db800382c2046
b003254652582359208a208a49648a204620686164b00425462068616452
5823658a592f20b00053586920b000545821b040591b6920b000545821b0
406559593a2db800392c2046b00425465258238a592046206a6164b00425
46206a61645258238a592ffd2db8003a2c4b20b0032650585158b080441b
b04044591b21212045b0c05058b0c0441b2159592db8003b2c2020456944
b001602020457d691844b001602db8003c2cb8003b2a2db8003d2c4b20b0
03265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b0
032653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a
235920b80003265358b0032545b8018050582321b8018023211bb0032545
23212321591b2159442db8003e2c4b535845441b2121592db8003f2c4bb8
00095058b101018e59b801ff85b800441db9000900035f5e2db800402c20
20456944b001602db800412cb800402a212db800422c2046b00325465258
2359208a208a49648a204620686164b004254620686164525823658a592f
20b00053586920b000545821b040591b6920b000545821b0406559593a2d
b800432c2046b00425465258238a592046206a6164b0042546206a616452
58238a592ffd2db800442c4b20b0032650585158b080441bb04044591b21
212045b0c05058b0c0441b2159592db800452c2020456944b00160202045
7d691844b001602db800462cb800452a2db800472c4b20b003265358b080
1bb040598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321
b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003
265358b0032545b8018050582321b8018023211bb003254523212321591b
2159442db800482c4b535845441b2121592db800492c4bb800095058b101
018e59b801ff85b800441db9000900035f5e2db8004a2c2020456944b001
602db8004b2cb8004a2a212db8004c2c2046b003254652582359208a208a
49648a204620686164b004254620686164525823658a592f20b000535869
20b000545821b040591b6920b000545821b0406559593a2db8004d2c2046
b00425465258238a592046206a6164b0042546206a61645258238a592ffd
2db8004e2c4b20b0032650585158b080441bb04044591b21212045b0c050
58b0c0441b2159592db8004f2c2020456944b001602020457d691844b001
602db800502cb8004f2a2db800512c4b20b003265358b0801bb040598a8a
20b0032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b
8a235920b0032653582321b801408a8a1b8a235920b80003265358b00325
45b8018050582321b8018023211bb003254523212321591b2159442db800
522c4b535845441b2121592db800532c4bb800095058b101018e59b801ff
85b800441db9000900035f5e2db800542c2020456944b001602db800552c
b800542a212db800562c2046b003254652582359208a208a49648a204620
686164b004254620686164525823658a592f20b00053586920b000545821
b040591b6920b000545821b0406559593a2db800572c2046b00425465258
238a592046206a6164b0042546206a61645258238a592ffd2db800582c4b
20b0032650585158b080441bb04044591b21212045b0c05058b0c0441b21
59592db800592c2020456944b001602020457d691844b001602db8005a2c
b800592a2db8005b2c4b20b003265358b0401bb000598a8a20b003265358
2321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a235920b003
2653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a23
5920b80003265358b0032545b8018050582321b8018023211bb003254523
212321591b2159442db8005c2c4b535845441b2121592d00000000010000
0000000030cedbbf5f0f3cf500110800000000005f4d8f0000000000cdb9
bab7f865fc270b9108f9000000090001000000000000000100000629fe29
00000c01f865fced0b910001000000000000000000000000000000170512
00420239000005c7005a0473009c055600af0556006005c700aa05560034
0473005204730038047300480473003d0473008401c7008401c7008906aa
0084047300840473003b02aa008904000042023900170473008004000015
00000036003600c600ee01440210025802b6038003ec04b6055e05ae05dc
05fe067a06d6074e0794087408c4091e09b400010000001700920009006b
0007000200100010005d000007e80a1d0004000100000001001200010000
00000006001000004753465749562b48656c7665746963610000b800532b
b800492bb8003f2bb800352bb8002b2b4118008001a6009001a600a001a6
00030069018b0079018b0089018b0099018b00040089018b0099018b00a9
018b00b9018bb2040840ba0179001a014a400b041f5414191f180a0b1fd2
b80106b49e1fd918e3bb0119000d00e10119b20d0009410a01a0019f0064
001f01a50025017a00480028019ab3296c1f60410a01a9007001a9008001
a90003008001a9000101a9b21e321fbe012c00250401001f0126001e0401
b61fe7312d1fe531b80201b21fc227b80401b21fc11eb80201400f1fc01d
9e1fbf1d671fbe1d671fab27b80401b21faa29b80401b61fa91d6c1f931e
b8019ab21f921db80101b21f911db80101b21f751db80201b61f6d29961f
6431b8019ab21f4c96b802abb21f391db80156400b1f3638211f351de41f
2f27b80801400b1f2d1d4c1f2a31cd1f241db802abb21f201eb801254011
1f1c1d931f3a1d4c1f1e1d45273a1d4527bb01aa019b002a019bb2254a1f
ba019b0025017ab349293896b8017bb348283125b8017a40364828962948
2725294c1f252946272729482756c80784075b07410732072b0728072607
21071b071408120810080e080c080a08080807b801acb23f1f06bb01ab00
3f001f01abb308060805b801aeb23f1f04bb01ad003f001f01adb7080408
0208000814b8ffe0b40000010014b801abb41000000100b801abb6061000
00010006b801adb300000100b801ad401f04000001000410000001001002
000001000200000001000002010802004a00b0018db806008516763f183f
123e113946443e113946443e113946443e113946443e113946443e113946
60443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d59b0324b5358b0ff
1d592b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b2b2b65422b2b4b5279b376706a
66456523456023456560234560b08b766818b080622020b16a7045652345
20b003266062636820b003266165b070236544b06a234420b17666456523
4520b003266062636820b003266165b066236544b0762344b10066455458
b166406544b27640764523614459b36242725d4565234560234565602345
60b089766818b080622020b172424565234520b003266062636820b00326
6165b042236544b072234420b1625d4565234520b003266062636820b003
266165b05d236544b0622344b1005d455458b15d406544b2624062452361
44592b2b2b2b456953427374b8019a2045694b20b02853b049515a58b020
615944b801a620456944750000>
[4969 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 476 4 <000200af000004f805bd000a001400614035690c6912790c7a1204481458
1468147a140407081e1110100a010e0f1e0100020a080206120c04091414
31041a160f092500191516b8010bb3219589182b2b4ef44dfd3c4e10f64d
fd11121739003f3f3cfd3c1012392f3cfd3c015d31305d13213216151406
2321112300272623211121323635af0295c4f0d6defe32c70380784273fe
74018c86a705bdddc8acfffd9304b93a1ffe03729000>PBAAAA+Helvetica AddT42Char 
1 2908 13 <000200840000013b05bd000300070036401c07e50400010006030a091717
1a06010229070300190809aa216242182b2b4ef43c4dc4fd3cc44e456544
e6003f3f3c3f4ded3130133311231133152384b7b7b7b7042afbd605bdcc
0000>PBAAAA+Helvetica AddT42Char 
1 0 0 <00020042000004d005bd000300070043b800532bb800082fb800042fb800
0810b80000d0b800002fb8000410b80003dcb8000010b80007dcb8000310
b80009dc00ba0007000000562bba0002000500562b303133112111271121
1142048eb8fce205bdfa43b8044dfbb30000>PBAAAA+Helvetica AddT42Char 
PBAAAA+Helvetica /CharStrings get begin
/P 4 def
/i 13 def
end
PBAAAA+Helvetica /Encoding get
dup 80 /P put
dup 105 /i put
pop
end
%ADOEndSubsetFont
/GJZIJN+Helvetica /PBAAAA+Helvetica findfont ct_VMDictPut
/GJZIJN+Helvetica*1 
[80{/.notdef}rp /P 24{/.notdef}rp /i 150{/.notdef}rp]
GJZIJN+Helvetica nf
GJZIJN+Helvetica*1 [7.3378 0 0 -7.3378 0 0 ]msf
350.039 283.72 mo
(Pi)
[4.89438 0 ]xsh
435.977 352.111 mo
435.744 351.895 435.51 351.683 435.273 351.473 cv
435.274 351.473 435.274 351.472 435.274 351.472 cv
435.385 351.345 435.372 351.152 435.245 351.041 cv
434.622 350.498 433.987 349.977 433.339 349.479 cv
433.284 349.436 433.218 349.415 433.153 349.415 cv
433.061 349.415 432.971 349.456 432.911 349.534 cv
432.91 349.535 432.91 349.535 432.91 349.535 cv
432.421 349.165 431.926 348.808 431.424 348.463 cv
431.424 348.463 431.424 348.462 431.425 348.462 cv
431.519 348.322 431.482 348.132 431.342 348.037 cv
430.659 347.575 429.965 347.137 429.26 346.722 cv
429.212 346.693 429.158 346.68 429.105 346.68 cv
429.001 346.68 428.899 346.733 428.842 346.83 cv
428.842 346.831 428.841 346.831 428.841 346.831 cv
428.311 346.524 427.775 346.23 427.234 345.95 cv
427.234 345.95 427.234 345.949 427.234 345.949 cv
427.311 345.798 427.251 345.615 427.101 345.538 cv
426.366 345.165 425.623 344.815 424.871 344.49 cv
424.832 344.473 424.791 344.465 424.75 344.465 cv
424.632 344.465 424.519 344.534 424.469 344.649 cv
424.469 344.649 424.469 344.65 424.469 344.65 cv
423.905 344.411 423.337 344.186 422.765 343.974 cv
422.765 343.974 422.765 343.973 422.765 343.973 cv
422.822 343.814 422.74 343.639 422.581 343.582 cv
421.807 343.302 421.026 343.047 420.24 342.817 cv
420.211 342.808 420.182 342.804 420.154 342.804 cv
420.021 342.804 419.899 342.891 419.86 343.024 cv
419.86 343.025 419.86 343.025 419.86 343.025 cv
419.272 342.858 418.679 342.704 418.085 342.564 cv
418.085 342.564 418.085 342.564 418.086 342.563 cv
418.123 342.399 418.02 342.235 417.855 342.197 cv
417.053 342.015 416.247 341.858 415.437 341.726 cv
415.42 341.723 415.404 341.722 415.387 341.722 cv
415.24 341.722 415.11 341.828 415.086 341.978 cv
415.086 341.978 415.086 341.979 415.086 341.979 cv
414.482 341.885 413.874 341.805 413.267 341.739 cv
413.268 341.739 413.268 341.738 413.268 341.738 cv
413.285 341.57 413.162 341.42 412.994 341.403 cv
412.176 341.321 411.357 341.263 410.536 341.231 cv
410.532 341.231 410.528 341.231 410.524 341.231 cv
410.361 341.231 410.225 341.36 410.219 341.524 cv
410.219 341.524 410.219 341.525 410.219 341.525 cv
409.794 341.512 409.371 341.505 408.946 341.505 cv
408.759 341.505 408.572 341.506 408.385 341.509 cv
408.385 341.509 408.385 341.508 408.385 341.508 cv
408.381 341.341 408.245 341.209 408.079 341.209 cv
408.077 341.209 408.074 341.209 408.072 341.209 cv
407.251 341.227 406.43 341.27 405.611 341.338 cv
405.443 341.352 405.318 341.499 405.332 341.667 cv
405.332 341.668 405.332 341.668 405.332 341.669 cv
404.723 341.724 404.116 341.793 403.509 341.876 cv
403.509 341.876 403.509 341.876 403.509 341.875 cv
403.487 341.723 403.357 341.613 403.207 341.613 cv
403.193 341.613 403.178 341.615 403.163 341.617 cv
402.351 341.734 401.541 341.877 400.736 342.045 cv
400.571 342.08 400.465 342.242 400.499 342.407 cv
400.499 342.407 400.499 342.408 400.499 342.408 cv
399.902 342.537 399.308 342.68 398.716 342.837 cv
398.716 342.837 398.716 342.837 398.715 342.836 cv
398.678 342.7 398.555 342.611 398.421 342.611 cv
398.394 342.611 398.367 342.615 398.34 342.622 cv
397.549 342.839 396.763 343.08 395.984 343.345 cv
395.824 343.4 395.738 343.574 395.793 343.734 cv
395.793 343.734 395.793 343.734 395.793 343.735 cv
395.217 343.936 394.644 344.151 394.076 344.38 cv
394.076 344.38 394.076 344.38 394.076 344.379 cv
394.027 344.261 393.913 344.19 393.793 344.19 cv
393.754 344.19 393.715 344.197 393.676 344.213 cv
392.919 344.525 392.169 344.861 391.427 345.222 cv
391.275 345.296 391.212 345.479 391.286 345.631 cv
391.286 345.631 391.286 345.631 391.286 345.631 cv
390.739 345.903 390.199 346.187 389.662 346.485 cv
389.662 346.484 389.662 346.484 389.661 346.484 cv
389.605 346.384 389.502 346.329 389.395 346.329 cv
389.344 346.329 389.292 346.341 389.245 346.368 cv
388.532 346.771 387.829 347.198 387.137 347.648 cv
386.996 347.74 386.956 347.929 387.048 348.071 cv
387.048 348.071 387.048 348.071 387.048 348.072 cv
386.541 348.407 386.037 348.758 385.542 349.119 cv
385.541 349.119 385.541 349.119 385.541 349.118 cv
385.481 349.038 385.389 348.995 385.295 348.995 cv
385.232 348.995 385.168 349.015 385.113 349.055 cv
384.457 349.543 383.812 350.052 383.18 350.585 cv
383.05 350.694 383.034 350.886 383.143 351.016 cv
383.143 351.016 383.143 351.016 383.143 351.016 cv
382.729 351.371 382.318 351.737 381.915 352.111 cv
381.662 351.873 381.412 351.631 381.164 351.384 cv
381.104 351.325 381.026 351.296 380.948 351.296 cv
380.87 351.296 380.792 351.326 380.732 351.386 cv
380.298 350.949 379.879 350.507 379.47 350.055 cv
379.595 349.942 379.606 349.75 379.494 349.624 cv
378.952 349.016 378.431 348.396 377.933 347.763 cv
377.873 347.687 377.783 347.647 377.693 347.647 cv
377.627 347.647 377.561 347.668 377.505 347.712 cv
377.129 347.227 376.764 346.734 376.414 346.236 cv
376.552 346.14 376.586 345.95 376.49 345.811 cv
376.027 345.143 375.587 344.463 375.17 343.774 cv
375.113 343.679 375.012 343.626 374.909 343.626 cv
374.855 343.626 374.801 343.64 374.751 343.67 cv
374.438 343.142 374.138 342.609 373.851 342.071 cv
374 341.992 374.058 341.808 373.98 341.658 cv
373.604 340.939 373.251 340.21 372.922 339.474 cv
372.872 339.36 372.76 339.292 372.643 339.292 cv
372.602 339.292 372.56 339.301 372.519 339.319 cv
372.273 338.756 372.042 338.192 371.824 337.621 cv
371.982 337.561 372.061 337.385 372.002 337.228 cv
371.718 336.468 371.459 335.701 371.223 334.929 cv
371.183 334.797 371.062 334.712 370.931 334.712 cv
370.901 334.712 370.872 334.717 370.842 334.725 cv
370.668 334.139 370.508 333.548 370.362 332.955 cv
370.525 332.915 370.626 332.751 370.587 332.587 cv
370.399 331.799 370.236 331.006 370.096 330.21 cv
370.07 330.061 369.941 329.957 369.796 329.957 cv
369.778 329.957 369.761 329.958 369.743 329.961 cv
369.643 329.357 369.556 328.753 369.483 328.145 cv
369.651 328.126 369.771 327.975 369.752 327.808 cv
369.662 327.003 369.597 326.196 369.556 325.389 cv
369.548 325.225 369.413 325.098 369.251 325.098 cv
369.246 325.098 369.241 325.099 369.236 325.099 cv
369.21 324.487 369.198 323.877 369.2 323.265 cv
369.201 323.265 369.202 323.265 369.202 323.265 cv
369.37 323.265 369.506 323.13 369.508 322.962 cv
369.517 322.154 369.55 321.345 369.608 320.538 cv
369.621 320.37 369.494 320.224 369.326 320.211 cv
369.375 319.602 369.437 318.994 369.514 318.387 cv
369.527 318.389 369.541 318.389 369.554 318.389 cv
369.705 318.389 369.836 318.278 369.857 318.124 cv
369.89 317.873 369.927 317.622 369.965 317.371 cv
370.068 317.323 370.172 317.275 370.275 317.226 cv
370.275 317.227 370.275 317.227 370.275 317.227 cv
370.328 317.337 370.437 317.4 370.551 317.4 cv
370.595 317.4 370.641 317.391 370.683 317.37 cv
371.422 317.015 372.151 316.635 372.87 316.232 cv
373.018 316.149 373.07 315.963 372.988 315.816 cv
372.987 315.816 372.987 315.815 372.987 315.815 cv
373.517 315.513 374.041 315.197 374.559 314.869 cv
374.559 314.869 374.56 314.869 374.56 314.869 cv
374.618 314.96 374.717 315.009 374.817 315.009 cv
374.874 315.009 374.931 314.994 374.983 314.961 cv
375.67 314.517 376.347 314.051 377.012 313.561 cv
377.148 313.461 377.177 313.269 377.077 313.133 cv
377.077 313.133 377.077 313.133 377.076 313.133 cv
377.565 312.767 378.045 312.391 378.52 311.999 cv
378.521 312 378.521 312 378.521 312 cv
378.581 312.072 378.668 312.11 378.756 312.11 cv
378.825 312.11 378.894 312.086 378.952 312.039 cv
379.578 311.515 380.193 310.969 380.794 310.401 cv
380.917 310.285 380.922 310.091 380.806 309.969 cv
380.806 309.968 380.806 309.968 380.806 309.968 cv
381.008 309.774 381.208 309.578 381.407 309.379 cv
381.642 309.144 381.873 308.908 382.1 308.668 cv
382.101 308.669 382.101 308.669 382.101 308.669 cv
382.16 308.724 382.235 308.752 382.31 308.752 cv
382.392 308.752 382.473 308.719 382.533 308.655 cv
383.098 308.052 383.641 307.437 384.162 306.809 cv
384.27 306.679 384.252 306.486 384.122 306.378 cv
384.122 306.378 384.122 306.378 384.121 306.378 cv
384.51 305.901 384.885 305.42 385.248 304.93 cv
385.249 304.931 385.249 304.931 385.249 304.931 cv
385.303 304.971 385.367 304.99 385.429 304.99 cv
385.524 304.99 385.616 304.947 385.676 304.865 cv
386.163 304.198 386.627 303.521 387.067 302.832 cv
387.158 302.69 387.116 302.501 386.974 302.41 cv
386.974 302.41 386.974 302.409 386.973 302.409 cv
387.3 301.89 387.613 301.366 387.913 300.836 cv
387.913 300.836 387.913 300.836 387.914 300.836 cv
387.961 300.862 388.012 300.875 388.062 300.875 cv
388.169 300.875 388.274 300.818 388.33 300.717 cv
388.73 299.997 389.106 299.267 389.459 298.528 cv
389.531 298.376 389.467 298.193 389.314 298.121 cv
389.314 298.12 389.314 298.12 389.314 298.12 cv
389.573 297.565 389.819 297.006 390.051 296.442 cv
390.052 296.442 390.052 296.442 390.052 296.442 cv
390.09 296.458 390.128 296.465 390.166 296.465 cv
390.288 296.465 390.402 296.392 390.45 296.273 cv
390.758 295.51 391.042 294.739 391.3 293.961 cv
391.354 293.801 391.267 293.628 391.107 293.574 cv
391.107 293.574 391.106 293.574 391.106 293.574 cv
391.295 292.992 391.47 292.406 391.631 291.817 cv
391.632 291.818 391.632 291.818 391.632 291.818 cv
391.659 291.825 391.685 291.828 391.711 291.828 cv
391.846 291.828 391.97 291.738 392.006 291.601 cv
392.218 290.806 392.404 290.006 392.566 289.201 cv
392.599 289.036 392.492 288.875 392.326 288.841 cv
392.326 288.841 392.325 288.841 392.325 288.841 cv
392.411 288.397 392.489 287.949 392.56 287.503 cv
393.007 287.299 393.457 287.104 393.909 286.917 cv
394.065 286.853 394.14 286.675 394.076 286.519 cv
394.644 286.29 395.217 286.075 395.793 285.873 cv
395.837 286 395.955 286.079 396.082 286.079 cv
396.115 286.079 396.148 286.074 396.181 286.063 cv
396.948 285.801 397.722 285.564 398.501 285.351 cv
398.664 285.306 398.76 285.138 398.716 284.976 cv
399.308 284.819 399.902 284.676 400.499 284.547 cv
400.53 284.69 400.657 284.789 400.798 284.789 cv
400.819 284.789 400.84 284.787 400.861 284.783 cv
401.654 284.617 402.451 284.477 403.251 284.36 cv
403.418 284.336 403.533 284.182 403.509 284.015 cv
404.116 283.932 404.723 283.863 405.332 283.807 cv
405.346 283.966 405.479 284.087 405.636 284.087 cv
405.645 284.087 405.653 284.086 405.662 284.086 cv
406.469 284.019 407.277 283.976 408.086 283.959 cv
408.254 283.955 408.388 283.816 408.385 283.648 cv
408.572 283.645 408.759 283.644 408.946 283.644 cv
409.371 283.644 409.794 283.65 410.219 283.664 cv
410.213 283.832 410.344 283.974 410.512 283.98 cv
411.32 284.012 412.128 284.069 412.933 284.15 cv
412.943 284.151 412.953 284.152 412.964 284.152 cv
413.118 284.152 413.251 284.035 413.267 283.878 cv
413.874 283.944 414.482 284.024 415.086 284.118 cv
415.059 284.284 415.172 284.441 415.338 284.468 cv
416.136 284.598 416.93 284.753 417.72 284.932 cv
417.742 284.937 417.765 284.94 417.788 284.94 cv
417.927 284.94 418.053 284.844 418.085 284.703 cv
418.679 284.843 419.272 284.997 419.86 285.164 cv
419.813 285.326 419.906 285.495 420.068 285.542 cv
420.842 285.769 421.611 286.02 422.374 286.296 cv
422.408 286.308 422.443 286.314 422.478 286.314 cv
422.602 286.314 422.72 286.237 422.765 286.113 cv
423.337 286.325 423.905 286.55 424.469 286.789 cv
424.403 286.944 424.474 287.123 424.629 287.19 cv
425.368 287.51 426.1 287.854 426.823 288.222 cv
426.868 288.244 426.915 288.255 426.962 288.255 cv
427.073 288.255 427.18 288.194 427.234 288.089 cv
427.775 288.369 428.311 288.663 428.841 288.97 cv
428.756 289.115 428.805 289.302 428.95 289.387 cv
429.643 289.796 430.327 290.228 431 290.683 cv
431.053 290.718 431.112 290.735 431.171 290.735 cv
431.269 290.735 431.365 290.688 431.424 290.602 cv
431.926 290.947 432.421 291.303 432.91 291.674 cv
432.808 291.808 432.833 291.999 432.966 292.102 cv
433.604 292.593 434.23 293.105 434.843 293.64 cv
434.901 293.691 434.972 293.716 435.044 293.716 cv
435.129 293.716 435.213 293.68 435.273 293.612 cv
435.73 294.016 436.176 294.43 436.618 294.859 cv
436.5 294.979 436.502 295.172 436.622 295.29 cv
436.835 295.501 li
436.835 295.501 li
437.411 296.077 437.965 296.667 438.498 297.268 cv
438.559 297.337 438.643 297.371 438.727 297.371 cv
438.799 297.371 438.871 297.346 438.929 297.295 cv
439.332 297.758 439.725 298.23 440.103 298.706 cv
439.971 298.81 439.948 299.002 440.052 299.135 cv
440.553 299.775 441.031 300.428 441.487 301.092 cv
441.547 301.179 441.642 301.225 441.74 301.225 cv
441.799 301.225 441.859 301.208 441.912 301.172 cv
442.255 301.68 442.586 302.196 442.903 302.716 cv
442.759 302.803 442.713 302.99 442.799 303.135 cv
443.217 303.832 443.611 304.539 443.982 305.255 cv
444.036 305.36 444.143 305.42 444.254 305.42 cv
444.301 305.42 444.348 305.409 444.393 305.386 cv
444.671 305.932 444.935 306.485 445.186 307.041 cv
445.032 307.109 444.963 307.289 445.031 307.444 cv
445.359 308.186 445.663 308.936 445.942 309.693 cv
445.988 309.816 446.105 309.893 446.229 309.893 cv
446.264 309.893 446.299 309.887 446.334 309.874 cv
446.542 310.45 446.736 311.031 446.916 311.614 cv
446.755 311.663 446.664 311.833 446.713 311.994 cv
446.946 312.771 447.155 313.553 447.34 314.339 cv
447.373 314.48 447.498 314.575 447.637 314.575 cv
447.66 314.575 447.683 314.572 447.706 314.567 cv
447.842 315.164 447.963 315.763 448.07 316.365 cv
447.905 316.394 447.793 316.552 447.822 316.718 cv
447.958 317.516 448.069 318.318 448.157 319.121 cv
448.173 319.278 448.306 319.394 448.46 319.394 cv
448.471 319.394 448.481 319.394 448.492 319.393 cv
448.554 320.002 448.601 320.61 448.634 321.221 cv
448.466 321.23 448.336 321.373 448.344 321.541 cv
448.372 322.157 448.387 322.773 448.387 323.39 cv
448.387 323.583 448.385 323.775 448.382 323.967 cv
448.38 324.136 448.514 324.274 448.683 324.278 cv
448.669 324.89 448.642 325.499 448.6 326.11 cv
448.592 326.109 448.585 326.109 448.577 326.109 cv
448.419 326.109 448.285 326.231 448.273 326.392 cv
448.212 327.198 448.126 328.002 448.016 328.804 cv
447.993 328.971 448.109 329.125 448.276 329.149 cv
448.188 329.753 448.086 330.356 447.97 330.957 cv
447.95 330.953 447.93 330.951 447.911 330.951 cv
447.768 330.951 447.64 331.051 447.611 331.197 cv
447.452 331.988 447.268 332.777 447.06 333.559 cv
447.017 333.722 447.113 333.889 447.276 333.933 cv
447.115 334.522 446.939 335.108 446.751 335.69 cv
446.719 335.679 446.687 335.674 446.655 335.674 cv
446.527 335.674 446.407 335.755 446.365 335.884 cv
446.11 336.649 445.831 337.408 445.528 338.16 cv
445.465 338.317 445.54 338.494 445.696 338.558 cv
445.463 339.122 445.218 339.681 444.958 340.236 cv
444.916 340.216 444.871 340.206 444.827 340.206 cv
444.713 340.206 444.604 340.271 444.551 340.381 cv
444.204 341.108 443.834 341.827 443.44 342.536 cv
443.358 342.683 443.41 342.869 443.557 342.951 cv
443.257 343.482 442.944 344.006 442.618 344.525 cv
442.567 344.493 442.51 344.477 442.454 344.477 cv
442.354 344.477 442.255 344.527 442.196 344.618 cv
441.763 345.296 441.306 345.964 440.827 346.62 cv
440.728 346.756 440.757 346.946 440.893 347.046 cv
440.53 347.535 440.154 348.018 439.766 348.493 cv
439.709 348.446 439.64 348.423 439.572 348.423 cv
439.484 348.423 439.397 348.461 439.336 348.534 cv
438.823 349.152 438.288 349.759 437.732 350.353 cv
437.617 350.476 437.622 350.668 437.745 350.784 cv
437.517 351.023 437.286 351.26 437.051 351.495 cv
436.852 351.694 436.653 351.89 436.45 352.083 cv
436.39 352.02 436.31 351.988 436.229 351.988 cv
436.154 351.988 436.078 352.016 436.019 352.072 cv
436.005 352.085 435.991 352.098 435.977 352.111 cv
402.22 316.664 mo
402.22 330.117 li
415.673 330.117 li
415.673 316.664 li
402.22 316.664 li
.114778 0 .0906386 0 cmyk
f
369.965 317.371 mo
370.049 316.823 370.145 316.276 370.252 315.73 cv
370.285 315.565 370.178 315.405 370.012 315.371 cv
370.135 314.774 370.272 314.176 370.422 313.584 cv
370.448 313.591 370.473 313.594 370.499 313.594 cv
370.634 313.594 370.758 313.503 370.794 313.365 cv
370.999 312.584 371.227 311.809 371.481 311.039 cv
371.533 310.878 371.446 310.706 371.286 310.653 cv
371.482 310.074 371.69 309.501 371.913 308.93 cv
371.95 308.944 371.988 308.951 372.025 308.951 cv
372.146 308.951 372.261 308.879 372.309 308.759 cv
372.608 308.01 372.93 307.268 373.277 306.535 cv
373.349 306.382 373.284 306.2 373.132 306.128 cv
373.397 305.579 373.674 305.035 373.966 304.496 cv
374.012 304.521 374.063 304.533 374.112 304.533 cv
374.22 304.533 374.325 304.476 374.38 304.375 cv
374.769 303.67 375.181 302.974 375.615 302.288 cv
375.706 302.146 375.664 301.958 375.522 301.867 cv
375.852 301.355 376.195 300.85 376.551 300.35 cv
376.605 300.389 376.667 300.408 376.729 300.408 cv
376.824 300.408 376.917 300.364 376.977 300.281 cv
377.449 299.63 377.943 298.991 378.46 298.363 cv
378.567 298.233 378.548 298.041 378.419 297.933 cv
378.809 297.466 379.212 297.006 379.627 296.553 cv
379.686 296.608 379.76 296.635 379.834 296.635 cv
379.916 296.635 379.998 296.602 380.058 296.537 cv
380.384 296.187 380.717 295.842 381.058 295.501 cv
381.291 295.268 381.527 295.038 381.765 294.811 cv
381.887 294.695 381.892 294.502 381.776 294.38 cv
382.224 293.959 382.681 293.551 383.143 293.155 cv
383.204 293.226 383.29 293.263 383.377 293.263 cv
383.446 293.263 383.516 293.24 383.573 293.191 cv
384.196 292.667 384.831 292.165 385.478 291.685 cv
385.613 291.585 385.642 291.394 385.542 291.258 cv
386.037 290.897 386.541 290.546 387.048 290.21 cv
387.107 290.3 387.205 290.349 387.304 290.349 cv
387.362 290.349 387.419 290.332 387.471 290.299 cv
388.152 289.856 388.844 289.436 389.546 289.039 cv
389.692 288.956 389.744 288.77 389.662 288.624 cv
390.199 288.325 390.739 288.042 391.286 287.77 cv
391.34 287.878 391.448 287.941 391.561 287.941 cv
391.606 287.941 391.652 287.931 391.695 287.911 cv
391.982 287.771 392.27 287.635 392.56 287.503 cv
392.489 287.949 392.411 288.397 392.325 288.841 cv
392.305 288.837 392.285 288.835 392.266 288.835 cv
392.123 288.835 391.995 288.936 391.966 289.081 cv
391.807 289.873 391.623 290.661 391.415 291.444 cv
391.372 291.607 391.469 291.774 391.631 291.817 cv
391.47 292.406 391.295 292.992 391.106 293.574 cv
391.074 293.564 391.042 293.559 391.01 293.559 cv
390.882 293.559 390.763 293.64 390.72 293.768 cv
390.465 294.534 390.186 295.293 389.883 296.044 cv
389.82 296.201 389.895 296.379 390.051 296.442 cv
389.819 297.006 389.573 297.565 389.314 298.12 cv
389.271 298.1 389.227 298.091 389.183 298.091 cv
389.069 298.091 388.959 298.155 388.907 298.265 cv
388.56 298.992 388.189 299.711 387.795 300.42 cv
387.713 300.568 387.766 300.753 387.913 300.836 cv
387.613 301.366 387.3 301.89 386.973 302.409 cv
386.923 302.377 386.866 302.362 386.81 302.362 cv
386.709 302.362 386.61 302.411 386.552 302.503 cv
386.118 303.18 385.662 303.848 385.183 304.504 cv
385.083 304.64 385.113 304.831 385.248 304.93 cv
384.885 305.42 384.51 305.901 384.121 306.378 cv
384.064 306.331 383.995 306.308 383.927 306.308 cv
383.839 306.308 383.752 306.345 383.692 306.418 cv
383.179 307.037 382.644 307.643 382.087 308.237 cv
381.972 308.36 381.978 308.553 382.1 308.668 cv
381.873 308.908 381.642 309.144 381.407 309.379 cv
381.208 309.578 381.008 309.774 380.806 309.968 cv
380.746 309.905 380.665 309.873 380.584 309.873 cv
380.509 309.873 380.433 309.9 380.374 309.956 cv
379.782 310.516 379.177 311.054 378.56 311.569 cv
378.43 311.678 378.413 311.87 378.52 311.999 cv
378.045 312.391 377.565 312.767 377.076 313.133 cv
377.016 313.052 376.924 313.009 376.831 313.009 cv
376.768 313.009 376.704 313.028 376.65 313.068 cv
375.995 313.551 375.328 314.01 374.651 314.447 cv
374.509 314.538 374.469 314.727 374.559 314.869 cv
374.041 315.197 373.517 315.513 372.987 315.815 cv
372.931 315.715 372.827 315.659 372.721 315.659 cv
372.67 315.659 372.619 315.672 372.571 315.699 cv
371.863 316.096 371.145 316.469 370.418 316.819 cv
370.266 316.892 370.202 317.074 370.275 317.226 cv
370.172 317.275 370.068 317.323 369.965 317.371 cv
.223392 .0144045 .0810864 0 cmyk
f
370.551 317.4 mo
370.437 317.4 370.328 317.337 370.275 317.227 cv
370.275 317.227 370.275 317.227 370.275 317.226 cv
370.202 317.074 370.266 316.892 370.418 316.819 cv
371.145 316.469 371.863 316.096 372.571 315.699 cv
372.619 315.672 372.67 315.659 372.721 315.659 cv
372.827 315.659 372.931 315.715 372.987 315.815 cv
372.987 315.815 372.987 315.816 372.988 315.816 cv
373.07 315.963 373.018 316.149 372.87 316.232 cv
372.151 316.635 371.422 317.015 370.683 317.37 cv
370.641 317.391 370.595 317.4 370.551 317.4 cv
374.817 315.009 mo
374.717 315.009 374.618 314.96 374.56 314.869 cv
374.56 314.869 374.559 314.869 374.559 314.869 cv
374.469 314.727 374.509 314.538 374.651 314.447 cv
375.328 314.01 375.995 313.551 376.65 313.068 cv
376.704 313.028 376.768 313.009 376.831 313.009 cv
376.924 313.009 377.016 313.052 377.076 313.133 cv
377.077 313.133 377.077 313.133 377.077 313.133 cv
377.177 313.269 377.148 313.461 377.012 313.561 cv
376.347 314.051 375.67 314.517 374.983 314.961 cv
374.931 314.994 374.874 315.009 374.817 315.009 cv
378.756 312.11 mo
378.668 312.11 378.581 312.072 378.521 312 cv
378.521 312 378.521 312 378.52 311.999 cv
378.413 311.87 378.43 311.678 378.56 311.569 cv
379.177 311.054 379.782 310.516 380.374 309.956 cv
380.433 309.9 380.509 309.873 380.584 309.873 cv
380.665 309.873 380.746 309.905 380.806 309.968 cv
380.806 309.968 380.806 309.968 380.806 309.969 cv
380.922 310.091 380.917 310.285 380.794 310.401 cv
380.193 310.969 379.578 311.515 378.952 312.039 cv
378.894 312.086 378.825 312.11 378.756 312.11 cv
382.31 308.752 mo
382.235 308.752 382.16 308.724 382.101 308.669 cv
382.101 308.669 382.101 308.669 382.1 308.668 cv
381.978 308.553 381.972 308.36 382.087 308.237 cv
382.644 307.643 383.179 307.037 383.692 306.418 cv
383.752 306.345 383.839 306.308 383.927 306.308 cv
383.995 306.308 384.064 306.331 384.121 306.378 cv
384.122 306.378 384.122 306.378 384.122 306.378 cv
384.252 306.486 384.27 306.679 384.162 306.809 cv
383.641 307.437 383.098 308.052 382.533 308.655 cv
382.473 308.719 382.392 308.752 382.31 308.752 cv
385.429 304.99 mo
385.367 304.99 385.303 304.971 385.249 304.931 cv
385.249 304.931 385.249 304.931 385.248 304.93 cv
385.113 304.831 385.083 304.64 385.183 304.504 cv
385.662 303.848 386.118 303.18 386.552 302.503 cv
386.61 302.411 386.709 302.362 386.81 302.362 cv
386.866 302.362 386.923 302.377 386.973 302.409 cv
386.974 302.409 386.974 302.41 386.974 302.41 cv
387.116 302.501 387.158 302.69 387.067 302.832 cv
386.627 303.521 386.163 304.198 385.676 304.865 cv
385.616 304.947 385.524 304.99 385.429 304.99 cv
388.062 300.875 mo
388.012 300.875 387.961 300.862 387.914 300.836 cv
387.913 300.836 387.913 300.836 387.913 300.836 cv
387.766 300.753 387.713 300.568 387.795 300.42 cv
388.189 299.711 388.56 298.992 388.907 298.265 cv
388.959 298.155 389.069 298.091 389.183 298.091 cv
389.227 298.091 389.271 298.1 389.314 298.12 cv
389.314 298.12 389.314 298.12 389.314 298.121 cv
389.467 298.193 389.531 298.376 389.459 298.528 cv
389.106 299.267 388.73 299.997 388.33 300.717 cv
388.274 300.818 388.169 300.875 388.062 300.875 cv
390.166 296.465 mo
390.128 296.465 390.09 296.458 390.052 296.442 cv
390.052 296.442 390.052 296.442 390.051 296.442 cv
389.895 296.379 389.82 296.201 389.883 296.044 cv
390.186 295.293 390.465 294.534 390.72 293.768 cv
390.763 293.64 390.882 293.559 391.01 293.559 cv
391.042 293.559 391.074 293.564 391.106 293.574 cv
391.106 293.574 391.107 293.574 391.107 293.574 cv
391.267 293.628 391.354 293.801 391.3 293.961 cv
391.042 294.739 390.758 295.51 390.45 296.273 cv
390.402 296.392 390.288 296.465 390.166 296.465 cv
391.711 291.828 mo
391.685 291.828 391.659 291.825 391.632 291.818 cv
391.632 291.818 391.632 291.818 391.631 291.817 cv
391.469 291.774 391.372 291.607 391.415 291.444 cv
391.623 290.661 391.807 289.873 391.966 289.081 cv
391.995 288.936 392.123 288.835 392.266 288.835 cv
392.285 288.835 392.305 288.837 392.325 288.841 cv
392.325 288.841 392.326 288.841 392.326 288.841 cv
392.492 288.875 392.599 289.036 392.566 289.201 cv
392.404 290.006 392.218 290.806 392.006 291.601 cv
391.97 291.738 391.846 291.828 391.711 291.828 cv
.675044 .404639 .58233 .17612 cmyk
f
437.267 295.069 mo
437.852 295.654 438.415 296.252 438.956 296.863 cv
439.068 296.989 439.056 297.183 438.93 297.295 cv
438.803 297.406 438.61 297.395 438.498 297.268 cv
437.965 296.667 437.411 296.077 436.835 295.501 cv
436.716 295.382 436.716 295.188 436.835 295.069 cv
436.954 294.95 437.148 294.95 437.267 295.069 cv
440.534 298.758 mo
441.042 299.409 441.528 300.072 441.991 300.746 cv
442.087 300.885 442.052 301.076 441.913 301.171 cv
441.773 301.267 441.583 301.231 441.487 301.092 cv
441.031 300.428 440.553 299.775 440.052 299.135 cv
439.948 299.002 439.971 298.809 440.104 298.705 cv
440.237 298.601 440.429 298.625 440.533 298.758 cv
440.534 298.758 li
443.324 302.82 mo
443.748 303.528 444.148 304.246 444.525 304.973 cv
444.603 305.123 444.544 305.308 444.394 305.385 cv
444.244 305.463 444.06 305.405 443.982 305.255 cv
443.611 304.539 443.217 303.832 442.799 303.135 cv
442.712 302.99 442.759 302.802 442.904 302.715 cv
443.049 302.629 443.237 302.676 443.324 302.82 cv
445.59 307.196 mo
445.923 307.95 446.232 308.712 446.516 309.481 cv
446.574 309.639 446.493 309.815 446.335 309.874 cv
446.177 309.932 446.001 309.851 445.942 309.693 cv
445.663 308.936 445.359 308.186 445.031 307.444 cv
444.963 307.289 445.033 307.108 445.187 307.04 cv
445.342 306.972 445.522 307.042 445.59 307.196 cv
447.298 311.818 mo
447.535 312.607 447.748 313.401 447.935 314.199 cv
447.974 314.364 447.872 314.528 447.707 314.567 cv
447.543 314.605 447.378 314.504 447.34 314.339 cv
447.155 313.553 446.946 312.771 446.713 311.994 cv
446.664 311.833 446.756 311.662 446.917 311.614 cv
447.079 311.565 447.25 311.657 447.298 311.818 cv
448.424 316.615 mo
448.563 317.425 448.676 318.239 448.764 319.056 cv
448.783 319.223 448.661 319.374 448.493 319.392 cv
448.326 319.411 448.175 319.289 448.157 319.121 cv
448.069 318.318 447.958 317.516 447.822 316.718 cv
447.793 316.551 447.905 316.393 448.071 316.365 cv
448.238 316.337 448.396 316.449 448.424 316.615 cv
448.954 321.512 mo
448.984 322.138 448.998 322.764 448.998 323.39 cv
448.998 323.585 448.997 323.781 448.994 323.976 cv
448.991 324.145 448.853 324.28 448.684 324.278 cv
448.515 324.275 448.38 324.136 448.382 323.967 cv
448.385 323.775 448.387 323.583 448.387 323.39 cv
448.387 322.773 448.372 322.157 448.344 321.541 cv
448.336 321.372 448.466 321.229 448.635 321.221 cv
448.803 321.214 448.946 321.344 448.954 321.512 cv
448.883 326.438 mo
448.821 327.256 448.734 328.074 448.621 328.888 cv
448.598 329.055 448.444 329.172 448.277 329.149 cv
448.109 329.126 447.993 328.972 448.016 328.804 cv
448.126 328.002 448.212 327.198 448.273 326.392 cv
448.286 326.223 448.433 326.097 448.601 326.11 cv
448.769 326.122 448.895 326.269 448.883 326.438 cv
448.21 331.317 mo
448.049 332.121 447.862 332.922 447.651 333.716 cv
447.607 333.88 447.44 333.977 447.277 333.933 cv
447.114 333.89 447.016 333.723 447.06 333.559 cv
447.268 332.777 447.452 331.988 447.611 331.197 cv
447.644 331.031 447.805 330.924 447.971 330.957 cv
448.136 330.99 448.244 331.152 448.21 331.317 cv
446.945 336.077 mo
446.686 336.854 446.403 337.625 446.095 338.389 cv
446.032 338.546 445.853 338.621 445.697 338.558 cv
445.54 338.495 445.465 338.317 445.528 338.16 cv
445.831 337.408 446.11 336.649 446.365 335.884 cv
446.418 335.723 446.591 335.637 446.752 335.69 cv
446.912 335.743 446.998 335.917 446.945 336.077 cv
445.103 340.644 mo
444.751 341.383 444.375 342.113 443.974 342.833 cv
443.892 342.981 443.706 343.034 443.558 342.952 cv
443.411 342.87 443.358 342.684 443.44 342.536 cv
443.834 341.827 444.204 341.108 444.551 340.381 cv
444.624 340.228 444.807 340.164 444.959 340.236 cv
445.111 340.309 445.176 340.492 445.103 340.644 cv
442.712 344.948 mo
442.271 345.636 441.808 346.314 441.321 346.98 cv
441.221 347.117 441.03 347.146 440.894 347.047 cv
440.757 346.947 440.728 346.756 440.827 346.62 cv
441.306 345.964 441.763 345.296 442.196 344.618 cv
442.288 344.476 442.477 344.434 442.619 344.525 cv
442.761 344.617 442.803 344.806 442.712 344.948 cv
442.712 344.948 li
439.807 348.924 mo
439.286 349.552 438.743 350.168 438.178 350.771 cv
438.062 350.894 437.869 350.9 437.746 350.785 cv
437.622 350.669 437.616 350.476 437.732 350.353 cv
438.288 349.759 438.823 349.152 439.336 348.534 cv
439.444 348.404 439.637 348.386 439.767 348.494 cv
439.897 348.601 439.915 348.794 439.807 348.924 cv
439.807 348.924 li
436.439 352.516 mo
435.838 353.084 435.223 353.63 434.596 354.154 cv
434.467 354.263 434.274 354.245 434.166 354.116 cv
434.057 353.986 434.075 353.793 434.204 353.685 cv
434.822 353.169 435.427 352.632 436.019 352.072 cv
436.142 351.956 436.335 351.962 436.451 352.084 cv
436.567 352.207 436.562 352.4 436.439 352.516 cv
432.657 355.676 mo
431.992 356.166 431.315 356.633 430.627 357.076 cv
430.485 357.168 430.296 357.127 430.205 356.985 cv
430.113 356.843 430.154 356.654 430.296 356.563 cv
430.973 356.126 431.639 355.666 432.294 355.184 cv
432.43 355.084 432.622 355.113 432.722 355.249 cv
432.822 355.385 432.793 355.576 432.657 355.676 cv
428.515 358.348 mo
427.796 358.751 427.066 359.13 426.328 359.486 cv
426.176 359.559 425.993 359.495 425.92 359.343 cv
425.847 359.191 425.911 359.008 426.063 358.935 cv
426.789 358.585 427.508 358.211 428.216 357.814 cv
428.363 357.732 428.55 357.784 428.632 357.931 cv
428.715 358.079 428.662 358.265 428.515 358.348 cv
424.075 360.486 mo
423.312 360.797 422.542 361.083 421.765 361.345 cv
421.605 361.399 421.431 361.313 421.377 361.153 cv
421.323 360.993 421.409 360.819 421.569 360.765 cv
422.335 360.507 423.093 360.226 423.844 359.92 cv
424.001 359.856 424.179 359.931 424.243 360.087 cv
424.307 360.244 424.231 360.422 424.075 360.486 cv
419.406 362.059 mo
418.611 362.273 417.811 362.462 417.007 362.627 cv
416.842 362.661 416.681 362.554 416.647 362.389 cv
416.613 362.223 416.72 362.062 416.885 362.028 cv
417.677 361.866 418.464 361.68 419.247 361.469 cv
419.41 361.425 419.577 361.521 419.621 361.684 cv
419.665 361.847 419.569 362.015 419.406 362.059 cv
414.579 363.046 mo
413.765 363.161 412.948 363.251 412.129 363.316 cv
411.961 363.329 411.814 363.204 411.8 363.036 cv
411.787 362.867 411.913 362.72 412.081 362.707 cv
412.887 362.643 413.692 362.554 414.493 362.441 cv
414.661 362.417 414.815 362.534 414.839 362.701 cv
414.862 362.868 414.746 363.023 414.579 363.046 cv
409.668 363.436 mo
409.427 363.44 409.187 363.442 408.946 363.442 cv
408.365 363.442 407.785 363.429 407.204 363.404 cv
407.035 363.397 406.905 363.254 406.912 363.086 cv
406.919 362.917 407.062 362.786 407.231 362.793 cv
407.802 362.818 408.374 362.83 408.946 362.83 cv
409.183 362.83 409.42 362.828 409.657 362.824 cv
409.826 362.821 409.965 362.955 409.968 363.124 cv
409.971 363.293 409.837 363.432 409.668 363.436 cv
404.747 363.223 mo
403.931 363.137 403.116 363.026 402.305 362.891 cv
402.139 362.863 402.026 362.705 402.054 362.539 cv
402.082 362.372 402.24 362.26 402.406 362.288 cv
403.205 362.421 404.007 362.53 404.811 362.614 cv
404.979 362.632 405.1 362.782 405.083 362.95 cv
405.065 363.118 404.915 363.24 404.747 363.223 cv
399.889 362.41 mo
399.09 362.225 398.296 362.016 397.507 361.782 cv
397.345 361.734 397.253 361.563 397.301 361.401 cv
397.349 361.24 397.519 361.147 397.681 361.195 cv
398.458 361.426 399.24 361.632 400.027 361.814 cv
400.191 361.852 400.294 362.017 400.256 362.181 cv
400.218 362.346 400.054 362.448 399.889 362.41 cv
395.168 361.008 mo
394.399 360.726 393.636 360.421 392.882 360.091 cv
392.727 360.023 392.656 359.843 392.724 359.688 cv
392.792 359.533 392.972 359.463 393.127 359.531 cv
393.87 359.856 394.62 360.156 395.378 360.433 cv
395.536 360.491 395.618 360.667 395.56 360.825 cv
395.502 360.984 395.327 361.066 395.168 361.008 cv
395.168 361.008 li
390.656 359.034 mo
389.929 358.66 389.21 358.263 388.501 357.842 cv
388.356 357.756 388.308 357.568 388.395 357.423 cv
388.481 357.278 388.668 357.23 388.814 357.316 cv
389.511 357.731 390.219 358.122 390.936 358.49 cv
391.086 358.567 391.145 358.752 391.068 358.902 cv
390.991 359.052 390.807 359.111 390.656 359.034 cv
386.424 356.518 mo
385.749 356.059 385.085 355.576 384.433 355.07 cv
384.3 354.966 384.275 354.774 384.379 354.641 cv
384.482 354.507 384.674 354.483 384.808 354.587 cv
385.45 355.085 386.104 355.56 386.768 356.013 cv
386.908 356.108 386.944 356.299 386.849 356.438 cv
386.754 356.578 386.564 356.614 386.424 356.518 cv
386.424 356.518 li
382.533 353.501 mo
381.92 352.962 381.32 352.401 380.733 351.819 cv
380.613 351.7 380.612 351.506 380.731 351.386 cv
380.85 351.266 381.044 351.266 381.164 351.384 cv
381.742 351.958 382.333 352.511 382.937 353.041 cv
383.064 353.153 383.076 353.346 382.965 353.473 cv
382.853 353.6 382.66 353.612 382.533 353.501 cv
379.038 350.031 mo
378.487 349.414 377.959 348.784 377.453 348.142 cv
377.348 348.009 377.371 347.817 377.504 347.712 cv
377.637 347.608 377.829 347.631 377.933 347.763 cv
378.431 348.396 378.952 349.016 379.494 349.624 cv
379.606 349.75 379.595 349.943 379.469 350.055 cv
379.343 350.168 379.15 350.157 379.038 350.031 cv
379.038 350.031 li
375.988 346.159 mo
375.517 345.48 375.07 344.79 374.647 344.09 cv
374.56 343.945 374.606 343.758 374.751 343.67 cv
374.895 343.583 375.083 343.629 375.17 343.774 cv
375.587 344.463 376.027 345.143 376.49 345.811 cv
376.586 345.95 376.552 346.14 376.413 346.236 cv
376.274 346.333 376.084 346.298 375.988 346.159 cv
373.438 341.942 mo
373.056 341.211 372.698 340.471 372.364 339.723 cv
372.295 339.568 372.364 339.388 372.519 339.319 cv
372.673 339.25 372.853 339.319 372.922 339.474 cv
373.251 340.21 373.604 340.939 373.98 341.658 cv
374.058 341.808 374 341.993 373.85 342.071 cv
373.701 342.149 373.516 342.091 373.438 341.942 cv
371.43 337.442 mo
371.141 336.67 370.878 335.892 370.638 335.107 cv
370.589 334.946 370.68 334.775 370.841 334.726 cv
371.003 334.677 371.174 334.767 371.223 334.929 cv
371.459 335.701 371.718 336.468 372.002 337.228 cv
372.062 337.386 371.981 337.562 371.823 337.621 cv
371.665 337.68 371.489 337.6 371.43 337.442 cv
369.992 332.729 mo
369.801 331.929 369.635 331.124 369.494 330.315 cv
369.465 330.149 369.576 329.99 369.743 329.961 cv
369.909 329.932 370.067 330.044 370.096 330.21 cv
370.236 331.006 370.399 331.799 370.587 332.587 cv
370.626 332.751 370.525 332.916 370.361 332.955 cv
370.197 332.994 370.032 332.893 369.992 332.729 cv
369.992 332.729 li
369.145 327.876 mo
369.053 327.059 368.987 326.24 368.945 325.42 cv
368.937 325.251 369.067 325.107 369.235 325.099 cv
369.404 325.09 369.548 325.22 369.556 325.389 cv
369.597 326.196 369.662 327.003 369.752 327.808 cv
369.771 327.975 369.65 328.127 369.483 328.145 cv
369.315 328.164 369.164 328.043 369.145 327.876 cv
368.897 322.956 mo
368.905 322.135 368.939 321.314 368.998 320.494 cv
369.011 320.326 369.157 320.199 369.325 320.211 cv
369.494 320.223 369.621 320.37 369.608 320.538 cv
369.55 321.345 369.517 322.154 369.508 322.962 cv
369.506 323.131 369.368 323.267 369.199 323.265 cv
369.03 323.263 368.895 323.125 368.897 322.956 cv
369.251 318.043 mo
369.36 317.23 369.494 316.419 369.653 315.612 cv
369.685 315.447 369.846 315.339 370.012 315.371 cv
370.177 315.404 370.285 315.565 370.252 315.73 cv
370.096 316.525 369.964 317.323 369.857 318.124 cv
369.834 318.292 369.68 318.409 369.513 318.387 cv
369.346 318.364 369.228 318.21 369.251 318.043 cv
370.203 313.211 mo
370.41 312.417 370.643 311.629 370.9 310.848 cv
370.952 310.687 371.125 310.6 371.286 310.653 cv
371.446 310.706 371.533 310.878 371.481 311.039 cv
371.227 311.809 370.999 312.584 370.794 313.365 cv
370.751 313.529 370.584 313.627 370.421 313.584 cv
370.258 313.541 370.16 313.374 370.203 313.211 cv
371.741 308.532 mo
372.044 307.771 372.372 307.018 372.724 306.274 cv
372.796 306.121 372.978 306.056 373.131 306.128 cv
373.284 306.2 373.349 306.382 373.277 306.535 cv
372.93 307.268 372.608 308.01 372.309 308.759 cv
372.246 308.916 372.069 308.992 371.912 308.929 cv
371.755 308.867 371.678 308.689 371.741 308.532 cv
373.845 304.08 mo
374.239 303.364 374.657 302.657 375.099 301.96 cv
375.19 301.818 375.378 301.776 375.521 301.866 cv
375.664 301.957 375.706 302.146 375.615 302.288 cv
375.181 302.974 374.769 303.67 374.38 304.375 cv
374.299 304.523 374.113 304.577 373.965 304.495 cv
373.817 304.414 373.763 304.228 373.845 304.08 cv
376.482 299.923 mo
376.961 299.262 377.463 298.612 377.988 297.974 cv
378.095 297.844 378.288 297.825 378.418 297.933 cv
378.548 298.04 378.567 298.232 378.46 298.363 cv
377.943 298.991 377.449 299.63 376.977 300.281 cv
376.878 300.418 376.687 300.449 376.55 300.35 cv
376.414 300.251 376.383 300.06 376.482 299.923 cv
379.611 296.12 mo
379.941 295.765 380.279 295.415 380.625 295.069 cv
380.862 294.832 381.102 294.598 381.343 294.368 cv
381.465 294.252 381.659 294.257 381.775 294.379 cv
381.892 294.501 381.887 294.695 381.765 294.811 cv
381.527 295.038 381.291 295.268 381.058 295.501 cv
380.717 295.842 380.384 296.187 380.058 296.537 cv
379.943 296.661 379.75 296.668 379.626 296.553 cv
379.503 296.438 379.496 296.244 379.611 296.121 cv
379.611 296.12 li
383.18 292.723 mo
383.812 292.191 384.457 291.681 385.113 291.194 cv
385.249 291.093 385.44 291.122 385.541 291.257 cv
385.642 291.393 385.613 291.584 385.478 291.685 cv
384.831 292.165 384.196 292.667 383.573 293.191 cv
383.444 293.3 383.251 293.283 383.143 293.154 cv
383.034 293.025 383.05 292.832 383.18 292.723 cv
387.137 289.786 mo
387.829 289.336 388.532 288.91 389.245 288.507 cv
389.392 288.424 389.578 288.476 389.661 288.623 cv
389.744 288.77 389.693 288.956 389.546 289.039 cv
388.844 289.436 388.152 289.856 387.471 290.299 cv
387.329 290.391 387.14 290.351 387.048 290.209 cv
386.956 290.068 386.996 289.879 387.137 289.786 cv
391.427 287.361 mo
392.169 287 392.919 286.664 393.676 286.352 cv
393.833 286.287 394.011 286.362 394.076 286.518 cv
394.14 286.674 394.066 286.853 393.909 286.917 cv
393.163 287.224 392.425 287.555 391.695 287.911 cv
391.543 287.984 391.36 287.921 391.286 287.769 cv
391.212 287.617 391.275 287.434 391.427 287.361 cv
395.984 285.484 mo
396.763 285.218 397.549 284.977 398.34 284.761 cv
398.503 284.716 398.671 284.812 398.715 284.975 cv
398.76 285.138 398.664 285.306 398.501 285.351 cv
397.722 285.564 396.948 285.801 396.181 286.063 cv
396.021 286.117 395.848 286.032 395.793 285.872 cv
395.738 285.713 395.824 285.539 395.984 285.484 cv
400.736 284.184 mo
401.541 284.016 402.351 283.873 403.163 283.755 cv
403.33 283.731 403.485 283.847 403.509 284.014 cv
403.534 284.181 403.418 284.336 403.251 284.36 cv
402.451 284.477 401.654 284.617 400.861 284.783 cv
400.695 284.817 400.534 284.711 400.499 284.546 cv
400.465 284.38 400.571 284.218 400.736 284.184 cv
405.611 283.476 mo
406.43 283.408 407.251 283.365 408.072 283.348 cv
408.241 283.344 408.381 283.478 408.385 283.647 cv
408.388 283.815 408.254 283.955 408.086 283.959 cv
407.277 283.976 406.469 284.019 405.662 284.086 cv
405.494 284.1 405.346 283.975 405.332 283.806 cv
405.318 283.638 405.443 283.49 405.611 283.476 cv
410.536 283.369 mo
411.357 283.402 412.176 283.459 412.994 283.542 cv
413.162 283.559 413.285 283.709 413.268 283.877 cv
413.251 284.045 413.101 284.167 412.933 284.15 cv
412.128 284.069 411.32 284.012 410.512 283.98 cv
410.343 283.974 410.212 283.832 410.219 283.663 cv
410.225 283.494 410.367 283.363 410.536 283.369 cv
415.437 283.865 mo
416.247 283.997 417.053 284.154 417.855 284.336 cv
418.02 284.374 418.123 284.537 418.086 284.702 cv
418.048 284.867 417.884 284.97 417.72 284.932 cv
416.93 284.753 416.136 284.598 415.338 284.468 cv
415.172 284.441 415.059 284.284 415.086 284.117 cv
415.113 283.95 415.27 283.837 415.437 283.865 cv
420.24 284.955 mo
421.026 285.186 421.807 285.441 422.581 285.72 cv
422.74 285.778 422.822 285.953 422.765 286.112 cv
422.708 286.271 422.532 286.353 422.374 286.296 cv
421.611 286.02 420.842 285.769 420.068 285.542 cv
419.906 285.495 419.813 285.325 419.86 285.163 cv
419.908 285.001 420.078 284.908 420.24 284.955 cv
424.871 286.629 mo
425.623 286.954 426.366 287.303 427.101 287.677 cv
427.251 287.753 427.311 287.937 427.234 288.088 cv
427.158 288.238 426.974 288.298 426.823 288.222 cv
426.1 287.854 425.368 287.51 424.629 287.19 cv
424.473 287.123 424.402 286.943 424.469 286.788 cv
424.536 286.633 424.716 286.561 424.871 286.629 cv
429.26 288.861 mo
429.965 289.276 430.659 289.714 431.342 290.176 cv
431.482 290.271 431.519 290.461 431.425 290.601 cv
431.33 290.741 431.14 290.777 431 290.683 cv
430.327 290.228 429.643 289.796 428.95 289.387 cv
428.804 289.302 428.756 289.115 428.842 288.969 cv
428.928 288.823 429.115 288.775 429.26 288.861 cv
433.339 291.617 mo
433.987 292.116 434.622 292.636 435.245 293.18 cv
435.372 293.29 435.385 293.484 435.274 293.611 cv
435.163 293.738 434.97 293.751 434.843 293.64 cv
434.23 293.105 433.604 292.593 432.966 292.102 cv
432.832 291.999 432.807 291.807 432.911 291.673 cv
433.013 291.539 433.205 291.514 433.339 291.617 cv
437.051 294.854 mo
437.267 295.069 li
437.387 295.188 437.387 295.382 437.267 295.501 cv
437.148 295.621 436.954 295.621 436.835 295.501 cv
436.622 295.29 li
436.502 295.171 436.5 294.978 436.619 294.858 cv
436.737 294.738 436.931 294.736 437.051 294.854 cv
0 0 0 1 cmyk
f
415.673 330.117 mo
402.22 330.117 li
402.22 316.664 li
415.673 316.664 li
415.673 330.117 li
.186038 0 .1467 0 cmyk
f
402.22 317.046 mo
415.673 317.046 li
415.673 330.498 li
402.22 330.498 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
GJZIJN+Helvetica*1 [7.3378 0 0 -7.3378 0 0 ]msf
405.684 325.836 mo
(Pi)
[4.89438 0 ]xsh
354.324 460.654 mo
354.32 460.488 354.184 460.355 354.018 460.355 cv
354.016 460.355 354.014 460.355 354.012 460.355 cv
353.776 460.359 353.538 460.362 353.302 460.362 cv
352.73 460.362 352.158 460.349 351.586 460.324 cv
351.581 460.324 351.577 460.324 351.572 460.324 cv
351.41 460.324 351.275 460.452 351.267 460.615 cv
350.657 460.584 350.047 460.539 349.438 460.48 cv
349.455 460.313 349.333 460.163 349.166 460.146 cv
348.362 460.061 347.56 459.952 346.762 459.819 cv
346.745 459.816 346.728 459.815 346.711 459.815 cv
346.565 459.815 346.436 459.92 346.41 460.068 cv
345.809 459.963 345.208 459.844 344.612 459.711 cv
344.649 459.547 344.546 459.383 344.382 459.345 cv
343.595 459.163 342.813 458.957 342.036 458.727 cv
342.007 458.718 341.978 458.714 341.949 458.714 cv
341.818 458.714 341.697 458.799 341.657 458.931 cv
341.072 458.753 340.493 458.561 339.916 458.355 cv
339.973 458.197 339.892 458.022 339.733 457.965 cv
338.976 457.688 338.225 457.387 337.482 457.062 cv
337.442 457.044 337.401 457.036 337.36 457.036 cv
337.242 457.036 337.13 457.104 337.08 457.218 cv
336.523 456.969 335.971 456.707 335.424 456.432 cv
335.5 456.282 335.441 456.098 335.291 456.021 cv
334.574 455.653 333.867 455.262 333.169 454.847 cv
333.12 454.818 333.066 454.804 333.013 454.804 cv
332.909 454.804 332.808 454.857 332.751 454.953 cv
332.229 454.638 331.714 454.31 331.205 453.968 cv
331.299 453.829 331.263 453.639 331.124 453.544 cv
330.459 453.091 329.805 452.616 329.163 452.118 cv
329.107 452.074 329.041 452.053 328.976 452.053 cv
328.885 452.053 328.795 452.094 328.735 452.171 cv
328.256 451.794 327.785 451.405 327.321 451.003 cv
327.431 450.876 327.419 450.683 327.292 450.572 cv
326.689 450.042 326.097 449.489 325.519 448.915 cv
325.459 448.856 325.382 448.827 325.304 448.827 cv
325.225 448.827 325.147 448.857 325.087 448.917 cv
324.654 448.48 324.234 448.038 323.825 447.586 cv
323.951 447.474 323.961 447.281 323.849 447.155 cv
323.307 446.547 322.787 445.927 322.289 445.295 cv
322.228 445.218 322.139 445.178 322.048 445.178 cv
321.982 445.178 321.916 445.199 321.86 445.243 cv
321.484 444.758 321.119 444.265 320.769 443.767 cv
320.907 443.671 320.941 443.481 320.846 443.342 cv
320.383 442.674 319.943 441.994 319.526 441.305 cv
319.468 441.21 319.367 441.157 319.264 441.157 cv
319.21 441.157 319.156 441.171 319.107 441.201 cv
318.793 440.673 318.493 440.14 318.206 439.602 cv
318.355 439.523 318.413 439.339 318.335 439.189 cv
317.959 438.47 317.606 437.741 317.278 437.005 cv
317.227 436.891 317.115 436.823 316.998 436.823 cv
316.957 436.823 316.915 436.832 316.875 436.85 cv
316.629 436.287 316.398 435.723 316.179 435.152 cv
316.337 435.092 316.417 434.917 316.358 434.759 cv
316.074 433.999 315.814 433.232 315.578 432.46 cv
315.538 432.328 315.417 432.243 315.286 432.243 cv
315.257 432.243 315.227 432.248 315.198 432.257 cv
315.024 431.67 314.863 431.079 314.717 430.486 cv
314.881 430.447 314.982 430.282 314.943 430.118 cv
314.754 429.33 314.591 428.537 314.452 427.741 cv
314.426 427.592 314.297 427.488 314.151 427.488 cv
314.134 427.488 314.116 427.489 314.099 427.492 cv
313.998 426.888 313.911 426.284 313.839 425.676 cv
314.006 425.657 314.126 425.506 314.108 425.339 cv
314.018 424.534 313.952 423.728 313.911 422.92 cv
313.903 422.756 313.768 422.629 313.606 422.629 cv
313.601 422.629 313.596 422.63 313.591 422.63 cv
313.565 422.018 313.553 421.408 313.555 420.796 cv
313.556 420.796 313.557 420.796 313.558 420.796 cv
313.725 420.796 313.862 420.661 313.863 420.493 cv
313.872 419.685 313.905 418.876 313.964 418.069 cv
313.976 417.901 313.85 417.755 313.682 417.742 cv
313.73 417.133 313.793 416.525 313.869 415.918 cv
313.883 415.92 313.896 415.921 313.909 415.921 cv
314.06 415.921 314.191 415.809 314.212 415.655 cv
314.319 414.854 314.451 414.056 314.608 413.262 cv
314.64 413.096 314.533 412.936 314.368 412.903 cv
314.49 412.305 314.627 411.707 314.777 411.115 cv
314.803 411.122 314.829 411.125 314.854 411.125 cv
314.99 411.125 315.114 411.034 315.15 410.896 cv
315.354 410.115 315.583 409.34 315.836 408.57 cv
315.889 408.41 315.802 408.237 315.642 408.184 cv
315.837 407.605 316.045 407.032 316.268 406.461 cv
316.305 406.475 316.343 406.482 316.38 406.482 cv
316.502 406.482 316.617 406.41 316.664 406.29 cv
316.963 405.541 317.286 404.799 317.632 404.066 cv
317.704 403.913 317.639 403.732 317.487 403.659 cv
317.752 403.11 318.03 402.566 318.321 402.027 cv
318.368 402.052 318.418 402.064 318.468 402.064 cv
318.575 402.064 318.68 402.007 318.736 401.906 cv
319.124 401.201 319.536 400.505 319.971 399.819 cv
320.061 399.677 320.019 399.488 319.877 399.398 cv
320.207 398.886 320.55 398.381 320.906 397.881 cv
320.96 397.92 321.023 397.939 321.084 397.939 cv
321.179 397.939 321.273 397.895 321.332 397.813 cv
321.804 397.161 322.299 396.522 322.815 395.894 cv
322.922 395.764 322.904 395.572 322.774 395.464 cv
323.164 394.997 323.567 394.537 323.982 394.084 cv
324.041 394.139 324.115 394.165 324.19 394.165 cv
324.272 394.165 324.353 394.133 324.414 394.068 cv
324.739 393.718 325.072 393.373 325.413 393.032 cv
325.646 392.799 325.882 392.569 326.12 392.342 cv
326.242 392.226 326.247 392.033 326.131 391.911 cv
326.58 391.49 327.036 391.082 327.499 390.686 cv
327.559 390.757 327.645 390.794 327.732 390.794 cv
327.801 390.794 327.871 390.77 327.929 390.722 cv
328.552 390.198 329.187 389.696 329.833 389.216 cv
329.968 389.116 329.997 388.925 329.897 388.789 cv
330.392 388.428 330.896 388.077 331.404 387.741 cv
331.462 387.831 331.56 387.88 331.66 387.88 cv
331.717 387.88 331.775 387.864 331.826 387.83 cv
332.508 387.387 333.2 386.967 333.901 386.57 cv
334.048 386.487 334.099 386.301 334.017 386.155 cv
334.554 385.857 335.095 385.573 335.642 385.301 cv
335.695 385.409 335.803 385.472 335.916 385.472 cv
335.961 385.472 336.007 385.462 336.05 385.441 cv
336.78 385.087 337.519 384.755 338.265 384.448 cv
338.421 384.384 338.495 384.206 338.431 384.05 cv
339 383.821 339.573 383.606 340.149 383.404 cv
340.192 383.531 340.311 383.61 340.438 383.61 cv
340.47 383.61 340.504 383.605 340.537 383.594 cv
341.304 383.332 342.077 383.095 342.857 382.882 cv
343.019 382.837 343.115 382.67 343.071 382.507 cv
343.663 382.35 344.257 382.207 344.855 382.078 cv
344.885 382.221 345.012 382.32 345.153 382.32 cv
345.174 382.32 345.195 382.318 345.216 382.313 cv
346.009 382.148 346.806 382.008 347.606 381.892 cv
347.773 381.867 347.888 381.713 347.865 381.546 cv
348.471 381.463 349.079 381.394 349.687 381.338 cv
349.701 381.498 349.835 381.618 349.992 381.618 cv
350 381.618 350.009 381.617 350.017 381.617 cv
350.824 381.55 351.632 381.508 352.441 381.49 cv
352.609 381.486 352.743 381.347 352.74 381.179 cv
352.927 381.176 353.114 381.175 353.301 381.175 cv
353.726 381.175 354.149 381.181 354.574 381.195 cv
354.568 381.363 354.699 381.505 354.867 381.512 cv
355.675 381.543 356.483 381.6 357.288 381.681 cv
357.298 381.682 357.309 381.683 357.319 381.683 cv
357.474 381.683 357.606 381.566 357.623 381.409 cv
358.23 381.475 358.837 381.555 359.441 381.649 cv
359.415 381.815 359.527 381.972 359.694 381.999 cv
360.491 382.129 361.285 382.284 362.075 382.463 cv
362.098 382.469 362.121 382.471 362.143 382.471 cv
362.282 382.471 362.408 382.375 362.441 382.234 cv
363.035 382.374 363.627 382.528 364.215 382.695 cv
364.168 382.857 364.261 383.026 364.423 383.073 cv
365.198 383.3 365.967 383.551 366.729 383.827 cv
366.763 383.839 366.798 383.845 366.833 383.845 cv
366.958 383.845 367.075 383.768 367.12 383.644 cv
367.692 383.856 368.261 384.081 368.824 384.32 cv
368.758 384.474 368.829 384.654 368.984 384.721 cv
369.005 384.73 369.025 384.739 369.046 384.748 cv
369.075 385.078 369.108 385.408 369.145 385.737 cv
369.162 385.893 369.295 386.009 369.448 386.009 cv
369.46 386.009 369.471 386.008 369.483 386.007 cv
369.483 386.007 369.483 386.007 369.483 386.007 cv
369.556 386.614 369.643 387.218 369.743 387.823 cv
369.743 387.823 369.743 387.823 369.743 387.823 cv
369.576 387.852 369.465 388.01 369.494 388.177 cv
369.635 388.985 369.801 389.79 369.992 390.59 cv
370.026 390.73 370.151 390.825 370.289 390.825 cv
370.313 390.825 370.337 390.822 370.361 390.816 cv
370.361 390.816 370.361 390.816 370.362 390.816 cv
370.508 391.409 370.668 392 370.842 392.587 cv
370.842 392.587 370.842 392.587 370.841 392.587 cv
370.68 392.636 370.589 392.807 370.638 392.969 cv
370.878 393.753 371.141 394.532 371.43 395.303 cv
371.476 395.426 371.592 395.502 371.716 395.502 cv
371.752 395.502 371.788 395.495 371.823 395.482 cv
371.823 395.482 371.824 395.482 371.824 395.482 cv
372.043 396.053 372.273 396.617 372.519 397.18 cv
372.519 397.18 372.519 397.18 372.519 397.18 cv
372.364 397.249 372.295 397.43 372.364 397.584 cv
372.698 398.332 373.056 399.072 373.438 399.803 cv
373.492 399.907 373.599 399.967 373.709 399.967 cv
373.757 399.967 373.805 399.956 373.85 399.932 cv
373.851 399.932 373.851 399.932 373.851 399.932 cv
374.138 400.47 374.438 401.003 374.751 401.531 cv
374.751 401.531 374.751 401.531 374.751 401.532 cv
374.606 401.619 374.56 401.807 374.647 401.951 cv
375.07 402.652 375.517 403.342 375.988 404.02 cv
375.988 404.021 li
376.047 404.106 376.142 404.152 376.239 404.152 cv
376.299 404.152 376.36 404.135 376.413 404.098 cv
376.413 404.098 376.413 404.098 376.414 404.097 cv
376.764 404.595 377.129 405.088 377.505 405.573 cv
377.504 405.573 377.504 405.574 377.504 405.574 cv
377.371 405.678 377.348 405.871 377.453 406.003 cv
377.959 406.645 378.487 407.275 379.038 407.892 cv
379.098 407.96 379.182 407.994 379.266 407.994 cv
379.338 407.994 379.411 407.969 379.469 407.917 cv
379.469 407.916 379.47 407.916 379.47 407.916 cv
379.879 408.368 380.298 408.81 380.732 409.247 cv
380.732 409.247 380.732 409.247 380.731 409.247 cv
380.612 409.367 380.613 409.561 380.733 409.68 cv
381.32 410.262 381.92 410.823 382.533 411.362 cv
382.533 411.362 li
382.591 411.413 382.663 411.438 382.735 411.438 cv
382.82 411.438 382.904 411.403 382.965 411.334 cv
382.965 411.334 382.965 411.334 382.965 411.333 cv
383.43 411.736 383.901 412.124 384.379 412.501 cv
384.379 412.502 384.379 412.502 384.379 412.502 cv
384.275 412.636 384.3 412.828 384.433 412.931 cv
385.085 413.437 385.749 413.92 386.424 414.38 cv
386.424 414.38 li
386.477 414.416 386.537 414.433 386.596 414.433 cv
386.694 414.433 386.79 414.386 386.849 414.299 cv
386.849 414.299 386.849 414.299 386.849 414.299 cv
387.359 414.64 387.874 414.968 388.395 415.283 cv
388.395 415.284 388.395 415.284 388.395 415.284 cv
388.308 415.429 388.356 415.617 388.501 415.703 cv
389.21 416.124 389.929 416.522 390.656 416.896 cv
390.701 416.918 390.749 416.929 390.796 416.929 cv
390.907 416.929 391.014 416.869 391.068 416.763 cv
391.068 416.763 391.068 416.763 391.068 416.762 cv
391.615 417.038 392.168 417.3 392.724 417.549 cv
392.724 417.549 392.724 417.549 392.724 417.55 cv
392.656 417.704 392.727 417.884 392.882 417.952 cv
392.901 417.961 392.92 417.969 392.939 417.977 cv
392.959 418.236 392.975 418.493 392.989 418.752 cv
392.821 418.761 392.691 418.904 392.699 419.072 cv
392.728 419.688 392.742 420.304 392.742 420.921 cv
392.742 421.114 392.741 421.306 392.738 421.498 cv
392.735 421.667 392.87 421.806 393.038 421.808 cv
393.025 422.42 392.997 423.03 392.955 423.641 cv
392.948 423.64 392.94 423.64 392.933 423.64 cv
392.774 423.64 392.641 423.762 392.628 423.922 cv
392.567 424.729 392.481 425.533 392.371 426.335 cv
392.348 426.502 392.464 426.656 392.631 426.68 cv
392.543 427.284 392.441 427.887 392.325 428.488 cv
392.305 428.484 392.285 428.482 392.266 428.482 cv
392.123 428.482 391.995 428.582 391.966 428.728 cv
391.807 429.52 391.623 430.308 391.415 431.09 cv
391.372 431.253 391.469 431.42 391.631 431.464 cv
391.47 432.053 391.295 432.639 391.106 433.221 cv
391.074 433.21 391.042 433.205 391.01 433.205 cv
390.882 433.205 390.763 433.286 390.72 433.415 cv
390.465 434.18 390.186 434.939 389.883 435.691 cv
389.82 435.848 389.895 436.025 390.051 436.089 cv
389.819 436.653 389.573 437.212 389.314 437.767 cv
389.271 437.747 389.227 437.737 389.183 437.737 cv
389.069 437.737 388.959 437.802 388.907 437.912 cv
388.56 438.639 388.189 439.358 387.795 440.067 cv
387.713 440.214 387.766 440.4 387.913 440.482 cv
387.613 441.013 387.3 441.537 386.973 442.056 cv
386.923 442.024 386.866 442.008 386.81 442.008 cv
386.709 442.008 386.61 442.058 386.552 442.149 cv
386.118 442.827 385.662 443.495 385.183 444.151 cv
385.083 444.287 385.113 444.478 385.248 444.577 cv
384.885 445.066 384.51 445.549 384.121 446.024 cv
384.064 445.977 383.996 445.954 383.927 445.954 cv
383.839 445.954 383.752 445.992 383.692 446.065 cv
383.179 446.683 382.644 447.29 382.087 447.884 cv
381.972 448.006 381.978 448.199 382.1 448.315 cv
381.873 448.554 381.642 448.791 381.407 449.026 cv
381.208 449.225 381.008 449.421 380.806 449.614 cv
380.746 449.551 380.665 449.519 380.584 449.519 cv
380.509 449.519 380.433 449.547 380.374 449.603 cv
379.782 450.163 379.177 450.7 378.56 451.216 cv
378.43 451.324 378.413 451.516 378.52 451.646 cv
378.046 452.036 377.564 452.414 377.076 452.779 cv
377.016 452.698 376.924 452.656 376.831 452.656 cv
376.768 452.656 376.704 452.675 376.65 452.715 cv
375.995 453.197 375.328 453.657 374.651 454.093 cv
374.51 454.185 374.469 454.373 374.559 454.515 cv
374.041 454.844 373.516 455.159 372.987 455.461 cv
372.931 455.362 372.827 455.306 372.721 455.306 cv
372.67 455.306 372.619 455.319 372.571 455.345 cv
371.863 455.742 371.145 456.116 370.418 456.466 cv
370.267 456.539 370.202 456.721 370.275 456.873 cv
369.72 457.134 369.161 457.382 368.598 457.617 cv
368.549 457.499 368.435 457.428 368.315 457.428 cv
368.277 457.428 368.238 457.435 368.2 457.451 cv
367.449 457.757 366.69 458.038 365.925 458.296 cv
365.765 458.35 365.679 458.523 365.732 458.682 cv
365.149 458.874 364.565 459.05 363.976 459.214 cv
363.939 459.078 363.816 458.989 363.682 458.989 cv
363.655 458.989 363.629 458.993 363.602 459 cv
362.82 459.211 362.032 459.397 361.24 459.559 cv
361.075 459.593 360.969 459.753 361.002 459.918 cv
360.401 460.036 359.798 460.14 359.194 460.23 cv
359.172 460.078 359.041 459.969 358.892 459.969 cv
358.878 459.969 358.863 459.97 358.849 459.972 cv
358.047 460.085 357.242 460.174 356.436 460.237 cv
356.269 460.251 356.143 460.397 356.156 460.565 cv
355.545 460.609 354.936 460.638 354.324 460.654 cv
346.575 414.195 mo
346.575 427.648 li
360.028 427.648 li
360.028 414.195 li
346.575 414.195 li
.0195315 .127962 0 0 cmyk
f
381.623 392.6 mo
382.207 393.185 382.77 393.783 383.311 394.394 cv
383.423 394.52 383.412 394.714 383.285 394.826 cv
383.159 394.938 382.966 394.926 382.854 394.799 cv
382.321 394.198 381.766 393.608 381.19 393.032 cv
381.071 392.913 381.071 392.719 381.19 392.6 cv
381.31 392.481 381.503 392.481 381.623 392.6 cv
384.889 396.289 mo
385.398 396.94 385.884 397.603 386.347 398.277 cv
386.442 398.416 386.407 398.607 386.268 398.702 cv
386.129 398.798 385.938 398.762 385.843 398.623 cv
385.387 397.959 384.908 397.307 384.407 396.666 cv
384.303 396.533 384.327 396.34 384.46 396.236 cv
384.593 396.132 384.785 396.156 384.889 396.289 cv
387.679 400.351 mo
388.103 401.059 388.504 401.777 388.88 402.504 cv
388.958 402.654 388.899 402.839 388.749 402.916 cv
388.599 402.994 388.415 402.936 388.337 402.786 cv
387.966 402.07 387.572 401.363 387.155 400.666 cv
387.068 400.521 387.115 400.333 387.26 400.246 cv
387.405 400.16 387.592 400.207 387.679 400.351 cv
389.946 404.727 mo
390.279 405.481 390.587 406.243 390.871 407.012 cv
390.93 407.17 390.849 407.346 390.69 407.405 cv
390.532 407.463 390.356 407.382 390.297 407.224 cv
390.018 406.467 389.714 405.717 389.386 404.974 cv
389.318 404.82 389.388 404.639 389.543 404.571 cv
389.697 404.503 389.877 404.573 389.946 404.727 cv
391.654 409.349 mo
391.891 410.138 392.103 410.932 392.29 411.73 cv
392.329 411.895 392.227 412.059 392.063 412.098 cv
391.898 412.136 391.734 412.034 391.695 411.87 cv
391.51 411.084 391.302 410.302 391.068 409.525 cv
391.019 409.364 391.111 409.193 391.273 409.145 cv
391.434 409.096 391.605 409.188 391.654 409.349 cv
392.78 414.146 mo
392.918 414.956 393.031 415.77 393.12 416.587 cv
393.138 416.755 393.017 416.905 392.849 416.924 cv
392.681 416.942 392.53 416.82 392.512 416.652 cv
392.425 415.849 392.313 415.047 392.177 414.249 cv
392.148 414.082 392.26 413.924 392.427 413.896 cv
392.593 413.867 392.751 413.979 392.78 414.146 cv
393.31 419.043 mo
393.339 419.669 393.354 420.295 393.354 420.921 cv
393.354 421.117 393.352 421.312 393.349 421.507 cv
393.347 421.676 393.208 421.811 393.039 421.808 cv
392.87 421.806 392.735 421.667 392.738 421.498 cv
392.741 421.306 392.742 421.114 392.742 420.921 cv
392.742 420.304 392.728 419.688 392.699 419.072 cv
392.691 418.903 392.821 418.76 392.99 418.752 cv
393.159 418.745 393.302 418.875 393.31 419.043 cv
393.238 423.969 mo
393.176 424.787 393.089 425.605 392.977 426.419 cv
392.954 426.586 392.799 426.703 392.632 426.68 cv
392.465 426.657 392.348 426.503 392.371 426.335 cv
392.481 425.533 392.567 424.729 392.628 423.922 cv
392.641 423.754 392.788 423.628 392.956 423.641 cv
393.125 423.654 393.251 423.8 393.238 423.969 cv
392.566 428.848 mo
392.404 429.652 392.218 430.452 392.006 431.247 cv
391.963 431.411 391.795 431.508 391.632 431.465 cv
391.469 431.421 391.372 431.254 391.415 431.09 cv
391.623 430.308 391.807 429.52 391.966 428.728 cv
391.999 428.562 392.161 428.455 392.326 428.488 cv
392.492 428.521 392.599 428.683 392.566 428.848 cv
391.3 433.608 mo
391.042 434.385 390.758 435.156 390.45 435.92 cv
390.387 436.076 390.209 436.152 390.052 436.089 cv
389.896 436.026 389.82 435.848 389.883 435.691 cv
390.186 434.939 390.465 434.18 390.72 433.415 cv
390.774 433.254 390.947 433.168 391.107 433.221 cv
391.267 433.275 391.354 433.448 391.3 433.608 cv
389.459 438.175 mo
389.106 438.914 388.73 439.644 388.33 440.364 cv
388.247 440.512 388.061 440.565 387.914 440.483 cv
387.766 440.401 387.713 440.215 387.795 440.067 cv
388.189 439.358 388.56 438.639 388.907 437.912 cv
388.98 437.759 389.162 437.695 389.314 437.767 cv
389.467 437.84 389.531 438.022 389.459 438.175 cv
387.067 442.479 mo
386.627 443.167 386.163 443.845 385.676 444.511 cv
385.577 444.647 385.385 444.677 385.249 444.578 cv
385.113 444.478 385.083 444.287 385.183 444.151 cv
385.662 443.495 386.118 442.827 386.552 442.149 cv
386.643 442.007 386.832 441.965 386.974 442.057 cv
387.116 442.147 387.158 442.337 387.067 442.479 cv
384.162 446.455 mo
383.641 447.083 383.098 447.699 382.533 448.302 cv
382.418 448.425 382.224 448.431 382.101 448.316 cv
381.978 448.2 381.972 448.007 382.087 447.884 cv
382.644 447.29 383.179 446.683 383.692 446.065 cv
383.799 445.935 383.992 445.917 384.122 446.025 cv
384.252 446.133 384.27 446.325 384.162 446.455 cv
380.794 450.047 mo
380.193 450.616 379.578 451.161 378.952 451.685 cv
378.822 451.793 378.629 451.776 378.521 451.647 cv
378.413 451.517 378.43 451.324 378.56 451.216 cv
379.177 450.7 379.782 450.163 380.374 449.603 cv
380.497 449.487 380.691 449.492 380.806 449.615 cv
380.922 449.738 380.917 449.931 380.794 450.047 cv
377.012 453.208 mo
376.347 453.697 375.67 454.164 374.983 454.607 cv
374.841 454.699 374.651 454.658 374.56 454.516 cv
374.468 454.374 374.509 454.185 374.651 454.093 cv
375.328 453.657 375.995 453.197 376.65 452.715 cv
376.786 452.615 376.977 452.644 377.077 452.78 cv
377.177 452.916 377.148 453.107 377.012 453.208 cv
372.87 455.879 mo
372.151 456.282 371.422 456.661 370.683 457.017 cv
370.531 457.09 370.349 457.026 370.275 456.874 cv
370.202 456.722 370.266 456.539 370.418 456.466 cv
371.145 456.116 371.863 455.742 372.571 455.345 cv
372.719 455.263 372.905 455.315 372.988 455.463 cv
373.07 455.61 373.018 455.796 372.87 455.879 cv
368.431 458.017 mo
367.668 458.328 366.897 458.614 366.12 458.876 cv
365.96 458.93 365.786 458.844 365.733 458.684 cv
365.679 458.524 365.765 458.35 365.925 458.296 cv
366.69 458.038 367.449 457.757 368.2 457.451 cv
368.356 457.387 368.534 457.462 368.598 457.618 cv
368.662 457.775 368.587 457.953 368.431 458.017 cv
363.761 459.59 mo
362.966 459.804 362.167 459.994 361.363 460.158 cv
361.197 460.192 361.036 460.085 361.002 459.92 cv
360.968 459.754 361.075 459.593 361.24 459.559 cv
362.032 459.397 362.82 459.211 363.602 459 cv
363.765 458.956 363.933 459.052 363.977 459.215 cv
364.021 459.378 363.924 459.546 363.761 459.59 cv
358.934 460.577 mo
358.12 460.692 357.303 460.782 356.485 460.847 cv
356.316 460.86 356.169 460.735 356.156 460.566 cv
356.142 460.398 356.268 460.251 356.436 460.237 cv
357.242 460.174 358.047 460.085 358.849 459.972 cv
359.016 459.948 359.171 460.065 359.194 460.232 cv
359.218 460.399 359.101 460.554 358.934 460.577 cv
354.023 460.967 mo
353.783 460.971 353.542 460.973 353.302 460.973 cv
352.721 460.973 352.14 460.961 351.56 460.935 cv
351.391 460.928 351.26 460.785 351.267 460.617 cv
351.275 460.448 351.417 460.317 351.586 460.324 cv
352.158 460.349 352.73 460.362 353.302 460.362 cv
353.538 460.362 353.776 460.359 354.012 460.355 cv
354.181 460.352 354.321 460.487 354.324 460.655 cv
354.327 460.824 354.192 460.964 354.023 460.967 cv
349.102 460.754 mo
348.286 460.668 347.472 460.558 346.661 460.422 cv
346.494 460.394 346.382 460.236 346.41 460.07 cv
346.438 459.903 346.595 459.791 346.762 459.819 cv
347.56 459.952 348.362 460.061 349.166 460.146 cv
349.334 460.163 349.456 460.314 349.438 460.481 cv
349.421 460.649 349.27 460.771 349.102 460.754 cv
344.245 459.941 mo
343.445 459.756 342.651 459.547 341.862 459.313 cv
341.7 459.265 341.608 459.094 341.656 458.933 cv
341.704 458.771 341.874 458.678 342.036 458.727 cv
342.813 458.957 343.595 459.163 344.382 459.345 cv
344.547 459.383 344.649 459.548 344.611 459.712 cv
344.573 459.877 344.409 459.979 344.245 459.941 cv
339.523 458.539 mo
338.754 458.257 337.991 457.952 337.237 457.622 cv
337.082 457.554 337.012 457.374 337.079 457.219 cv
337.147 457.065 337.327 456.994 337.482 457.062 cv
338.225 457.387 338.976 457.688 339.733 457.965 cv
339.892 458.022 339.974 458.198 339.916 458.357 cv
339.858 458.515 339.682 458.597 339.523 458.539 cv
339.523 458.539 li
335.012 456.565 mo
334.284 456.192 333.565 455.794 332.857 455.373 cv
332.711 455.287 332.664 455.099 332.75 454.954 cv
332.836 454.809 333.024 454.761 333.169 454.847 cv
333.867 455.262 334.574 455.653 335.291 456.021 cv
335.441 456.098 335.5 456.283 335.423 456.433 cv
335.346 456.583 335.162 456.642 335.012 456.565 cv
330.78 454.05 mo
330.104 453.59 329.44 453.107 328.788 452.601 cv
328.655 452.497 328.631 452.305 328.734 452.172 cv
328.838 452.038 329.03 452.014 329.163 452.118 cv
329.805 452.616 330.459 453.091 331.124 453.544 cv
331.263 453.639 331.299 453.83 331.204 453.969 cv
331.109 454.109 330.919 454.145 330.78 454.05 cv
326.889 451.032 mo
326.276 450.493 325.675 449.932 325.088 449.35 cv
324.969 449.231 324.968 449.037 325.087 448.917 cv
325.206 448.797 325.399 448.797 325.519 448.915 cv
326.097 449.489 326.689 450.042 327.292 450.572 cv
327.419 450.684 327.432 450.877 327.32 451.004 cv
327.209 451.13 327.015 451.143 326.889 451.032 cv
323.393 447.562 mo
322.842 446.945 322.314 446.315 321.808 445.673 cv
321.704 445.54 321.727 445.348 321.859 445.244 cv
321.992 445.139 322.184 445.162 322.289 445.295 cv
322.787 445.927 323.307 446.547 323.849 447.155 cv
323.961 447.281 323.951 447.474 323.825 447.586 cv
323.699 447.699 323.505 447.688 323.393 447.562 cv
323.393 447.562 li
320.343 443.69 mo
319.873 443.012 319.426 442.321 319.003 441.621 cv
318.915 441.477 318.961 441.289 319.106 441.201 cv
319.25 441.114 319.438 441.16 319.526 441.305 cv
319.943 441.994 320.383 442.674 320.846 443.342 cv
320.942 443.481 320.907 443.671 320.768 443.768 cv
320.629 443.864 320.439 443.829 320.343 443.69 cv
317.793 439.473 mo
317.411 438.742 317.053 438.002 316.719 437.254 cv
316.65 437.1 316.72 436.919 316.874 436.85 cv
317.028 436.781 317.209 436.85 317.278 437.005 cv
317.606 437.741 317.959 438.47 318.335 439.189 cv
318.413 439.339 318.355 439.524 318.206 439.602 cv
318.056 439.68 317.871 439.622 317.793 439.473 cv
315.785 434.973 mo
315.497 434.201 315.233 433.423 314.994 432.638 cv
314.944 432.477 315.035 432.306 315.197 432.257 cv
315.358 432.207 315.529 432.298 315.578 432.46 cv
315.814 433.232 316.074 433.999 316.358 434.759 cv
316.417 434.917 316.337 435.093 316.179 435.152 cv
316.02 435.211 315.844 435.131 315.785 434.973 cv
314.348 430.26 mo
314.157 429.46 313.991 428.655 313.849 427.846 cv
313.82 427.68 313.932 427.521 314.098 427.492 cv
314.264 427.463 314.423 427.575 314.452 427.741 cv
314.591 428.537 314.754 429.33 314.943 430.118 cv
314.982 430.282 314.88 430.447 314.716 430.486 cv
314.552 430.526 314.387 430.424 314.348 430.26 cv
313.5 425.407 mo
313.408 424.59 313.342 423.771 313.301 422.951 cv
313.292 422.782 313.422 422.638 313.591 422.63 cv
313.759 422.621 313.903 422.751 313.911 422.92 cv
313.952 423.728 314.018 424.534 314.108 425.339 cv
314.126 425.507 314.006 425.658 313.838 425.676 cv
313.67 425.695 313.519 425.574 313.5 425.407 cv
313.252 420.487 mo
313.261 419.666 313.295 418.845 313.354 418.025 cv
313.366 417.857 313.512 417.73 313.681 417.742 cv
313.849 417.754 313.976 417.901 313.964 418.069 cv
313.905 418.876 313.872 419.685 313.863 420.493 cv
313.862 420.662 313.723 420.798 313.554 420.796 cv
313.385 420.794 313.25 420.656 313.252 420.487 cv
313.606 415.574 mo
313.715 414.761 313.849 413.95 314.008 413.143 cv
314.04 412.978 314.201 412.87 314.367 412.902 cv
314.532 412.935 314.64 413.096 314.608 413.262 cv
314.451 414.056 314.319 414.854 314.212 415.655 cv
314.19 415.823 314.036 415.94 313.869 415.918 cv
313.701 415.895 313.584 415.741 313.606 415.574 cv
314.558 410.742 mo
314.766 409.948 314.998 409.16 315.255 408.379 cv
315.308 408.218 315.48 408.131 315.641 408.184 cv
315.801 408.237 315.889 408.409 315.836 408.57 cv
315.583 409.34 315.354 410.115 315.15 410.896 cv
315.107 411.06 314.94 411.158 314.776 411.115 cv
314.613 411.072 314.515 410.905 314.558 410.742 cv
316.096 406.063 mo
316.4 405.303 316.727 404.549 317.079 403.805 cv
317.151 403.652 317.334 403.587 317.486 403.659 cv
317.639 403.731 317.704 403.913 317.632 404.066 cv
317.286 404.799 316.963 405.541 316.664 406.29 cv
316.602 406.447 316.424 406.523 316.267 406.461 cv
316.11 406.398 316.034 406.22 316.096 406.063 cv
318.2 401.611 mo
318.595 400.895 319.013 400.188 319.454 399.492 cv
319.545 399.349 319.734 399.307 319.876 399.397 cv
320.019 399.488 320.061 399.677 319.971 399.819 cv
319.536 400.505 319.124 401.201 318.736 401.906 cv
318.654 402.054 318.468 402.108 318.32 402.026 cv
318.172 401.945 318.119 401.759 318.2 401.611 cv
320.837 397.454 mo
321.317 396.793 321.818 396.143 322.343 395.505 cv
322.45 395.375 322.643 395.356 322.773 395.464 cv
322.904 395.571 322.922 395.763 322.815 395.894 cv
322.299 396.522 321.804 397.161 321.332 397.813 cv
321.233 397.949 321.042 397.98 320.905 397.881 cv
320.769 397.782 320.738 397.591 320.837 397.454 cv
323.966 393.651 mo
324.296 393.296 324.635 392.946 324.981 392.6 cv
325.218 392.363 325.457 392.129 325.698 391.9 cv
325.821 391.783 326.014 391.788 326.131 391.91 cv
326.247 392.033 326.242 392.226 326.12 392.342 cv
325.882 392.569 325.646 392.799 325.413 393.032 cv
325.072 393.373 324.739 393.718 324.414 394.068 cv
324.298 394.192 324.105 394.199 323.981 394.084 cv
323.858 393.969 323.851 393.775 323.966 393.651 cv
327.535 390.255 mo
328.167 389.722 328.812 389.212 329.469 388.725 cv
329.604 388.624 329.796 388.653 329.896 388.788 cv
329.997 388.924 329.969 389.116 329.833 389.216 cv
329.187 389.696 328.552 390.198 327.929 390.722 cv
327.799 390.831 327.607 390.815 327.498 390.685 cv
327.389 390.556 327.406 390.363 327.535 390.255 cv
331.493 387.317 mo
332.185 386.867 332.888 386.441 333.6 386.038 cv
333.747 385.955 333.934 386.007 334.017 386.154 cv
334.1 386.301 334.048 386.487 333.901 386.57 cv
333.2 386.967 332.508 387.387 331.826 387.83 cv
331.685 387.922 331.495 387.882 331.403 387.74 cv
331.311 387.599 331.351 387.41 331.493 387.317 cv
335.783 384.892 mo
336.524 384.531 337.274 384.195 338.032 383.883 cv
338.188 383.819 338.367 383.893 338.431 384.049 cv
338.495 384.205 338.421 384.384 338.265 384.448 cv
337.519 384.755 336.78 385.087 336.05 385.441 cv
335.898 385.515 335.715 385.452 335.641 385.3 cv
335.568 385.148 335.631 384.966 335.783 384.892 cv
340.339 383.015 mo
341.118 382.749 341.904 382.508 342.695 382.292 cv
342.858 382.247 343.026 382.343 343.071 382.506 cv
343.115 382.669 343.019 382.837 342.857 382.882 cv
342.077 383.095 341.304 383.332 340.537 383.594 cv
340.377 383.648 340.203 383.563 340.148 383.403 cv
340.094 383.244 340.179 383.07 340.339 383.015 cv
345.091 381.715 mo
345.897 381.547 346.706 381.404 347.518 381.286 cv
347.685 381.262 347.84 381.378 347.865 381.545 cv
347.889 381.712 347.773 381.867 347.606 381.892 cv
346.806 382.008 346.009 382.148 345.216 382.313 cv
345.051 382.348 344.889 382.242 344.854 382.077 cv
344.82 381.911 344.926 381.749 345.091 381.715 cv
349.967 381.007 mo
350.786 380.939 351.606 380.896 352.428 380.879 cv
352.596 380.875 352.736 381.009 352.74 381.178 cv
352.743 381.346 352.61 381.486 352.441 381.49 cv
351.632 381.508 350.824 381.55 350.017 381.617 cv
349.849 381.631 349.701 381.506 349.687 381.337 cv
349.673 381.169 349.798 381.021 349.967 381.007 cv
354.892 380.901 mo
355.712 380.933 356.532 380.99 357.35 381.073 cv
357.518 381.09 357.64 381.24 357.623 381.408 cv
357.606 381.576 357.456 381.698 357.288 381.681 cv
356.483 381.6 355.675 381.543 354.867 381.512 cv
354.699 381.505 354.567 381.363 354.574 381.194 cv
354.581 381.025 354.723 380.894 354.892 380.901 cv
359.792 381.395 mo
360.602 381.528 361.408 381.685 362.21 381.867 cv
362.375 381.905 362.478 382.068 362.441 382.233 cv
362.403 382.398 362.24 382.501 362.075 382.463 cv
361.285 382.284 360.491 382.129 359.694 381.999 cv
359.527 381.972 359.414 381.815 359.441 381.648 cv
359.468 381.481 359.625 381.368 359.792 381.395 cv
364.595 382.486 mo
365.382 382.717 366.162 382.972 366.937 383.251 cv
367.096 383.309 367.178 383.484 367.12 383.643 cv
367.063 383.802 366.888 383.884 366.729 383.827 cv
365.967 383.551 365.198 383.3 364.423 383.073 cv
364.261 383.026 364.168 382.856 364.216 382.694 cv
364.263 382.532 364.433 382.439 364.595 382.486 cv
369.227 384.16 mo
369.978 384.485 370.722 384.834 371.456 385.208 cv
371.606 385.284 371.666 385.468 371.59 385.619 cv
371.513 385.769 371.329 385.829 371.179 385.753 cv
370.456 385.385 369.724 385.041 368.984 384.721 cv
368.829 384.654 368.757 384.474 368.825 384.319 cv
368.892 384.164 369.072 384.093 369.227 384.16 cv
373.616 386.392 mo
374.32 386.807 375.014 387.245 375.698 387.707 cv
375.838 387.802 375.874 387.992 375.78 388.132 cv
375.685 388.271 375.495 388.308 375.355 388.214 cv
374.682 387.759 373.999 387.327 373.305 386.918 cv
373.16 386.833 373.111 386.645 373.197 386.5 cv
373.283 386.354 373.47 386.306 373.616 386.392 cv
377.695 389.148 mo
378.342 389.647 378.977 390.167 379.6 390.71 cv
379.727 390.821 379.74 391.015 379.63 391.142 cv
379.519 391.269 379.325 391.282 379.198 391.171 cv
378.585 390.636 377.959 390.124 377.321 389.633 cv
377.188 389.53 377.163 389.338 377.266 389.204 cv
377.369 389.07 377.561 389.045 377.695 389.148 cv
381.407 392.386 mo
381.623 392.6 li
381.742 392.719 381.742 392.913 381.623 393.032 cv
381.503 393.152 381.31 393.152 381.19 393.032 cv
380.977 392.821 li
380.857 392.703 380.856 392.509 380.974 392.389 cv
381.093 392.268 381.286 392.267 381.407 392.386 cv
0 0 0 1 cmyk
f
360.028 427.648 mo
346.575 427.648 li
346.575 414.195 li
360.028 414.195 li
360.028 427.648 li
.0322271 .195743 0 0 cmyk
f
346.575 414.271 mo
360.028 414.271 li
360.028 427.724 li
346.575 427.724 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
GJZIJN+Helvetica*1 [7.3378 0 0 -7.3378 0 0 ]msf
350.039 423.367 mo
(Pi)
[4.89438 0 ]xsh
409.968 420.985 mo
409.965 420.818 409.829 420.685 409.663 420.685 cv
409.661 420.685 409.659 420.685 409.657 420.686 cv
409.42 420.69 409.183 420.692 408.946 420.692 cv
408.374 420.692 407.802 420.679 407.231 420.655 cv
407.226 420.655 407.222 420.654 407.217 420.654 cv
407.055 420.654 406.92 420.782 406.912 420.946 cv
406.302 420.915 405.692 420.87 405.083 420.811 cv
405.1 420.643 404.978 420.493 404.811 420.476 cv
404.007 420.391 403.205 420.283 402.406 420.149 cv
402.389 420.146 402.372 420.145 402.356 420.145 cv
402.209 420.145 402.08 420.25 402.055 420.399 cv
401.454 420.294 400.853 420.175 400.256 420.042 cv
400.294 419.877 400.191 419.713 400.027 419.676 cv
399.24 419.494 398.458 419.288 397.681 419.057 cv
397.652 419.048 397.623 419.044 397.594 419.044 cv
397.462 419.044 397.341 419.13 397.301 419.262 cv
396.717 419.084 396.138 418.892 395.56 418.686 cv
395.618 418.528 395.536 418.353 395.378 418.295 cv
394.62 418.018 393.87 417.717 393.127 417.392 cv
393.087 417.374 393.045 417.366 393.004 417.366 cv
392.965 417.366 392.927 417.374 392.892 417.388 cv
392.878 417.233 392.863 417.078 392.848 416.924 cv
392.848 416.924 392.848 416.924 392.849 416.924 cv
393.017 416.905 393.138 416.755 393.12 416.587 cv
393.031 415.77 392.918 414.956 392.78 414.146 cv
392.754 413.997 392.625 413.891 392.479 413.891 cv
392.462 413.891 392.444 413.893 392.427 413.896 cv
392.426 413.896 392.426 413.896 392.426 413.896 cv
392.318 413.294 392.197 412.696 392.062 412.098 cv
392.062 412.098 392.062 412.098 392.063 412.098 cv
392.227 412.059 392.329 411.895 392.29 411.73 cv
392.103 410.932 391.891 410.138 391.654 409.349 cv
391.614 409.217 391.492 409.132 391.361 409.132 cv
391.332 409.132 391.302 409.136 391.273 409.145 cv
391.272 409.145 391.272 409.145 391.272 409.145 cv
391.091 408.562 390.897 407.981 390.689 407.405 cv
390.69 407.405 390.69 407.405 390.69 407.405 cv
390.849 407.346 390.93 407.17 390.871 407.012 cv
390.587 406.243 390.279 405.481 389.946 404.727 cv
389.895 404.613 389.783 404.545 389.666 404.545 cv
389.625 404.545 389.583 404.553 389.543 404.571 cv
389.542 404.571 389.542 404.572 389.541 404.572 cv
389.291 404.016 389.026 403.463 388.748 402.917 cv
388.749 402.917 388.749 402.917 388.749 402.916 cv
388.899 402.839 388.958 402.654 388.88 402.504 cv
388.504 401.777 388.103 401.059 387.679 400.351 cv
387.622 400.256 387.521 400.203 387.417 400.203 cv
387.363 400.203 387.309 400.217 387.26 400.246 cv
387.259 400.247 387.259 400.247 387.259 400.247 cv
386.941 399.727 386.61 399.211 386.267 398.703 cv
386.267 398.703 386.268 398.702 386.268 398.702 cv
386.407 398.607 386.442 398.416 386.347 398.277 cv
385.884 397.603 385.398 396.94 384.889 396.289 cv
384.828 396.212 384.739 396.171 384.648 396.171 cv
384.582 396.171 384.515 396.193 384.46 396.236 cv
384.459 396.236 384.459 396.237 384.459 396.237 cv
384.08 395.761 383.688 395.289 383.284 394.826 cv
383.285 394.826 383.285 394.826 383.285 394.826 cv
383.412 394.714 383.423 394.52 383.311 394.394 cv
382.77 393.783 382.207 393.185 381.623 392.6 cv
381.623 392.6 li
381.407 392.386 li
381.347 392.327 381.269 392.298 381.192 392.298 cv
381.113 392.298 381.034 392.328 380.974 392.389 cv
380.974 392.389 380.974 392.389 380.973 392.39 cv
380.533 391.962 380.084 391.546 379.629 391.143 cv
379.629 391.142 379.629 391.142 379.63 391.142 cv
379.74 391.015 379.727 390.821 379.6 390.71 cv
378.977 390.167 378.342 389.647 377.695 389.148 cv
377.639 389.106 377.573 389.085 377.508 389.085 cv
377.417 389.085 377.326 389.126 377.266 389.204 cv
377.266 389.204 377.265 389.205 377.265 389.205 cv
376.776 388.834 376.281 388.478 375.779 388.133 cv
375.78 388.132 375.78 388.132 375.78 388.132 cv
375.874 387.992 375.838 387.802 375.698 387.707 cv
375.014 387.245 374.32 386.807 373.616 386.392 cv
373.567 386.363 373.513 386.349 373.461 386.349 cv
373.356 386.349 373.254 386.403 373.197 386.5 cv
373.197 386.5 373.197 386.501 373.196 386.501 cv
372.666 386.194 372.13 385.9 371.589 385.62 cv
371.589 385.619 371.59 385.619 371.59 385.619 cv
371.666 385.468 371.606 385.284 371.456 385.208 cv
370.852 384.901 370.242 384.61 369.626 384.335 cv
369.598 383.974 369.574 383.612 369.556 383.25 cv
369.548 383.087 369.413 382.96 369.251 382.96 cv
369.246 382.96 369.241 382.96 369.236 382.96 cv
369.21 382.348 369.198 381.738 369.2 381.126 cv
369.201 381.126 369.201 381.126 369.202 381.126 cv
369.37 381.126 369.506 380.992 369.508 380.824 cv
369.517 380.015 369.55 379.206 369.608 378.399 cv
369.621 378.231 369.494 378.085 369.326 378.072 cv
369.375 377.463 369.437 376.855 369.514 376.248 cv
369.527 376.25 369.541 376.251 369.554 376.251 cv
369.705 376.251 369.836 376.139 369.857 375.985 cv
369.964 375.185 370.096 374.386 370.252 373.592 cv
370.285 373.426 370.178 373.266 370.012 373.233 cv
370.135 372.636 370.272 372.037 370.422 371.445 cv
370.448 371.452 370.473 371.455 370.499 371.455 cv
370.634 371.455 370.758 371.364 370.794 371.227 cv
370.999 370.446 371.227 369.67 371.481 368.9 cv
371.533 368.74 371.446 368.567 371.286 368.514 cv
371.482 367.935 371.69 367.362 371.913 366.791 cv
371.95 366.806 371.988 366.813 372.025 366.813 cv
372.146 366.813 372.261 366.74 372.309 366.62 cv
372.608 365.871 372.93 365.129 373.277 364.396 cv
373.349 364.244 373.284 364.062 373.132 363.989 cv
373.397 363.44 373.674 362.896 373.966 362.357 cv
374.012 362.383 374.063 362.395 374.112 362.395 cv
374.22 362.395 374.325 362.337 374.38 362.236 cv
374.769 361.531 375.181 360.835 375.615 360.149 cv
375.706 360.007 375.664 359.819 375.522 359.728 cv
375.852 359.216 376.195 358.711 376.551 358.212 cv
376.605 358.251 376.667 358.269 376.729 358.269 cv
376.824 358.269 376.917 358.225 376.977 358.143 cv
377.449 357.492 377.943 356.852 378.46 356.224 cv
378.567 356.094 378.548 355.902 378.419 355.794 cv
378.809 355.327 379.212 354.867 379.627 354.414 cv
379.686 354.469 379.76 354.496 379.834 354.496 cv
379.916 354.496 379.998 354.463 380.058 354.398 cv
380.384 354.048 380.717 353.703 381.058 353.363 cv
381.268 353.153 381.48 352.945 381.693 352.741 cv
381.971 352.999 382.251 353.252 382.533 353.501 cv
382.591 353.552 382.663 353.577 382.735 353.577 cv
382.82 353.577 382.904 353.541 382.965 353.473 cv
382.965 353.472 382.965 353.472 382.965 353.472 cv
383.43 353.874 383.901 354.263 384.379 354.64 cv
384.379 354.64 384.379 354.641 384.379 354.641 cv
384.275 354.774 384.3 354.966 384.433 355.07 cv
385.085 355.576 385.749 356.059 386.424 356.518 cv
386.424 356.518 li
386.477 356.554 386.537 356.572 386.596 356.572 cv
386.694 356.572 386.79 356.525 386.849 356.438 cv
386.849 356.438 386.849 356.438 386.849 356.437 cv
387.359 356.779 387.874 357.107 388.395 357.422 cv
388.395 357.422 388.395 357.423 388.395 357.423 cv
388.308 357.568 388.356 357.756 388.501 357.842 cv
389.21 358.263 389.929 358.66 390.656 359.034 cv
390.701 359.057 390.749 359.068 390.796 359.068 cv
390.907 359.068 391.014 359.007 391.068 358.902 cv
391.068 358.902 391.068 358.901 391.068 358.901 cv
391.615 359.176 392.168 359.439 392.724 359.687 cv
392.724 359.688 392.724 359.688 392.724 359.688 cv
392.656 359.843 392.727 360.023 392.882 360.091 cv
393.636 360.421 394.399 360.726 395.168 361.008 cv
395.168 361.008 li
395.203 361.02 395.238 361.026 395.273 361.026 cv
395.398 361.026 395.515 360.949 395.56 360.825 cv
395.56 360.825 395.56 360.825 395.56 360.825 cv
396.138 361.031 396.717 361.222 397.301 361.401 cv
397.301 361.401 397.301 361.401 397.301 361.401 cv
397.253 361.563 397.345 361.734 397.507 361.782 cv
398.296 362.016 399.09 362.225 399.889 362.41 cv
399.912 362.415 399.935 362.418 399.958 362.418 cv
400.097 362.418 400.223 362.322 400.256 362.181 cv
400.256 362.181 400.256 362.18 400.256 362.18 cv
400.853 362.313 401.454 362.433 402.055 362.538 cv
402.055 362.538 402.054 362.539 402.054 362.539 cv
402.026 362.705 402.139 362.863 402.305 362.891 cv
403.116 363.026 403.931 363.137 404.747 363.223 cv
404.758 363.224 404.769 363.224 404.779 363.224 cv
404.934 363.224 405.066 363.107 405.083 362.95 cv
405.083 362.95 405.083 362.95 405.083 362.95 cv
405.692 363.009 406.302 363.054 406.912 363.085 cv
406.912 363.085 406.912 363.085 406.912 363.086 cv
406.905 363.254 407.035 363.397 407.204 363.404 cv
407.785 363.429 408.365 363.442 408.946 363.442 cv
409.187 363.442 409.427 363.44 409.668 363.436 cv
409.837 363.432 409.971 363.293 409.968 363.124 cv
409.968 363.124 409.968 363.124 409.968 363.124 cv
410.58 363.108 411.19 363.078 411.8 363.035 cv
411.8 363.035 411.8 363.035 411.8 363.036 cv
411.813 363.196 411.947 363.317 412.105 363.317 cv
412.113 363.317 412.121 363.317 412.129 363.316 cv
412.948 363.251 413.765 363.161 414.579 363.046 cv
414.746 363.023 414.862 362.868 414.839 362.701 cv
414.839 362.701 414.839 362.7 414.839 362.7 cv
415.443 362.61 416.046 362.506 416.646 362.388 cv
416.647 362.388 416.647 362.388 416.647 362.389 cv
416.676 362.533 416.804 362.633 416.946 362.633 cv
416.966 362.633 416.987 362.631 417.007 362.627 cv
417.811 362.462 418.611 362.273 419.406 362.059 cv
419.569 362.015 419.665 361.847 419.621 361.684 cv
419.621 361.684 419.621 361.684 419.621 361.684 cv
420.21 361.52 420.794 361.343 421.377 361.152 cv
421.377 361.152 421.377 361.152 421.377 361.153 cv
421.42 361.28 421.539 361.361 421.667 361.361 cv
421.699 361.361 421.732 361.355 421.765 361.345 cv
422.542 361.083 423.312 360.797 424.075 360.486 cv
424.231 360.422 424.307 360.244 424.243 360.087 cv
424.243 360.087 424.243 360.087 424.243 360.087 cv
424.806 359.852 425.365 359.604 425.92 359.342 cv
425.92 359.342 425.92 359.343 425.92 359.343 cv
425.973 359.452 426.082 359.516 426.196 359.516 cv
426.24 359.516 426.285 359.506 426.328 359.486 cv
427.066 359.13 427.796 358.751 428.515 358.348 cv
428.662 358.265 428.715 358.079 428.632 357.931 cv
428.632 357.931 428.632 357.931 428.632 357.931 cv
429.161 357.628 429.686 357.313 430.204 356.984 cv
430.204 356.985 430.204 356.985 430.205 356.985 cv
430.263 357.076 430.361 357.125 430.462 357.125 cv
430.519 357.125 430.576 357.109 430.627 357.076 cv
431.315 356.633 431.992 356.166 432.657 355.676 cv
432.793 355.576 432.822 355.385 432.722 355.249 cv
432.722 355.249 432.721 355.248 432.721 355.248 cv
433.21 354.882 433.69 354.506 434.165 354.115 cv
434.165 354.115 434.165 354.115 434.166 354.116 cv
434.226 354.188 434.313 354.225 434.4 354.225 cv
434.469 354.225 434.539 354.202 434.596 354.154 cv
435.217 353.635 435.827 353.094 436.423 352.532 cv
436.488 352.594 436.553 352.657 436.618 352.72 cv
436.5 352.84 436.502 353.033 436.622 353.151 cv
436.829 353.357 li
436.831 353.359 436.833 353.361 436.835 353.363 cv
437.411 353.939 437.965 354.528 438.498 355.13 cv
438.559 355.198 438.643 355.233 438.727 355.233 cv
438.799 355.233 438.871 355.208 438.929 355.157 cv
439.332 355.619 439.725 356.091 440.103 356.567 cv
439.971 356.672 439.948 356.863 440.052 356.996 cv
440.553 357.637 441.031 358.29 441.487 358.954 cv
441.547 359.04 441.642 359.086 441.74 359.086 cv
441.799 359.086 441.859 359.069 441.912 359.033 cv
442.255 359.542 442.586 360.057 442.903 360.577 cv
442.759 360.664 442.713 360.852 442.799 360.996 cv
443.217 361.693 443.611 362.4 443.982 363.116 cv
444.036 363.221 444.143 363.281 444.254 363.281 cv
444.301 363.281 444.348 363.27 444.393 363.247 cv
444.671 363.793 444.935 364.346 445.186 364.902 cv
445.032 364.971 444.963 365.151 445.031 365.305 cv
445.359 366.047 445.663 366.797 445.942 367.554 cv
445.988 367.678 446.105 367.754 446.229 367.754 cv
446.264 367.754 446.299 367.748 446.334 367.735 cv
446.542 368.311 446.736 368.892 446.916 369.475 cv
446.755 369.524 446.664 369.694 446.713 369.856 cv
446.946 370.632 447.155 371.414 447.34 372.2 cv
447.373 372.341 447.499 372.436 447.637 372.436 cv
447.66 372.436 447.683 372.434 447.706 372.428 cv
447.842 373.026 447.963 373.624 448.07 374.226 cv
447.905 374.255 447.793 374.413 447.822 374.579 cv
447.958 375.377 448.069 376.179 448.157 376.983 cv
448.173 377.139 448.306 377.256 448.46 377.256 cv
448.471 377.256 448.482 377.255 448.492 377.254 cv
448.554 377.864 448.601 378.471 448.634 379.083 cv
448.466 379.091 448.336 379.234 448.344 379.402 cv
448.372 380.018 448.387 380.635 448.387 381.251 cv
448.387 381.444 448.385 381.636 448.382 381.829 cv
448.38 381.997 448.514 382.136 448.683 382.139 cv
448.669 382.751 448.642 383.36 448.6 383.971 cv
448.592 383.971 448.585 383.97 448.577 383.97 cv
448.419 383.97 448.285 384.092 448.273 384.253 cv
448.212 385.059 448.126 385.864 448.016 386.666 cv
447.993 386.833 448.109 386.987 448.276 387.01 cv
448.188 387.615 448.086 388.217 447.97 388.818 cv
447.95 388.814 447.93 388.812 447.91 388.812 cv
447.767 388.812 447.64 388.913 447.611 389.058 cv
447.452 389.85 447.268 390.638 447.06 391.421 cv
447.017 391.584 447.113 391.751 447.276 391.794 cv
447.115 392.383 446.939 392.969 446.75 393.551 cv
446.719 393.541 446.686 393.536 446.655 393.536 cv
446.527 393.536 446.407 393.617 446.365 393.745 cv
446.11 394.51 445.831 395.27 445.528 396.021 cv
445.465 396.178 445.54 396.356 445.696 396.419 cv
445.463 396.983 445.218 397.542 444.958 398.097 cv
444.916 398.077 444.871 398.068 444.827 398.068 cv
444.713 398.068 444.604 398.132 444.551 398.242 cv
444.204 398.969 443.834 399.688 443.44 400.397 cv
443.358 400.545 443.41 400.73 443.557 400.812 cv
443.257 401.343 442.944 401.867 442.618 402.386 cv
442.567 402.354 442.51 402.339 442.454 402.339 cv
442.354 402.339 442.255 402.388 442.196 402.48 cv
441.763 403.157 441.306 403.825 440.827 404.481 cv
440.728 404.617 440.757 404.808 440.893 404.907 cv
440.53 405.396 440.154 405.879 439.766 406.354 cv
439.709 406.308 439.64 406.285 439.572 406.285 cv
439.484 406.285 439.397 406.322 439.336 406.395 cv
438.823 407.014 438.288 407.62 437.732 408.214 cv
437.617 408.337 437.622 408.53 437.745 408.645 cv
437.517 408.885 437.286 409.121 437.051 409.356 cv
436.852 409.555 436.653 409.751 436.45 409.945 cv
436.39 409.882 436.31 409.85 436.229 409.85 cv
436.154 409.85 436.078 409.877 436.019 409.933 cv
435.427 410.493 434.822 411.031 434.204 411.546 cv
434.075 411.654 434.057 411.847 434.165 411.976 cv
433.69 412.367 433.21 412.744 432.721 413.11 cv
432.661 413.029 432.569 412.986 432.475 412.986 cv
432.412 412.986 432.349 413.005 432.294 413.045 cv
431.639 413.528 430.973 413.987 430.296 414.424 cv
430.154 414.515 430.113 414.704 430.204 414.846 cv
429.686 415.174 429.161 415.49 428.632 415.792 cv
428.576 415.692 428.472 415.636 428.365 415.636 cv
428.315 415.636 428.263 415.649 428.216 415.676 cv
427.508 416.073 426.789 416.446 426.063 416.796 cv
425.911 416.869 425.847 417.052 425.92 417.203 cv
425.365 417.465 424.806 417.713 424.243 417.948 cv
424.194 417.83 424.08 417.758 423.96 417.758 cv
423.921 417.758 423.882 417.766 423.844 417.781 cv
423.093 418.087 422.335 418.369 421.569 418.627 cv
421.41 418.68 421.324 418.853 421.377 419.013 cv
420.794 419.204 420.21 419.381 419.621 419.545 cv
419.584 419.409 419.461 419.319 419.326 419.319 cv
419.3 419.319 419.273 419.323 419.247 419.33 cv
418.464 419.541 417.677 419.727 416.885 419.889 cv
416.72 419.923 416.613 420.084 416.646 420.249 cv
416.046 420.367 415.443 420.471 414.839 420.561 cv
414.817 420.409 414.686 420.299 414.537 420.299 cv
414.522 420.299 414.508 420.3 414.493 420.302 cv
413.692 420.415 412.887 420.504 412.081 420.568 cv
411.913 420.581 411.788 420.728 411.8 420.896 cv
411.19 420.94 410.58 420.969 409.968 420.985 cv
402.22 374.525 mo
402.22 387.978 li
415.673 387.978 li
415.673 374.525 li
402.22 374.525 li
.0411994 .141604 .34464 0 cmyk
f
409.968 363.124 mo
409.965 362.957 409.829 362.824 409.663 362.824 cv
409.661 362.824 409.659 362.824 409.657 362.824 cv
409.42 362.828 409.183 362.83 408.946 362.83 cv
408.374 362.83 407.802 362.818 407.231 362.793 cv
407.226 362.793 407.222 362.793 407.217 362.793 cv
407.055 362.793 406.92 362.921 406.912 363.085 cv
406.302 363.054 405.692 363.009 405.083 362.95 cv
405.1 362.782 404.978 362.632 404.811 362.614 cv
404.007 362.53 403.205 362.421 402.406 362.288 cv
402.389 362.285 402.372 362.284 402.356 362.284 cv
402.209 362.284 402.08 362.389 402.055 362.538 cv
401.454 362.433 400.853 362.313 400.256 362.18 cv
400.294 362.016 400.191 361.852 400.027 361.814 cv
399.24 361.632 398.458 361.426 397.681 361.195 cv
397.652 361.187 397.623 361.183 397.594 361.183 cv
397.462 361.183 397.341 361.268 397.301 361.401 cv
396.717 361.222 396.138 361.031 395.56 360.825 cv
395.618 360.666 395.536 360.491 395.378 360.433 cv
394.62 360.156 393.87 359.856 393.127 359.531 cv
393.087 359.513 393.045 359.505 393.004 359.505 cv
392.887 359.505 392.775 359.573 392.724 359.687 cv
392.168 359.439 391.615 359.176 391.068 358.901 cv
391.145 358.751 391.086 358.567 390.936 358.49 cv
390.219 358.122 389.511 357.731 388.814 357.316 cv
388.765 357.287 388.711 357.273 388.658 357.273 cv
388.554 357.273 388.452 357.326 388.395 357.422 cv
387.874 357.107 387.359 356.779 386.849 356.437 cv
386.944 356.298 386.908 356.108 386.768 356.013 cv
386.104 355.56 385.45 355.085 384.808 354.587 cv
384.752 354.543 384.686 354.522 384.621 354.522 cv
384.53 354.522 384.44 354.563 384.379 354.64 cv
383.901 354.263 383.43 353.874 382.965 353.472 cv
383.076 353.345 383.064 353.152 382.937 353.041 cv
382.592 352.738 382.252 352.428 381.915 352.111 cv
382.318 351.737 382.729 351.371 383.143 351.016 cv
383.204 351.088 383.29 351.124 383.377 351.124 cv
383.446 351.124 383.516 351.101 383.573 351.052 cv
384.196 350.528 384.831 350.026 385.478 349.546 cv
385.613 349.446 385.642 349.255 385.542 349.119 cv
386.037 348.758 386.541 348.407 387.048 348.072 cv
387.107 348.161 387.205 348.21 387.304 348.21 cv
387.362 348.21 387.419 348.194 387.471 348.16 cv
388.152 347.717 388.844 347.297 389.546 346.901 cv
389.693 346.818 389.744 346.632 389.662 346.485 cv
390.199 346.187 390.739 345.903 391.286 345.631 cv
391.34 345.74 391.448 345.803 391.561 345.803 cv
391.606 345.803 391.652 345.793 391.695 345.772 cv
392.425 345.417 393.163 345.086 393.909 344.778 cv
394.065 344.714 394.14 344.536 394.076 344.38 cv
394.644 344.151 395.217 343.936 395.793 343.735 cv
395.837 343.861 395.955 343.941 396.082 343.941 cv
396.115 343.941 396.148 343.935 396.181 343.924 cv
396.948 343.662 397.722 343.425 398.501 343.212 cv
398.664 343.167 398.76 343 398.716 342.837 cv
399.308 342.68 399.902 342.537 400.499 342.408 cv
400.53 342.551 400.657 342.65 400.798 342.65 cv
400.819 342.65 400.84 342.648 400.861 342.644 cv
401.654 342.479 402.451 342.338 403.251 342.222 cv
403.418 342.198 403.533 342.043 403.509 341.876 cv
404.116 341.793 404.723 341.724 405.332 341.669 cv
405.346 341.828 405.479 341.948 405.636 341.948 cv
405.645 341.948 405.653 341.948 405.662 341.947 cv
406.469 341.88 407.277 341.838 408.086 341.82 cv
408.254 341.816 408.388 341.677 408.385 341.509 cv
408.572 341.506 408.759 341.505 408.946 341.505 cv
409.371 341.505 409.794 341.512 410.219 341.525 cv
410.212 341.694 410.344 341.835 410.512 341.842 cv
411.32 341.874 412.128 341.93 412.933 342.012 cv
412.943 342.013 412.953 342.013 412.964 342.013 cv
413.118 342.013 413.251 341.896 413.267 341.739 cv
413.874 341.805 414.482 341.885 415.086 341.979 cv
415.059 342.146 415.172 342.302 415.338 342.329 cv
416.136 342.46 416.93 342.614 417.72 342.794 cv
417.742 342.799 417.765 342.801 417.788 342.801 cv
417.927 342.801 418.053 342.705 418.085 342.564 cv
418.679 342.704 419.272 342.858 419.86 343.025 cv
419.813 343.187 419.906 343.356 420.068 343.404 cv
420.842 343.63 421.611 343.882 422.374 344.157 cv
422.408 344.169 422.443 344.175 422.478 344.175 cv
422.602 344.175 422.72 344.098 422.765 343.974 cv
423.337 344.186 423.905 344.411 424.469 344.65 cv
424.402 344.805 424.474 344.984 424.629 345.051 cv
425.368 345.371 426.1 345.715 426.823 346.083 cv
426.868 346.106 426.915 346.116 426.962 346.116 cv
427.073 346.116 427.18 346.055 427.234 345.95 cv
427.775 346.23 428.311 346.524 428.841 346.831 cv
428.756 346.976 428.805 347.163 428.95 347.249 cv
429.643 347.657 430.327 348.089 431 348.544 cv
431.053 348.579 431.112 348.596 431.171 348.596 cv
431.269 348.596 431.365 348.55 431.424 348.463 cv
431.926 348.808 432.421 349.165 432.91 349.535 cv
432.808 349.669 432.833 349.86 432.966 349.963 cv
433.604 350.454 434.23 350.966 434.843 351.502 cv
434.901 351.552 434.972 351.577 435.044 351.577 cv
435.129 351.577 435.213 351.542 435.273 351.473 cv
435.51 351.683 435.744 351.895 435.977 352.111 cv
435.398 352.657 434.807 353.181 434.204 353.685 cv
434.075 353.793 434.057 353.985 434.165 354.115 cv
433.69 354.506 433.21 354.882 432.721 355.248 cv
432.661 355.167 432.569 355.125 432.475 355.125 cv
432.412 355.125 432.349 355.144 432.294 355.184 cv
431.639 355.666 430.973 356.126 430.296 356.563 cv
430.154 356.654 430.113 356.842 430.204 356.984 cv
429.686 357.313 429.161 357.628 428.632 357.931 cv
428.576 357.831 428.472 357.775 428.365 357.775 cv
428.315 357.775 428.263 357.788 428.216 357.814 cv
427.508 358.211 426.789 358.585 426.063 358.935 cv
425.911 359.008 425.847 359.19 425.92 359.342 cv
425.365 359.604 424.806 359.852 424.243 360.087 cv
424.194 359.968 424.08 359.897 423.96 359.897 cv
423.921 359.897 423.882 359.904 423.844 359.92 cv
423.093 360.226 422.335 360.507 421.569 360.765 cv
421.41 360.819 421.324 360.992 421.377 361.152 cv
420.794 361.343 420.21 361.52 419.621 361.684 cv
419.584 361.547 419.461 361.458 419.326 361.458 cv
419.3 361.458 419.273 361.462 419.247 361.469 cv
418.464 361.68 417.677 361.866 416.885 362.028 cv
416.72 362.062 416.613 362.223 416.646 362.388 cv
416.046 362.506 415.443 362.61 414.839 362.7 cv
414.817 362.548 414.686 362.438 414.537 362.438 cv
414.522 362.438 414.508 362.439 414.493 362.441 cv
413.692 362.554 412.887 362.643 412.081 362.707 cv
411.913 362.72 411.788 362.867 411.8 363.035 cv
411.19 363.078 410.58 363.108 409.968 363.124 cv
.11429 .125338 .40354 0 cmyk
f
408.946 363.442 mo
408.365 363.442 407.785 363.429 407.204 363.404 cv
407.035 363.397 406.905 363.254 406.912 363.086 cv
406.912 363.085 406.912 363.085 406.912 363.085 cv
406.92 362.921 407.055 362.793 407.217 362.793 cv
407.222 362.793 407.226 362.793 407.231 362.793 cv
407.802 362.818 408.374 362.83 408.946 362.83 cv
409.183 362.83 409.42 362.828 409.657 362.824 cv
409.659 362.824 409.661 362.824 409.663 362.824 cv
409.829 362.824 409.965 362.957 409.968 363.124 cv
409.968 363.124 409.968 363.124 409.968 363.124 cv
409.971 363.293 409.837 363.432 409.668 363.436 cv
409.427 363.44 409.187 363.442 408.946 363.442 cv
412.105 363.317 mo
411.947 363.317 411.813 363.196 411.8 363.036 cv
411.8 363.035 411.8 363.035 411.8 363.035 cv
411.788 362.867 411.913 362.72 412.081 362.707 cv
412.887 362.643 413.692 362.554 414.493 362.441 cv
414.508 362.439 414.522 362.438 414.537 362.438 cv
414.686 362.438 414.817 362.548 414.839 362.7 cv
414.839 362.7 414.839 362.701 414.839 362.701 cv
414.862 362.868 414.746 363.023 414.579 363.046 cv
413.765 363.161 412.948 363.251 412.129 363.316 cv
412.121 363.317 412.113 363.317 412.105 363.317 cv
404.779 363.224 mo
404.769 363.224 404.758 363.224 404.747 363.223 cv
403.931 363.137 403.116 363.026 402.305 362.891 cv
402.139 362.863 402.026 362.705 402.054 362.539 cv
402.054 362.539 402.055 362.538 402.055 362.538 cv
402.08 362.389 402.209 362.284 402.356 362.284 cv
402.372 362.284 402.389 362.285 402.406 362.288 cv
403.205 362.421 404.007 362.53 404.811 362.614 cv
404.978 362.632 405.1 362.782 405.083 362.95 cv
405.083 362.95 405.083 362.95 405.083 362.95 cv
405.066 363.107 404.934 363.224 404.779 363.224 cv
416.946 362.633 mo
416.804 362.633 416.676 362.533 416.647 362.389 cv
416.647 362.388 416.647 362.388 416.646 362.388 cv
416.613 362.223 416.72 362.062 416.885 362.028 cv
417.677 361.866 418.464 361.68 419.247 361.469 cv
419.273 361.462 419.3 361.458 419.326 361.458 cv
419.461 361.458 419.584 361.547 419.621 361.684 cv
419.621 361.684 419.621 361.684 419.621 361.684 cv
419.665 361.847 419.569 362.015 419.406 362.059 cv
418.611 362.273 417.811 362.462 417.007 362.627 cv
416.987 362.631 416.966 362.633 416.946 362.633 cv
399.958 362.418 mo
399.935 362.418 399.912 362.415 399.889 362.41 cv
399.09 362.225 398.296 362.016 397.507 361.782 cv
397.345 361.734 397.253 361.563 397.301 361.401 cv
397.301 361.401 397.301 361.401 397.301 361.401 cv
397.341 361.268 397.462 361.183 397.594 361.183 cv
397.623 361.183 397.652 361.187 397.681 361.195 cv
398.458 361.426 399.24 361.632 400.027 361.814 cv
400.191 361.852 400.294 362.016 400.256 362.18 cv
400.256 362.18 400.256 362.181 400.256 362.181 cv
400.223 362.322 400.097 362.418 399.958 362.418 cv
421.667 361.361 mo
421.539 361.361 421.42 361.28 421.377 361.153 cv
421.377 361.152 421.377 361.152 421.377 361.152 cv
421.324 360.992 421.41 360.819 421.569 360.765 cv
422.335 360.507 423.093 360.226 423.844 359.92 cv
423.882 359.904 423.921 359.897 423.96 359.897 cv
424.08 359.897 424.194 359.968 424.243 360.087 cv
424.243 360.087 424.243 360.087 424.243 360.087 cv
424.307 360.244 424.231 360.422 424.075 360.486 cv
423.312 360.797 422.542 361.083 421.765 361.345 cv
421.732 361.355 421.699 361.361 421.667 361.361 cv
395.273 361.026 mo
395.238 361.026 395.203 361.02 395.168 361.008 cv
395.168 361.008 li
394.399 360.726 393.636 360.421 392.882 360.091 cv
392.727 360.023 392.656 359.843 392.724 359.688 cv
392.724 359.688 392.724 359.688 392.724 359.687 cv
392.775 359.573 392.887 359.505 393.004 359.505 cv
393.045 359.505 393.087 359.513 393.127 359.531 cv
393.87 359.856 394.62 360.156 395.378 360.433 cv
395.536 360.491 395.618 360.666 395.56 360.825 cv
395.56 360.825 395.56 360.825 395.56 360.825 cv
395.515 360.949 395.398 361.026 395.273 361.026 cv
426.196 359.516 mo
426.082 359.516 425.973 359.452 425.92 359.343 cv
425.92 359.343 425.92 359.342 425.92 359.342 cv
425.847 359.19 425.911 359.008 426.063 358.935 cv
426.789 358.585 427.508 358.211 428.216 357.814 cv
428.263 357.788 428.315 357.775 428.365 357.775 cv
428.472 357.775 428.576 357.831 428.632 357.931 cv
428.632 357.931 428.632 357.931 428.632 357.931 cv
428.715 358.079 428.662 358.265 428.515 358.348 cv
427.796 358.751 427.066 359.13 426.328 359.486 cv
426.285 359.506 426.24 359.516 426.196 359.516 cv
390.796 359.068 mo
390.749 359.068 390.701 359.057 390.656 359.034 cv
389.929 358.66 389.21 358.263 388.501 357.842 cv
388.356 357.756 388.308 357.568 388.395 357.423 cv
388.395 357.423 388.395 357.422 388.395 357.422 cv
388.452 357.326 388.554 357.273 388.658 357.273 cv
388.711 357.273 388.765 357.287 388.814 357.316 cv
389.511 357.731 390.219 358.122 390.936 358.49 cv
391.086 358.567 391.145 358.751 391.068 358.901 cv
391.068 358.901 391.068 358.902 391.068 358.902 cv
391.014 359.007 390.907 359.068 390.796 359.068 cv
430.462 357.125 mo
430.361 357.125 430.263 357.076 430.205 356.985 cv
430.204 356.985 430.204 356.985 430.204 356.984 cv
430.113 356.842 430.154 356.654 430.296 356.563 cv
430.973 356.126 431.639 355.666 432.294 355.184 cv
432.349 355.144 432.412 355.125 432.475 355.125 cv
432.569 355.125 432.661 355.167 432.721 355.248 cv
432.721 355.248 432.722 355.249 432.722 355.249 cv
432.822 355.385 432.793 355.576 432.657 355.676 cv
431.992 356.166 431.315 356.633 430.627 357.076 cv
430.576 357.109 430.519 357.125 430.462 357.125 cv
386.596 356.572 mo
386.537 356.572 386.477 356.554 386.424 356.518 cv
386.424 356.518 li
385.749 356.059 385.085 355.576 384.433 355.07 cv
384.3 354.966 384.275 354.774 384.379 354.641 cv
384.379 354.641 384.379 354.64 384.379 354.64 cv
384.44 354.563 384.53 354.522 384.621 354.522 cv
384.686 354.522 384.752 354.543 384.808 354.587 cv
385.45 355.085 386.104 355.56 386.768 356.013 cv
386.908 356.108 386.944 356.298 386.849 356.437 cv
386.849 356.438 386.849 356.438 386.849 356.438 cv
386.79 356.525 386.694 356.572 386.596 356.572 cv
434.4 354.225 mo
434.313 354.225 434.226 354.188 434.166 354.116 cv
434.165 354.115 434.165 354.115 434.165 354.115 cv
434.057 353.985 434.075 353.793 434.204 353.685 cv
434.807 353.181 435.398 352.657 435.977 352.111 cv
436.127 352.251 436.274 352.39 436.423 352.532 cv
435.827 353.094 435.217 353.635 434.596 354.154 cv
434.539 354.202 434.469 354.225 434.4 354.225 cv
382.735 353.577 mo
382.663 353.577 382.591 353.552 382.533 353.501 cv
382.251 353.252 381.971 352.999 381.693 352.741 cv
381.717 352.718 381.741 352.695 381.765 352.673 cv
381.887 352.557 381.892 352.363 381.776 352.241 cv
381.822 352.197 381.868 352.155 381.915 352.111 cv
382.252 352.428 382.592 352.738 382.937 353.041 cv
383.064 353.152 383.076 353.345 382.965 353.472 cv
382.965 353.472 382.965 353.472 382.965 353.473 cv
382.904 353.541 382.82 353.577 382.735 353.577 cv
.437232 .573266 1 .345098 cmyk
f
392.724 417.549 mo
392.168 417.3 391.615 417.038 391.068 416.762 cv
391.145 416.612 391.086 416.429 390.936 416.352 cv
390.219 415.984 389.511 415.592 388.814 415.178 cv
388.765 415.148 388.711 415.135 388.658 415.135 cv
388.554 415.135 388.452 415.188 388.395 415.283 cv
387.874 414.968 387.359 414.64 386.849 414.299 cv
386.944 414.159 386.908 413.97 386.768 413.875 cv
386.104 413.422 385.45 412.946 384.808 412.448 cv
384.752 412.405 384.686 412.384 384.621 412.384 cv
384.53 412.384 384.44 412.424 384.379 412.501 cv
383.901 412.124 383.43 411.736 382.965 411.333 cv
383.076 411.206 383.064 411.014 382.937 410.902 cv
382.333 410.372 381.742 409.82 381.164 409.246 cv
381.104 409.187 381.026 409.157 380.948 409.157 cv
380.87 409.157 380.792 409.187 380.732 409.247 cv
380.298 408.81 379.879 408.368 379.47 407.916 cv
379.595 407.803 379.606 407.611 379.494 407.485 cv
378.952 406.877 378.431 406.257 377.933 405.625 cv
377.873 405.548 377.783 405.508 377.693 405.508 cv
377.627 405.508 377.561 405.53 377.505 405.573 cv
377.129 405.088 376.764 404.595 376.414 404.097 cv
376.552 404.001 376.586 403.811 376.49 403.672 cv
376.027 403.004 375.587 402.324 375.17 401.635 cv
375.113 401.54 375.012 401.487 374.909 401.487 cv
374.855 401.487 374.801 401.501 374.751 401.531 cv
374.438 401.003 374.138 400.47 373.851 399.932 cv
374 399.853 374.058 399.669 373.98 399.52 cv
373.604 398.8 373.251 398.072 372.922 397.335 cv
372.872 397.221 372.76 397.154 372.643 397.154 cv
372.602 397.154 372.56 397.162 372.519 397.18 cv
372.273 396.617 372.043 396.053 371.824 395.482 cv
371.982 395.422 372.061 395.247 372.002 395.089 cv
371.718 394.329 371.459 393.563 371.223 392.79 cv
371.183 392.659 371.062 392.574 370.931 392.574 cv
370.902 392.574 370.872 392.578 370.842 392.587 cv
370.668 392 370.508 391.409 370.362 390.816 cv
370.525 390.777 370.626 390.612 370.587 390.448 cv
370.399 389.66 370.236 388.867 370.096 388.071 cv
370.07 387.923 369.941 387.818 369.796 387.818 cv
369.778 387.818 369.761 387.82 369.743 387.823 cv
369.643 387.218 369.556 386.614 369.483 386.007 cv
369.651 385.987 369.771 385.836 369.752 385.669 cv
369.729 385.457 369.707 385.245 369.686 385.033 cv
370.188 385.262 370.685 385.502 371.179 385.753 cv
371.223 385.775 371.27 385.786 371.317 385.786 cv
371.428 385.786 371.535 385.725 371.589 385.62 cv
372.13 385.9 372.666 386.194 373.196 386.501 cv
373.111 386.646 373.16 386.833 373.305 386.918 cv
373.999 387.327 374.682 387.759 375.355 388.214 cv
375.408 388.249 375.467 388.266 375.526 388.266 cv
375.624 388.266 375.72 388.219 375.779 388.133 cv
376.281 388.478 376.776 388.834 377.265 389.205 cv
377.163 389.339 377.188 389.53 377.321 389.633 cv
377.959 390.124 378.585 390.636 379.198 391.171 cv
379.256 391.222 379.328 391.247 379.399 391.247 cv
379.484 391.247 379.568 391.211 379.629 391.143 cv
380.084 391.546 380.533 391.962 380.973 392.39 cv
380.856 392.51 380.857 392.703 380.977 392.821 cv
381.19 393.032 li
381.19 393.032 li
381.766 393.608 382.321 394.198 382.854 394.799 cv
382.914 394.868 382.998 394.902 383.082 394.902 cv
383.154 394.902 383.226 394.877 383.284 394.826 cv
383.688 395.289 384.08 395.761 384.459 396.237 cv
384.326 396.341 384.303 396.533 384.407 396.666 cv
384.908 397.307 385.387 397.959 385.843 398.623 cv
385.902 398.71 385.998 398.756 386.095 398.756 cv
386.154 398.756 386.214 398.739 386.267 398.703 cv
386.61 399.211 386.941 399.727 387.259 400.247 cv
387.115 400.334 387.068 400.521 387.155 400.666 cv
387.572 401.363 387.966 402.07 388.337 402.786 cv
388.392 402.891 388.498 402.951 388.609 402.951 cv
388.656 402.951 388.704 402.94 388.748 402.917 cv
389.026 403.463 389.291 404.016 389.541 404.572 cv
389.388 404.64 389.318 404.82 389.386 404.974 cv
389.714 405.717 390.018 406.467 390.297 407.224 cv
390.343 407.347 390.46 407.424 390.584 407.424 cv
390.619 407.424 390.655 407.418 390.689 407.405 cv
390.897 407.981 391.091 408.562 391.272 409.145 cv
391.111 409.194 391.019 409.364 391.068 409.525 cv
391.302 410.302 391.51 411.084 391.695 411.87 cv
391.728 412.011 391.854 412.106 391.993 412.106 cv
392.015 412.106 392.038 412.103 392.062 412.098 cv
392.197 412.696 392.318 413.294 392.426 413.896 cv
392.26 413.925 392.148 414.083 392.177 414.249 cv
392.313 415.047 392.425 415.849 392.512 416.652 cv
392.529 416.809 392.661 416.925 392.815 416.925 cv
392.826 416.925 392.837 416.925 392.848 416.924 cv
392.863 417.078 392.878 417.233 392.892 417.388 cv
392.819 417.416 392.758 417.472 392.724 417.549 cv
.0511177 .212192 .35285 0 cmyk
f
392.815 416.925 mo
392.661 416.925 392.529 416.809 392.512 416.652 cv
392.425 415.849 392.313 415.047 392.177 414.249 cv
392.148 414.083 392.26 413.925 392.426 413.896 cv
392.426 413.896 392.426 413.896 392.427 413.896 cv
392.444 413.893 392.462 413.891 392.479 413.891 cv
392.625 413.891 392.754 413.997 392.78 414.146 cv
392.918 414.956 393.031 415.77 393.12 416.587 cv
393.138 416.755 393.017 416.905 392.849 416.924 cv
392.848 416.924 392.848 416.924 392.848 416.924 cv
392.837 416.925 392.826 416.925 392.815 416.925 cv
391.993 412.106 mo
391.854 412.106 391.728 412.011 391.695 411.87 cv
391.51 411.084 391.302 410.302 391.068 409.525 cv
391.019 409.364 391.111 409.194 391.272 409.145 cv
391.272 409.145 391.272 409.145 391.273 409.145 cv
391.302 409.136 391.332 409.132 391.361 409.132 cv
391.492 409.132 391.614 409.217 391.654 409.349 cv
391.891 410.138 392.103 410.932 392.29 411.73 cv
392.329 411.895 392.227 412.059 392.063 412.098 cv
392.062 412.098 392.062 412.098 392.062 412.098 cv
392.038 412.103 392.015 412.106 391.993 412.106 cv
390.584 407.424 mo
390.46 407.424 390.343 407.347 390.297 407.224 cv
390.018 406.467 389.714 405.717 389.386 404.974 cv
389.318 404.82 389.388 404.64 389.541 404.572 cv
389.542 404.572 389.542 404.571 389.543 404.571 cv
389.583 404.553 389.625 404.545 389.666 404.545 cv
389.783 404.545 389.895 404.613 389.946 404.727 cv
390.279 405.481 390.587 406.243 390.871 407.012 cv
390.93 407.17 390.849 407.346 390.69 407.405 cv
390.69 407.405 390.69 407.405 390.689 407.405 cv
390.655 407.418 390.619 407.424 390.584 407.424 cv
388.609 402.951 mo
388.498 402.951 388.392 402.891 388.337 402.786 cv
387.966 402.07 387.572 401.363 387.155 400.666 cv
387.068 400.521 387.115 400.334 387.259 400.247 cv
387.259 400.247 387.259 400.247 387.26 400.246 cv
387.309 400.217 387.363 400.203 387.417 400.203 cv
387.521 400.203 387.622 400.256 387.679 400.351 cv
388.103 401.059 388.504 401.777 388.88 402.504 cv
388.958 402.654 388.899 402.839 388.749 402.916 cv
388.749 402.917 388.749 402.917 388.748 402.917 cv
388.704 402.94 388.656 402.951 388.609 402.951 cv
386.095 398.756 mo
385.998 398.756 385.902 398.71 385.843 398.623 cv
385.387 397.959 384.908 397.307 384.407 396.666 cv
384.303 396.533 384.326 396.341 384.459 396.237 cv
384.459 396.237 384.459 396.236 384.46 396.236 cv
384.515 396.193 384.582 396.171 384.648 396.171 cv
384.739 396.171 384.828 396.212 384.889 396.289 cv
385.398 396.94 385.884 397.603 386.347 398.277 cv
386.442 398.416 386.407 398.607 386.268 398.702 cv
386.268 398.702 386.267 398.703 386.267 398.703 cv
386.214 398.739 386.154 398.756 386.095 398.756 cv
383.082 394.902 mo
382.998 394.902 382.914 394.868 382.854 394.799 cv
382.321 394.198 381.766 393.608 381.19 393.032 cv
381.19 393.032 li
380.977 392.821 li
380.857 392.703 380.856 392.51 380.973 392.39 cv
380.974 392.389 380.974 392.389 380.974 392.389 cv
381.034 392.328 381.113 392.298 381.192 392.298 cv
381.269 392.298 381.347 392.327 381.407 392.386 cv
381.623 392.6 li
381.623 392.6 li
382.207 393.185 382.77 393.783 383.311 394.394 cv
383.423 394.52 383.412 394.714 383.285 394.826 cv
383.285 394.826 383.285 394.826 383.284 394.826 cv
383.226 394.877 383.154 394.902 383.082 394.902 cv
379.399 391.247 mo
379.328 391.247 379.256 391.222 379.198 391.171 cv
378.585 390.636 377.959 390.124 377.321 389.633 cv
377.188 389.53 377.163 389.339 377.265 389.205 cv
377.265 389.205 377.266 389.204 377.266 389.204 cv
377.326 389.126 377.417 389.085 377.508 389.085 cv
377.573 389.085 377.639 389.106 377.695 389.148 cv
378.342 389.647 378.977 390.167 379.6 390.71 cv
379.727 390.821 379.74 391.015 379.63 391.142 cv
379.629 391.142 379.629 391.142 379.629 391.143 cv
379.568 391.211 379.484 391.247 379.399 391.247 cv
375.526 388.266 mo
375.467 388.266 375.408 388.249 375.355 388.214 cv
374.682 387.759 373.999 387.327 373.305 386.918 cv
373.16 386.833 373.111 386.646 373.196 386.501 cv
373.197 386.501 373.197 386.5 373.197 386.5 cv
373.254 386.403 373.356 386.349 373.461 386.349 cv
373.513 386.349 373.567 386.363 373.616 386.392 cv
374.32 386.807 375.014 387.245 375.698 387.707 cv
375.838 387.802 375.874 387.992 375.78 388.132 cv
375.78 388.132 375.78 388.132 375.779 388.133 cv
375.72 388.219 375.624 388.266 375.526 388.266 cv
371.317 385.786 mo
371.27 385.786 371.223 385.775 371.179 385.753 cv
370.685 385.502 370.188 385.262 369.686 385.033 cv
369.664 384.801 369.644 384.568 369.626 384.335 cv
370.242 384.61 370.852 384.901 371.456 385.208 cv
371.606 385.284 371.666 385.468 371.59 385.619 cv
371.59 385.619 371.589 385.619 371.589 385.62 cv
371.535 385.725 371.428 385.786 371.317 385.786 cv
.437232 .573266 1 .345098 cmyk
f
437.267 352.93 mo
437.852 353.515 438.415 354.113 438.956 354.724 cv
439.068 354.851 439.056 355.044 438.93 355.156 cv
438.803 355.268 438.61 355.256 438.498 355.13 cv
437.965 354.528 437.411 353.939 436.835 353.363 cv
436.716 353.243 436.716 353.049 436.835 352.93 cv
436.954 352.811 437.148 352.811 437.267 352.93 cv
440.534 356.619 mo
441.042 357.27 441.528 357.933 441.991 358.607 cv
442.087 358.746 442.052 358.937 441.913 359.033 cv
441.773 359.128 441.583 359.093 441.487 358.954 cv
441.031 358.29 440.553 357.637 440.052 356.996 cv
439.948 356.863 439.971 356.671 440.104 356.567 cv
440.237 356.463 440.429 356.486 440.533 356.619 cv
440.534 356.619 li
443.324 360.682 mo
443.748 361.389 444.148 362.108 444.525 362.835 cv
444.603 362.985 444.544 363.169 444.394 363.247 cv
444.244 363.324 444.06 363.266 443.982 363.116 cv
443.611 362.4 443.217 361.693 442.799 360.996 cv
442.712 360.851 442.759 360.663 442.904 360.577 cv
443.049 360.49 443.237 360.537 443.324 360.682 cv
445.59 365.058 mo
445.923 365.812 446.232 366.573 446.516 367.342 cv
446.574 367.501 446.493 367.677 446.335 367.735 cv
446.177 367.794 446.001 367.713 445.942 367.554 cv
445.663 366.797 445.359 366.047 445.031 365.305 cv
444.963 365.15 445.033 364.97 445.187 364.901 cv
445.342 364.833 445.522 364.903 445.59 365.058 cv
447.298 369.68 mo
447.535 370.468 447.748 371.262 447.935 372.061 cv
447.974 372.225 447.872 372.39 447.707 372.428 cv
447.543 372.467 447.378 372.365 447.34 372.2 cv
447.155 371.414 446.946 370.632 446.713 369.856 cv
446.664 369.694 446.756 369.524 446.917 369.475 cv
447.079 369.426 447.25 369.518 447.298 369.68 cv
447.298 369.68 li
448.424 374.476 mo
448.563 375.287 448.676 376.101 448.764 376.917 cv
448.783 377.085 448.661 377.236 448.493 377.254 cv
448.326 377.272 448.175 377.151 448.157 376.983 cv
448.069 376.179 447.958 375.377 447.822 374.579 cv
447.793 374.413 447.905 374.255 448.071 374.226 cv
448.238 374.198 448.396 374.31 448.424 374.476 cv
448.954 379.374 mo
448.984 379.999 448.998 380.625 448.998 381.251 cv
448.998 381.447 448.997 381.642 448.994 381.838 cv
448.991 382.006 448.853 382.141 448.684 382.139 cv
448.515 382.136 448.38 381.998 448.382 381.829 cv
448.385 381.636 448.387 381.444 448.387 381.251 cv
448.387 380.635 448.372 380.018 448.344 379.402 cv
448.336 379.234 448.466 379.09 448.635 379.083 cv
448.803 379.075 448.946 379.205 448.954 379.374 cv
448.883 384.299 mo
448.821 385.118 448.734 385.935 448.621 386.749 cv
448.598 386.916 448.444 387.033 448.277 387.01 cv
448.109 386.987 447.993 386.833 448.016 386.666 cv
448.126 385.864 448.212 385.059 448.273 384.253 cv
448.286 384.085 448.433 383.958 448.601 383.971 cv
448.769 383.984 448.895 384.131 448.883 384.299 cv
448.21 389.178 mo
448.049 389.983 447.862 390.783 447.651 391.578 cv
447.607 391.741 447.44 391.838 447.277 391.795 cv
447.114 391.751 447.016 391.584 447.06 391.421 cv
447.268 390.638 447.452 389.85 447.611 389.058 cv
447.644 388.892 447.805 388.785 447.971 388.818 cv
448.136 388.852 448.244 389.013 448.21 389.178 cv
446.945 393.938 mo
446.686 394.716 446.403 395.487 446.095 396.25 cv
446.032 396.407 445.853 396.483 445.697 396.419 cv
445.54 396.356 445.465 396.178 445.528 396.021 cv
445.831 395.27 446.11 394.51 446.365 393.745 cv
446.418 393.585 446.591 393.498 446.752 393.552 cv
446.912 393.605 446.998 393.778 446.945 393.938 cv
445.103 398.505 mo
444.751 399.244 444.375 399.974 443.974 400.694 cv
443.892 400.842 443.706 400.895 443.558 400.813 cv
443.411 400.731 443.358 400.545 443.44 400.397 cv
443.834 399.688 444.204 398.969 444.551 398.242 cv
444.624 398.09 444.807 398.025 444.959 398.098 cv
445.111 398.17 445.176 398.353 445.103 398.505 cv
442.712 402.809 mo
442.271 403.498 441.808 404.175 441.321 404.842 cv
441.221 404.978 441.03 405.008 440.894 404.908 cv
440.757 404.809 440.728 404.617 440.827 404.481 cv
441.306 403.825 441.763 403.157 442.196 402.48 cv
442.288 402.337 442.477 402.296 442.619 402.387 cv
442.761 402.478 442.803 402.667 442.712 402.809 cv
442.712 402.809 li
439.807 406.785 mo
439.286 407.414 438.743 408.029 438.178 408.632 cv
438.062 408.755 437.869 408.761 437.746 408.646 cv
437.622 408.53 437.616 408.337 437.732 408.214 cv
438.288 407.62 438.823 407.014 439.336 406.395 cv
439.444 406.265 439.637 406.247 439.767 406.355 cv
439.897 406.463 439.915 406.656 439.807 406.785 cv
436.439 410.378 mo
435.838 410.946 435.223 411.492 434.596 412.016 cv
434.467 412.124 434.274 412.107 434.166 411.977 cv
434.057 411.847 434.075 411.655 434.204 411.546 cv
434.822 411.031 435.427 410.493 436.019 409.933 cv
436.142 409.817 436.335 409.823 436.451 409.946 cv
436.567 410.068 436.562 410.262 436.439 410.378 cv
432.657 413.538 mo
431.992 414.028 431.315 414.494 430.627 414.938 cv
430.485 415.029 430.296 414.988 430.205 414.846 cv
430.113 414.704 430.154 414.515 430.296 414.424 cv
430.973 413.987 431.639 413.528 432.294 413.045 cv
432.43 412.945 432.622 412.974 432.722 413.11 cv
432.822 413.246 432.793 413.438 432.657 413.538 cv
428.515 416.209 mo
427.796 416.612 427.066 416.992 426.328 417.347 cv
426.176 417.42 425.993 417.356 425.92 417.204 cv
425.847 417.052 425.911 416.869 426.063 416.796 cv
426.789 416.446 427.508 416.073 428.216 415.676 cv
428.363 415.593 428.55 415.645 428.632 415.793 cv
428.715 415.94 428.662 416.126 428.515 416.209 cv
424.075 418.347 mo
423.312 418.658 422.542 418.944 421.765 419.206 cv
421.605 419.26 421.431 419.174 421.377 419.014 cv
421.323 418.854 421.409 418.68 421.569 418.627 cv
422.335 418.369 423.093 418.087 423.844 417.781 cv
424.001 417.717 424.179 417.792 424.243 417.949 cv
424.307 418.105 424.231 418.284 424.075 418.347 cv
419.406 419.92 mo
418.611 420.135 417.811 420.324 417.007 420.488 cv
416.842 420.522 416.681 420.415 416.647 420.25 cv
416.613 420.084 416.72 419.923 416.885 419.889 cv
417.677 419.727 418.464 419.541 419.247 419.33 cv
419.41 419.286 419.577 419.383 419.621 419.546 cv
419.665 419.709 419.569 419.876 419.406 419.92 cv
414.579 420.908 mo
413.765 421.023 412.948 421.113 412.129 421.177 cv
411.961 421.191 411.814 421.065 411.8 420.897 cv
411.787 420.729 411.913 420.581 412.081 420.568 cv
412.887 420.504 413.692 420.415 414.493 420.302 cv
414.661 420.279 414.815 420.395 414.839 420.562 cv
414.862 420.729 414.746 420.884 414.579 420.908 cv
409.668 421.297 mo
409.427 421.301 409.187 421.303 408.946 421.303 cv
408.365 421.303 407.785 421.291 407.204 421.266 cv
407.035 421.258 406.905 421.116 406.912 420.947 cv
406.919 420.778 407.062 420.647 407.231 420.655 cv
407.802 420.679 408.374 420.692 408.946 420.692 cv
409.183 420.692 409.42 420.69 409.657 420.686 cv
409.826 420.682 409.965 420.817 409.968 420.986 cv
409.971 421.154 409.837 421.294 409.668 421.297 cv
404.747 421.084 mo
403.931 420.998 403.116 420.888 402.305 420.752 cv
402.139 420.724 402.026 420.567 402.054 420.4 cv
402.082 420.234 402.24 420.121 402.406 420.149 cv
403.205 420.283 404.007 420.391 404.811 420.476 cv
404.979 420.493 405.1 420.644 405.083 420.812 cv
405.065 420.98 404.915 421.102 404.747 421.084 cv
399.889 420.271 mo
399.09 420.087 398.296 419.877 397.507 419.643 cv
397.345 419.595 397.253 419.425 397.301 419.263 cv
397.349 419.101 397.519 419.009 397.681 419.057 cv
398.458 419.288 399.24 419.494 400.027 419.676 cv
400.191 419.713 400.294 419.878 400.256 420.042 cv
400.218 420.207 400.054 420.309 399.889 420.271 cv
395.168 418.869 mo
394.399 418.588 393.636 418.282 392.882 417.952 cv
392.727 417.884 392.656 417.704 392.724 417.55 cv
392.792 417.395 392.972 417.324 393.127 417.392 cv
393.87 417.717 394.62 418.018 395.378 418.295 cv
395.536 418.353 395.618 418.528 395.56 418.687 cv
395.502 418.845 395.327 418.927 395.168 418.869 cv
390.656 416.896 mo
389.929 416.522 389.21 416.124 388.501 415.703 cv
388.356 415.617 388.308 415.429 388.395 415.284 cv
388.481 415.139 388.668 415.091 388.814 415.178 cv
389.511 415.592 390.219 415.984 390.936 416.352 cv
391.086 416.429 391.145 416.613 391.068 416.763 cv
390.991 416.913 390.807 416.973 390.656 416.896 cv
386.424 414.38 mo
385.749 413.92 385.085 413.437 384.433 412.931 cv
384.3 412.828 384.275 412.636 384.379 412.502 cv
384.482 412.369 384.674 412.344 384.808 412.448 cv
385.45 412.946 386.104 413.422 386.768 413.875 cv
386.908 413.97 386.944 414.16 386.849 414.299 cv
386.754 414.439 386.564 414.475 386.424 414.38 cv
386.424 414.38 li
382.533 411.362 mo
381.92 410.823 381.32 410.262 380.733 409.68 cv
380.613 409.561 380.612 409.367 380.731 409.247 cv
380.85 409.128 381.044 409.127 381.164 409.246 cv
381.742 409.82 382.333 410.372 382.937 410.902 cv
383.064 411.014 383.076 411.207 382.965 411.334 cv
382.853 411.461 382.66 411.473 382.533 411.362 cv
382.533 411.362 li
379.038 407.892 mo
378.487 407.275 377.959 406.645 377.453 406.003 cv
377.348 405.871 377.371 405.678 377.504 405.574 cv
377.637 405.469 377.829 405.492 377.933 405.625 cv
378.431 406.257 378.952 406.877 379.494 407.485 cv
379.606 407.611 379.595 407.804 379.469 407.917 cv
379.343 408.029 379.15 408.018 379.038 407.892 cv
375.988 404.02 mo
375.517 403.342 375.07 402.652 374.647 401.951 cv
374.56 401.807 374.606 401.619 374.751 401.532 cv
374.895 401.444 375.083 401.49 375.17 401.635 cv
375.587 402.324 376.027 403.004 376.49 403.672 cv
376.586 403.811 376.552 404.002 376.413 404.098 cv
376.274 404.194 376.084 404.159 375.988 404.021 cv
375.988 404.02 li
373.438 399.803 mo
373.056 399.072 372.698 398.332 372.364 397.584 cv
372.295 397.43 372.364 397.249 372.519 397.18 cv
372.673 397.112 372.853 397.181 372.922 397.335 cv
373.251 398.072 373.604 398.8 373.98 399.52 cv
374.058 399.669 374 399.854 373.85 399.932 cv
373.701 400.011 373.516 399.953 373.438 399.803 cv
371.43 395.303 mo
371.141 394.532 370.878 393.753 370.638 392.969 cv
370.589 392.807 370.68 392.636 370.841 392.587 cv
371.003 392.538 371.174 392.629 371.223 392.79 cv
371.459 393.563 371.718 394.329 372.002 395.089 cv
372.062 395.247 371.981 395.423 371.823 395.482 cv
371.665 395.541 371.489 395.461 371.43 395.303 cv
369.992 390.59 mo
369.801 389.79 369.635 388.985 369.494 388.177 cv
369.465 388.01 369.576 387.852 369.743 387.823 cv
369.909 387.794 370.067 387.905 370.096 388.071 cv
370.236 388.867 370.399 389.66 370.587 390.448 cv
370.626 390.612 370.525 390.777 370.361 390.816 cv
370.197 390.856 370.032 390.754 369.992 390.59 cv
369.145 385.737 mo
369.053 384.92 368.987 384.101 368.945 383.281 cv
368.937 383.112 369.067 382.969 369.235 382.96 cv
369.404 382.952 369.548 383.082 369.556 383.25 cv
369.597 384.058 369.662 384.864 369.752 385.669 cv
369.771 385.837 369.65 385.988 369.483 386.007 cv
369.315 386.025 369.164 385.905 369.145 385.737 cv
368.897 380.817 mo
368.905 379.996 368.939 379.175 368.998 378.355 cv
369.011 378.187 369.157 378.06 369.325 378.072 cv
369.494 378.084 369.621 378.231 369.608 378.399 cv
369.55 379.206 369.517 380.015 369.508 380.824 cv
369.506 380.993 369.368 381.128 369.199 381.126 cv
369.03 381.124 368.895 380.986 368.897 380.817 cv
369.251 375.904 mo
369.36 375.091 369.494 374.28 369.653 373.474 cv
369.685 373.308 369.846 373.2 370.012 373.233 cv
370.177 373.265 370.285 373.426 370.252 373.592 cv
370.096 374.386 369.964 375.185 369.857 375.985 cv
369.834 376.153 369.68 376.27 369.513 376.248 cv
369.346 376.225 369.228 376.072 369.251 375.904 cv
370.203 371.072 mo
370.41 370.279 370.643 369.491 370.9 368.709 cv
370.952 368.549 371.125 368.461 371.286 368.514 cv
371.446 368.567 371.533 368.74 371.481 368.9 cv
371.227 369.67 370.999 370.446 370.794 371.227 cv
370.751 371.39 370.584 371.488 370.421 371.445 cv
370.258 371.402 370.16 371.235 370.203 371.072 cv
371.741 366.394 mo
372.044 365.633 372.372 364.88 372.724 364.135 cv
372.796 363.982 372.978 363.917 373.131 363.989 cv
373.284 364.061 373.349 364.243 373.277 364.396 cv
372.93 365.129 372.608 365.871 372.309 366.62 cv
372.246 366.777 372.069 366.853 371.912 366.791 cv
371.755 366.728 371.678 366.551 371.741 366.394 cv
373.845 361.941 mo
374.239 361.225 374.657 360.518 375.099 359.822 cv
375.19 359.679 375.378 359.637 375.521 359.727 cv
375.664 359.818 375.706 360.007 375.615 360.149 cv
375.181 360.835 374.769 361.531 374.38 362.236 cv
374.299 362.384 374.113 362.438 373.965 362.357 cv
373.817 362.275 373.763 362.089 373.845 361.941 cv
376.482 357.784 mo
376.961 357.123 377.463 356.473 377.988 355.836 cv
378.095 355.705 378.288 355.687 378.418 355.794 cv
378.548 355.901 378.567 356.094 378.46 356.224 cv
377.943 356.852 377.449 357.492 376.977 358.143 cv
376.878 358.28 376.687 358.31 376.55 358.211 cv
376.414 358.112 376.383 357.921 376.482 357.784 cv
379.611 353.982 mo
379.941 353.627 380.279 353.276 380.625 352.93 cv
380.862 352.693 381.102 352.46 381.343 352.23 cv
381.465 352.113 381.659 352.118 381.775 352.24 cv
381.892 352.363 381.887 352.556 381.765 352.673 cv
381.527 352.899 381.291 353.129 381.058 353.363 cv
380.717 353.703 380.384 354.048 380.058 354.398 cv
379.943 354.522 379.75 354.529 379.626 354.414 cv
379.503 354.299 379.496 354.105 379.611 353.982 cv
383.18 350.585 mo
383.812 350.052 384.457 349.543 385.113 349.055 cv
385.249 348.955 385.44 348.983 385.541 349.118 cv
385.642 349.254 385.613 349.446 385.478 349.546 cv
384.831 350.026 384.196 350.528 383.573 351.052 cv
383.444 351.161 383.251 351.145 383.143 351.016 cv
383.034 350.886 383.05 350.694 383.18 350.585 cv
387.137 347.648 mo
387.829 347.198 388.532 346.771 389.245 346.368 cv
389.392 346.285 389.578 346.337 389.661 346.484 cv
389.744 346.631 389.693 346.817 389.546 346.901 cv
388.844 347.297 388.152 347.717 387.471 348.16 cv
387.329 348.252 387.14 348.212 387.048 348.071 cv
386.956 347.929 386.996 347.74 387.137 347.648 cv
391.427 345.222 mo
392.169 344.861 392.919 344.525 393.676 344.213 cv
393.833 344.149 394.011 344.223 394.076 344.379 cv
394.14 344.535 394.066 344.714 393.909 344.778 cv
393.163 345.086 392.425 345.417 391.695 345.772 cv
391.543 345.846 391.36 345.782 391.286 345.631 cv
391.212 345.479 391.275 345.296 391.427 345.222 cv
395.984 343.345 mo
396.763 343.08 397.549 342.839 398.34 342.622 cv
398.503 342.578 398.671 342.673 398.715 342.836 cv
398.76 342.999 398.664 343.167 398.501 343.212 cv
397.722 343.425 396.948 343.662 396.181 343.924 cv
396.021 343.979 395.848 343.893 395.793 343.734 cv
395.738 343.574 395.824 343.4 395.984 343.345 cv
400.736 342.045 mo
401.541 341.877 402.351 341.734 403.163 341.617 cv
403.33 341.592 403.485 341.708 403.509 341.875 cv
403.534 342.042 403.418 342.198 403.251 342.222 cv
402.451 342.338 401.654 342.479 400.861 342.644 cv
400.695 342.678 400.534 342.572 400.499 342.407 cv
400.465 342.242 400.571 342.08 400.736 342.045 cv
405.611 341.338 mo
406.43 341.27 407.251 341.227 408.072 341.209 cv
408.241 341.205 408.381 341.339 408.385 341.508 cv
408.388 341.677 408.254 341.816 408.086 341.82 cv
407.277 341.838 406.469 341.88 405.662 341.947 cv
405.494 341.961 405.346 341.836 405.332 341.667 cv
405.318 341.499 405.443 341.352 405.611 341.338 cv
410.536 341.231 mo
411.357 341.263 412.176 341.321 412.994 341.403 cv
413.162 341.42 413.285 341.57 413.268 341.738 cv
413.251 341.906 413.101 342.029 412.933 342.012 cv
412.128 341.93 411.32 341.874 410.512 341.842 cv
410.343 341.835 410.212 341.693 410.219 341.524 cv
410.225 341.356 410.367 341.224 410.536 341.231 cv
415.437 341.726 mo
416.247 341.858 417.053 342.015 417.855 342.197 cv
418.02 342.235 418.123 342.399 418.086 342.563 cv
418.048 342.728 417.884 342.831 417.72 342.794 cv
416.93 342.614 416.136 342.46 415.338 342.329 cv
415.172 342.302 415.059 342.145 415.086 341.978 cv
415.113 341.811 415.27 341.698 415.437 341.726 cv
420.24 342.817 mo
421.026 343.047 421.807 343.302 422.581 343.582 cv
422.74 343.639 422.822 343.814 422.765 343.973 cv
422.708 344.132 422.532 344.214 422.374 344.157 cv
421.611 343.882 420.842 343.63 420.068 343.404 cv
419.906 343.356 419.813 343.186 419.86 343.024 cv
419.908 342.862 420.078 342.769 420.24 342.817 cv
424.871 344.49 mo
425.623 344.815 426.366 345.165 427.101 345.538 cv
427.251 345.615 427.311 345.798 427.234 345.949 cv
427.158 346.099 426.974 346.16 426.823 346.083 cv
426.1 345.715 425.368 345.371 424.629 345.051 cv
424.473 344.984 424.402 344.804 424.469 344.649 cv
424.536 344.494 424.716 344.423 424.871 344.49 cv
429.26 346.722 mo
429.965 347.137 430.659 347.575 431.342 348.037 cv
431.482 348.132 431.519 348.322 431.425 348.462 cv
431.33 348.602 431.14 348.639 431 348.544 cv
430.327 348.089 429.643 347.657 428.95 347.249 cv
428.804 347.163 428.756 346.976 428.842 346.83 cv
428.928 346.685 429.115 346.636 429.26 346.722 cv
433.339 349.479 mo
433.987 349.977 434.622 350.498 435.245 351.041 cv
435.372 351.152 435.385 351.345 435.274 351.472 cv
435.163 351.599 434.97 351.612 434.843 351.502 cv
434.23 350.966 433.604 350.454 432.966 349.963 cv
432.832 349.86 432.807 349.668 432.911 349.534 cv
433.013 349.4 433.205 349.376 433.339 349.479 cv
437.051 352.716 mo
437.267 352.93 li
437.387 353.05 437.387 353.243 437.267 353.362 cv
437.148 353.482 436.954 353.482 436.835 353.362 cv
436.622 353.151 li
436.502 353.033 436.5 352.839 436.619 352.719 cv
436.737 352.599 436.931 352.597 437.051 352.716 cv
0 0 0 1 cmyk
f
415.673 387.978 mo
402.22 387.978 li
402.22 374.525 li
415.673 374.525 li
415.673 387.978 li
.0677806 .227756 .55111 0 cmyk
f
402.22 374.525 mo
415.673 374.525 li
415.673 387.977 li
402.22 387.977 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
GJZIJN+Helvetica*1 [7.3378 0 0 -7.3378 0 0 ]msf
405.684 383.697 mo
(Pi)
[4.89438 0 ]xsh
231.006 336.613 mo
265.249 336.613 li
265.249 368.41 li
231.006 368.41 li
cp
0 0 0 0 cmyk
f
231.006 336.613 mo
265.249 336.613 li
265.249 368.41 li
231.006 368.41 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: PBAAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Helvetica gcheck setglobal} if

1 0 1 <> PBAAAA+Helvetica AddT42Char 
1 108 2 <0002005affda057105e5001d001e00b1403b1b0597019605031f011f0482
018705891305530803861d111115063a1d030c3a15091e021e1e19033102
3b1031111a20093119191f20a1216a66182b2b4ef44ded4e10f64dedf4ed
12392f003f3fed3fed12392f10ed31304379403a001c172513260e251b26
0b160932000d1410320112110f10071c0932000500033201010204030a18
0c32000f120c3200081a06320104010632012b2b2b2b01103c103c2b2b10
3c103c2b2b2b2b2b2b815d015d080117232e012322001110123332373637
3306070621202726111037362123041e013411c221c5b2d9fef5f1efdc73
3d1ec21a92affed7ff00aee5acba01472805e5fedabb8ea6fecffec5fefe
febfa95991e89dbd9bcd01ac0145d0e20000>PBAAAA+Helvetica AddT42Char 
1 1056 6 <000200aaffd9052f05bd00150016003c4023170527053810030a0002053a
1009160316161409250c1a18012514191718a0219570182b2b4ef44ded4e
10f64ded12392f003f3fed3f3c5d31300111141716333237363511331110
07022120032619012101743c59d3fd5b31ca4986fe8cfe8c8549024305bd
fc74a06aa0ad5e9f038cfcc7fef192fef6010a92010f0339>PBAAAA+Helvetica AddT42Char 
1 1388 8 <00030052ffdc04470449000f003b003c00dd40382a30010a100b1b0c1c27
33481069096a10073908120c09031b320724091d100c1d3b2b022e293bb7
3b023b322a2512100705081c2722171cb8018a4023171d1f07271d2e0b02
1d350b3c073c3c1c1407292aa8241a3e1b291c4a0f2738193d3ebc019700
2100b9019600182b2b4ef44dedf4ed4e10f64de4fdc412392f003f3fed3f
ed3feded1239111217395d1112392eed2eed011112391117393130437940
28363715220001192501360f2100181e1b21001620142101212200370221
001a1d1721011521172101002b2b2b01103c2b2b2b2b818181005d015d24
16333237363d010e010f0106070615013637363534262322070607233e01
333217161511141633323637150e0123222726270e012322263534363713
010e724e5f59962168326d62315301b43e150c837a8d3b210aa805f7a3bd
767517250c1e112a2c265d2a160937ce7c95bdba978acf5a2c49a691151c
060e0d1c2f67016c082c182d5c534c2a53c69b484898fd971c220303850c
06422340486ab58895a41301e400>PBAAAA+Helvetica AddT42Char 
1 2008 10 <00030048ffda041a0449001c00240025010c40799708991aa71f03050e02
0f0514150e120f1514400c401408291a014b0bb603c701c603c71bd808d9
09d61fd823e817e8230bc711c712025c080521240f9a161d243906070716
211d1c070a1d160b2507971ca71cb71cd71c0425160f251c05190a0c0711
0e270f1d27051a27242e072719192627d421a65d182b2b4ef44dfde44e10
f64dedd4fd391239391112393912392f5d003f3fed3fed12392f3cfd3c10
ed1112393130437940460023040503050205010504061f26111012101310
141004060c25221b24260020001d26011e1d09170726000b150e26010d0e
231a2126011e0521260108180a26000d100a2600002b2b2b2b01103c2b2b
103c2b2b2b2a2b2a8101715d00715d5d00161716171615211e0133323736
37330e01070607062322001110003301262726232206070102b4d6383612
10fcef0590978d543014b1074f3152794152c8feea0118e2011f0b284aad
7ca805012304476b55516c4aa2a3c55d36473b912e501c10012301060102
0142fe26754682b38a01dc000000>PBAAAA+Helvetica AddT42Char 
1 3000 14 <000100890000013d05bd0003002940150000030a0517171a010229000319
0405aa216242182b2b4ef43c4dfd3c4e456544e6003f3f31301333112389
b4b405bdfa430000>PBAAAA+Helvetica AddT42Char 
1 3316 16 <00020084000003ed04490019001a005e4031b706c7060204061406271476
06740705140c021418101d05070006180b0a1a071a1a000c29091a1c012e
18291900191b1cb80106b3216242182b2b4ef43c4dfde44e10f64ded1239
2f003f3f3c3f3fed1139390112393130005d015d1333153e013332171615
11231134272623220706070e011511230184ab4caa68e4502cb71d307e40
294a382d1bb401a7042f985e529f57a2fd5102a3623c640d1642357169fd
cf044900>PBAAAA+Helvetica AddT42Char 
1 3500 17 <0003003bffd90421044e000c0018001900904033980896109916a504a808
a610a916b808c808d704e50ee9140c3a08061d18070c1d120b1907191915
02270f1a1b092715191a1bb80109b321725d182b2b4ef44ded4e10f64ded
12392f003f3fed3fed31304379402c001704260b13092600001102260107
17092600050d0226010a140c260001100c26000816062601030e0626012b
2b2b2b012b2b2b2b2b81005d241235342726232206151416331200111002
212200351000330702e085304cbaa59696a3d6011efcfef7ddfefc0112e7
0674010fa6965e94fcb2abe403dafeecfef4fefdfeae012bfc010e014005
>PBAAAA+Helvetica AddT42Char 
1 3740 18 <000100890000029204470011004f40262703260d37034704040e0810020e
0911090c270805070006110a081a13012e10291100191213b80145b32162
7e182b2b4ef43c4dfde44e10e6003f3f4d3fc4fdc4111239390111123931
30005d1333153e0133321617152e0123220615112389ab15a46b05181d10
1b108892b4042fb9369b0203be0302af72fd9800>PBAAAA+Helvetica AddT42Char 
1 4328 20 <00010017ffef0209055a00180052b50d2e0ac00e01b8013f402504163917
03060e0a111a17171a0301062900150e150f031f030203fc1619191afc21
677d182b2b4ef44dfd5d39c42f3cfd3c104e456544e6002f3f3f3c4dfd3c
ed10fde431301333113315231114171633323637150e0123222635112335
33a8b6abab2615310d1e141f43277e5a9191055afed593fd4538130b0102
8e0908816702c5930000>PBAAAA+Helvetica AddT42Char 
PBAAAA+Helvetica /CharStrings get begin
/space 1 def
/C 2 def
/U 6 def
/a 8 def
/e 10 def
/l 14 def
/n 16 def
/o 17 def
/r 18 def
/t 20 def
end
PBAAAA+Helvetica /Encoding get
dup 32 /space put
dup 67 /C put
dup 85 /U put
dup 97 /a put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GJZIJN+Helvetica*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 12{/.notdef}rp /P 4{/.notdef}rp /U 
11{/.notdef}rp /a 3{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l 
/.notdef /n /o 2{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]
GJZIJN+Helvetica nf
GJZIJN+Helvetica*1 [7.3378 0 0 -7.3378 0 0 ]msf
236.3 346.397 mo
(Central )
[5.2979 4.0798 4.07982 2.03992 2.44342 4.07982 1.629 0 ]xsh
236.3 354.958 mo
(Control )
[5.2979 4.0798 4.07982 2.03992 2.44342 4.07982 1.629 0 ]xsh
241.603 363.518 mo
(Unit)
[5.29936 4.08128 1.63046 0 ]xsh
160.685 384.003 mo
194.928 384.003 li
194.928 406.016 li
160.685 406.016 li
cp
0 0 0 0 cmyk
f
160.685 384.309 mo
194.928 384.309 li
194.928 406.322 li
160.685 406.322 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: PBAAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Helvetica gcheck setglobal} if
1 648 5 <00020060ffd504f605e5002f003000fe405e290f27232626360e35214726
62267a0e7724096b08180e172502590e680eaa22030a0e3a2224220a0304
1c1886142f2f2b1c3a1403043a2b0930020a0e081124221f283030111825
17490825281a321f25114900252f193132a0216a89182b2b4ef44dedf4ed
4e10f64dedf4ed12392f1211393912113939003f3fed3fed12392f10ed11
1217392efd335d7131304379404d282e111f0008022602262d2506251a26
032c002b002d2e032c002b00052a082b011d131f2b001b15182b01191801
2d042b0009270b2b01250b012e042b000729042b001e121c2b0119161c2b
01002b2b2b2b10102b2b01103c2b2b2b2b103c2b2b2b2b2b2b818181005d
0116171633323736353427262f0126272635342433320415232627262322
06151417161f01161716151404232027263701011e073463fa705cb24b4c
a2c7c3518c0112fbe70143bb0f315bdab09a5a3bd0ce95518cfe9debfeee
9b9b03024d01da7d4e92203ea0783332252d2c355cb7c6fedff5763f7394
626c3220302f223b67c4f4d28c8bee040b00>PBAAAA+Helvetica AddT42Char 
1 1792 9 <00020038ffda03ed05c2000b001d00774032370e470e570ea704a91b0525
0814020f1d1000081d1d07130a021d170b052e132e102911121a1f0b271a
191e1f87217242182b2b4ef44ded4e10f63c4dfde4e4003fed3f3fed3f11
39113931304379401a181c090a000101180b2600091c0b26000019022600
0a1b0826012b2b012b2b818181005d121633323635342623220615001716
1711331123350e0123220035341233f692a17da1a67a88a9018a53303dad
a23fac6fb3fefaefde015fe8d7c9cbc3d0ca0237341e4b021dfa3e956358
012dfaea0157>PBAAAA+Helvetica AddT42Char 
1 3068 15 <0001008400000625044700260085403b0708070e060f1708170e170f2708
270e270f4819560b670b0c23250a1a1d23190a02041725211d171d0d0607
00061b1c2503130a2817171a112914b80101b21a291db80101400a00012e
25292600192728b8010db3216242182b2b4ef43c4dfde410f4edf4fd4e45
6544e6003f173c3f3f3c4deded111217390111123912393130005d133315
36373633321716173e013332171615112311342623220615112311342726
23220615112384b240345971804e2c243ca265d84e2abb6b4d6a99b71a29
7066a7b4042f984f243d3f244656539c548efd3702e86b508ea6fd9102bb
6d324b9ecffdc800>PBAAAA+Helvetica AddT42Char 
1 3880 19 <00020042ffd703b6044b002e002f012e408f38099805961299149815982a
062824252736214621472447275624572766246726790c790d790e762374
2474257426a61ea82c1303000b15052d042e13001a151b171c18152d142e
280f0b6908262536250225220d0a042b1318c61c1d1307041d2e9a2b0b2f
07090e100207002f212f1a1f18161827173e28260727281a310e1f27103e
00272e193031b221a65d182b2b4ef44dedf4fd394e10f64dfd3910f4fd39
11123939392f111239113939003f3feded3feded11121739713130437940
4c012d022615251a26210e1f21000926072101032c002100052a0721011d
121f21001b14182101200f22210021220e0d08270a21012625090a012d04
210006290421001e111c210119161c2101002b2b2b2b103c103c2b103c10
3c2b012b2b2b2b2b2b2b2b2b81005d5d015d13161716333236353427262f
01262726353436333217160723262726232206151417161f011617161514
062322262701ef082544a864983d27738f894174dbb9f26b4302aa05263e
99666945284e77c24269d9deefc70701b701505a3057575b4524161d2422
2a498198bc8e5a683d32474e40462a19131d2f2c45948fd0d9a002f9>PBAAAA+Helvetica AddT42Char 
1 4488 21 <00020080ffe303de044900170018005e403ab814c8140209130814191319
1428067703d707070800050e0a00060d0a051d120b180718180b160d2e0a
290c0b1a1a01291619191ad2216242182b2b4ef44ded4e10f63c4dfde411
12392f003f3fed3f3f3c391112393130005d015d01111417163332373635
11331123370607062322272635112501381a3083bc4425b4aa0223346793
e5532d01af042ffd39523460a85a9d020efbd19e3d2a5499528902d81a00
>PBAAAA+Helvetica AddT42Char 
1 4668 22 <00020015fe4903e804490018001900ca406e8a158818a718030706170638
12481258126707770377078c1498009705981597169717a800a816104800
4b154717c915044405c605028705a600a601a705a8170524280518151716
010006150c0b0f1d080e19071919161b17171a050001af171518af0c8f16
191a1bd421677e182b2b194ef44de418fd3939fd3939194e456544e61812
392f003f3f4dfd3932192f183f3c3c3c123939014b527940121515001616
6d121717180501016d12000018872e2b107dc418872e2b10087dc418015d
71313071015d005d013306030207020623222627351e01333236373e0137
013301030321c7268362429c809c26291e2f2a10322f10053e0efe74cc01
1f01042f67fe91feecaefe66b40608a40d062118089424044efc98038200
>PBAAAA+Helvetica AddT42Char 
PBAAAA+Helvetica /CharStrings get begin
/S 5 def
/d 9 def
/m 15 def
/s 19 def
/u 21 def
/y 22 def
end
PBAAAA+Helvetica /Encoding get
dup 83 /S put
dup 100 /d put
dup 109 /m put
dup 115 /s put
dup 117 /u put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GJZIJN+Helvetica*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 12{/.notdef}rp /P 2{/.notdef}rp /S 
/.notdef /U 11{/.notdef}rp /a 2{/.notdef}rp /d /e 3{/.notdef}rp 
/i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r 
/s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
GJZIJN+Helvetica nf
GJZIJN+Helvetica*1 [7.3378 0 0 -7.3378 0 0 ]msf
167.198 393.175 mo
(Sound )
[4.89436 4.07982 4.07982 4.07982 4.0798 0 ]xsh
165.575 401.736 mo
(Syst)sh
179.847 401.736 mo
(em)
[4.0798 0 ]xsh
160.685 299.007 mo
194.928 299.007 li
194.928 321.02 li
160.685 321.02 li
cp
0 0 0 0 cmyk
f
160.685 299.313 mo
194.928 299.313 li
194.928 321.326 li
160.685 321.326 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: PBAAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Helvetica gcheck setglobal} if
1 396 3 <0001009c0000044b05bd000500314013000203021e040508031a07010225
0500190607b80153b321765e182b2b4ef43c4dfd3c4e10e6003f3c4dfd3c
3f31301333112115219cc702e8fc5105bdfaf2af>PBAAAA+Helvetica AddT42Char 
1 2412 11 <0003003dfe3b03e80449001f002d002e00b7404d36144908490958085909
880ca91ba81da927a62bb91b0b4008031622290ec40a221d1f070406291d
190a121d0a0f2e072e2e051c032e162e2d29051a300c0e270d3e26271c19
2f3087217242182b2b4ef44dedf4ed394e10f64dfde4f51112392f003f3f
ed3fed3f3fed10ed1112393931304379402c23281a1e0b1124251026231e
262600281a262600110b0e21000f0e0c0d251d222601271b2926000f0c12
2100002b2b2b01103c103c2b2b2b2b2b818181005d001716173533111407
06212226273316171633323736270e012322241110003300262322070615
1416333237363501027c5e3335a63c70fec9adec0eb70d273d83cf402603
36987daefefb0107ba0144a47fbe4625937cc24f2cfed104423e234387fc
32cc76da9ba548273c9256dd5250f7011d010d012efea1c0b25f9ab5bdaf
6384022d0000>PBAAAA+Helvetica AddT42Char 
1 2748 12 <00010084000003ed05c200160053402c0607070817071708270427137507
750808130d0213150000111d0607150c0a0d290a1a180115290016191718
b80106b3216242182b2b4ef43c4dfd3c4e10f64ded003f3c3fed3f113939
0112393130005d1333113637363332171615112311342726232206151123
84b440335782e9532db91e318770b6b405c2fddc512139a3599efd5102a3
7637589ad6fdc8000000>PBAAAA+Helvetica AddT42Char 
PBAAAA+Helvetica /CharStrings get begin
/L 3 def
/g 11 def
/h 12 def
end
PBAAAA+Helvetica /Encoding get
dup 76 /L put
dup 103 /g put
dup 104 /h put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GJZIJN+Helvetica*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 8{/.notdef}rp /L 3{/.notdef}rp /P 
2{/.notdef}rp /S /.notdef /U 11{/.notdef}rp /a 2{/.notdef}rp /d 
/e /.notdef /g /h /i 2{/.notdef}rp /l /m 
/n /o 2{/.notdef}rp /r /s /t /u 3{/.notdef}rp 
/y 134{/.notdef}rp]
GJZIJN+Helvetica nf
GJZIJN+Helvetica*1 [7.3378 0 0 -7.3378 0 0 ]msf
168.017 312.46 mo
(Lights)
[4.08128 1.63046 4.08128 4.08128 2.04137 0 ]xsh
160.685 341.505 mo
194.928 341.505 li
194.928 363.518 li
160.685 363.518 li
cp
0 0 0 0 cmyk
f
160.685 341.505 mo
194.928 341.505 li
194.928 363.518 li
160.685 363.518 li
cp
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: PBAAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Helvetica gcheck setglobal} if
1 1200 7 <000100340000053605bd0006008f40449001a00102400154010216010178
05e601026704680588040319280225120303040025120606050105020306
0300020504080817171a0402039e0500019e0619078e5e182b194e10f418
4dfd3939fd3939194e456544e618003f3c3f173c123901874d2e2b872e18
2b4b5279400c01020100030401000102060587087d10c487087d10c43130
015d005d717172090233012301011001a601a1dffde8d3fde905bdfb1d04
e3fa4305bd000000>PBAAAA+Helvetica AddT42Char 
PBAAAA+Helvetica /CharStrings get begin
/V 7 def
end
PBAAAA+Helvetica /Encoding get
dup 86 /V put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GJZIJN+Helvetica*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 8{/.notdef}rp /L 3{/.notdef}rp /P 
2{/.notdef}rp /S /.notdef /U /V 10{/.notdef}rp /a 2{/.notdef}rp 
/d /e /.notdef /g /h /i 2{/.notdef}rp /l 
/m /n /o 2{/.notdef}rp /r /s /t /u 
3{/.notdef}rp /y 134{/.notdef}rp]
GJZIJN+Helvetica nf
GJZIJN+Helvetica*1 [7.3378 0 0 -7.3378 0 0 ]msf
168.488 354.958 mo
(Video)
[4.76523 1.63193 4.08275 4.08275 0 ]xsh
200.371 323.65 mo
225.563 338.875 li
@
229.75 341.405 mo
226.512 337.305 li
224.615 340.445 li
cp
f
0 lc
0 lj
229.75 341.405 mo
226.512 337.305 li
224.614 340.445 li
cp
@
196.184 321.12 mo
199.422 325.22 li
201.319 322.08 li
cp
f
196.184 321.12 mo
199.422 325.22 li
201.32 322.08 li
cp
@
1 lc
1 lj
201.288 352.512 mo
224.646 352.512 li
@
229.538 352.512 mo
224.646 350.678 li
224.646 354.347 li
cp
f
0 lc
0 lj
229.538 352.512 mo
224.646 350.677 li
224.646 354.346 li
cp
@
196.396 352.512 mo
201.288 354.347 li
201.288 350.678 li
cp
f
196.396 352.512 mo
201.288 354.346 li
201.288 350.677 li
cp
@
1 lc
1 lj
200.371 381.373 mo
225.563 366.148 li
@
229.75 363.618 mo
224.615 364.578 li
226.512 367.718 li
cp
f
0 lc
0 lj
229.75 363.618 mo
224.614 364.578 li
226.512 367.718 li
cp
@
196.184 383.903 mo
201.319 382.943 li
199.422 379.803 li
cp
f
196.184 383.903 mo
201.32 382.943 li
199.422 379.803 li
cp
@
1 lc
1 lj
[.611481 5.50333 ] 0 dsh
265.502 340.743 mo
346.322 286.001 li
@
265.549 349.357 mo
401.919 324.662 li
@
265.505 363.815 mo
346.319 416.379 li
@
265.549 355.625 mo
401.919 379.996 li
@
[6.11481 1.83444 1.22296 1.83444 1.22296 1.83444 ] 0 dsh
401.971 386.224 mo
360.277 415.948 li
@
404.957 330.382 mo
357.291 413.929 li
@
360.272 286.55 mo
401.977 318.114 li
@
353.302 288.306 mo
353.302 413.889 li
@
408.946 374.219 mo
408.946 330.422 li
@
357.194 288.268 mo
405.054 374.258 li
@
364.981 435.979 mo
370.362 435.979 li
374.398 440.015 li
374.398 445.396 li
370.362 449.432 li
364.981 449.432 li
360.945 445.396 li
360.945 440.015 li
cp
0 0 0 0 cmyk
f
[] 0 dsh
364.981 436.284 mo
370.362 436.284 li
374.703 440.014 li
374.703 445.396 li
370.362 449.737 li
364.981 449.737 li
361.251 445.396 li
361.251 440.014 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: HIBBAA+Helvetica-Bold Initial
ct_T42Dict begin
-1.016 -0.48 1.434 1.156
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+Helvetica-Bold
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000003886670
676d000000000000044400000b97676c7966000000000000146400000174
686561640000000000000fdc000000366868656100000000000010140000
0024686d74780000000000001038000000086c6f63610000000000001040
000000066d6178700000000000001048000000206e616d65000000000000
106800000028707265700000000000001090000003d36764697200000000
000000000000000005c0001105c2002d0597001d0442001d0000ffda0000
ffdb0000ffdafe53ffef05d0000afffdffed03340000012200000122dffb
011400af000700b7007e000400d200aa0109002300ed013200d9011d012a
00d800fe00db00e2001a008b00a0001a004500e801f6000900e901280132
00360082009e009fff700070003f003f00e801050015003800e9ff7bffc8
fff90042008a00c401070113011dffb9002f00870087009a009c010c0262
ffb10018004c00770080008200c900daffb2ffea001a003600e50111012f
043bffdd00020005001a0039008900aa00b701210123012a015bffe50002
00180023005c00aaff4dff76ffb2ffef001a002f004e007b008a00e1011f
0126012b019a01de03edff80ff8e0007001c004e005500630063006d0081
0098009c00ad011f01260162041c051500390044004b0063008e00cc00e8
00f2010001290142017802d503ea03f0043b049affc400050055005c0060
009f0103011d012401550164017001ad01b401c301f602370261033903d5
047004a100020055008800a100bd00c700d300dd00eb00ed00fa00fd0104
012b013e014f017b019d01ad01e20233025d027d028c02da02ef033103de
0407048b058505bbff04ffd5fffa0007001e002a003b0047005100580065
00650066006e0075007f00840107009700b100c300cc00df00df010a0110
012f013101470154015b016b0179009101a401ba01dc01e401e601e901f6
0213021f0223022f0276027d0282028902ad02b202b902ed03110374037d
03c003de03f60415045d04c004c004df052d0574061c064b0751fe94fedf
ff2dff90ff9affea0016001600240029002d003e0104006d006d00840087
0089008e009c00a400ab00ae00b200b2fffb013900c400d100df00e100ef
00f70121011c011c012101320138015001510154016c016d017f019801a4
01aa01b601ba01bb01bb00d701d701fb01fb01fe00190209022d025b0261
02790279029a009802d302da02ef030c03210328032d034b0353fff103ad
03b103f20425045a0471047b048a0498049f051c053d0557055a05700595
05b605cb05d605ef05f4061d068706a406b406d307080734079807fe0122
01320120012500b400be0082009603700132012400430184011d015600cc
010500ed00c500fb00f900c000a7011d00fe035500880026ffa100b8ff88
00dd00bd00b5037c003c00910293024aff3f03a803090132fff700820030
002a002a002a002a002a002a402a292827262524232221201f1e1d1c1b1a
191817161514131211100f0e0d0c0b0a090807060504030201002c452346
6020b02660b004262348482d2c452346236120b02661b004262348482d2c
45234660b0206120b04660b004262348482d2c4523462361b0206020b026
61b02061b004262348482d2c45234660b0406120b06660b004262348482d
2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c
2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320
b04d44235920b09051582320b00d44235921212d2c20204518684420b001
602045b04676688a4560442d2c01b9400000000a2d2c00b9000040000b2d
2c2045b00043617d6818b0004360442d2c45b01a234445b01923442d2c20
45b00325456164b050515845441b2121592d2cb00143632362b0002342b0
0f2b2d2c2045b0004360442d2c20b0032552582359212d2c69b04061b000
8b0c6423648bb8400062600c642364615c58b0036159b002602d2c45b011
2bb0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb017458c
b0172344b0177ae5182d2cb002254661658a46b040608b482d2cb0022546
608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b00325
45b019234445b01a23444565234520b00325606a20b009234223688a6a60
6120b0005058b21a401a4523604459b0005258b219401945236044592d2c
b9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b
2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d2c01
20b003252349b04060b0206320b000525823b002253823b002256538008a
63381b212121212159012d2c456920b00943b0022660b00325b005254961
b0805358b21940194523616844b21a401a4523606a44b209191a45652345
604259b00943608a103a2d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2c764520b0032545
23616818236860442d2c7645b00325452361682318456860442d2c7645b0
032545616823452361442db8002a2c4bb800095058b101018e59b801ff85
b800441db9000900035f5e2db8002b2c2020456944b001602db8002c2cb8
002b2a212db8002d2c2046b003254652582359208a208a49648a20462068
6164b004254620686164525823658a592f20b00053586920b000545821b0
40591b6920b000545821b0406559593a2db8002e2c2046b0042546525823
8a592046206a6164b0042546206a61645258238a592ffd2db8002f2c4b20
b0032650585158b080441bb04044591b21212045b0c05058b0c0441b2159
592db800302c2020456944b001602020457d691844b001602db800312cb8
00302a2db800322c4b20b003265358b0801bb040598a8a20b00326535823
21b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b00326
53582321b801408a8a1b8a235920b80003265358b0032545b80180505823
21b8018023211bb003254523212321591b2159442db800332c4b53584544
1b2121592db800342c4bb800095058b101018e59b801ff85b800441db900
0900035f5e2db800352c2020456944b001602db800362cb800352a212db8
00372c2046b003254652582359208a208a49648a204620686164b0042546
20686164525823658a592f20b00053586920b000545821b040591b6920b0
00545821b0406559593a2db800382c2046b00425465258238a592046206a
6164b0042546206a61645258238a592ffd2db800392c4b20b00326505851
58b080441bb04044591b21212045b0c05058b0c0441b2159592db8003a2c
2020456944b001602020457d691844b001602db8003b2cb8003a2a2db800
3c2c4b20b003265358b0801bb040598a8a20b0032653582321b0c08a8a1b
8a235920b0032653582321b801008a8a1b8a235920b0032653582321b801
408a8a1b8a235920b80003265358b0032545b8018050582321b801802321
1bb003254523212321591b2159442db8003d2c4b535845441b2121592db8
003e2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2d
b8003f2c2020456944b001602db800402cb8003f2a212db800412c2046b0
03254652582359208a208a49648a204620686164b0042546206861645258
23658a592f20b00053586920b000545821b040591b6920b000545821b040
6559593a2db800422c2046b00425465258238a592046206a6164b0042546
206a61645258238a592ffd2db800432c4b20b0032650585158b080441bb0
4044591b21212045b0c05058b0c0441b2159592db800442c2020456944b0
01602020457d691844b001602db800452cb800442a2db800462c4b20b003
265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b003
2653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a23
5920b80003265358b0032545b8018050582321b8018023211bb003254523
212321591b2159442db800472c4b535845441b2121592db800482c4bb800
095058b101018e59b801ff85b800441db9000900035f5e2db800492c2020
456944b001602db8004a2cb800492a212db8004b2c2046b0032546525823
59208a208a49648a204620686164b004254620686164525823658a592f20
b00053586920b000545821b040591b6920b000545821b0406559593a2db8
004c2c2046b00425465258238a592046206a6164b0042546206a61645258
238a592ffd2db8004d2c4b20b0032650585158b080441bb04044591b2121
2045b0c05058b0c0441b2159592db8004e2c2020456944b001602020457d
691844b001602db8004f2cb8004e2a2db800502c4b20b003265358b0801b
b040598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321b8
01008a8a1b8a235920b0032653582321b801408a8a1b8a235920b8000326
5358b0032545b8018050582321b8018023211bb003254523212321591b21
59442db800512c4b535845441b2121592db800522c4bb800095058b10101
8e59b801ff85b800441db9000900035f5e2db800532c2020456944b00160
2db800542cb800532a212db800552c2046b003254652582359208a208a49
648a204620686164b004254620686164525823658a592f20b00053586920
b000545821b040591b6920b000545821b0406559593a2db800562c2046b0
0425465258238a592046206a6164b0042546206a61645258238a592ffd2d
b800572c4b20b0032650585158b080441bb04044591b21212045b0c05058
b0c0441b2159592db800582c2020456944b001602020457d691844b00160
2db800592cb800582a2db8005a2c4b20b003265358b0401bb000598a8a20
b0032653582321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a
235920b0032653582321b801008a8a1b8a235920b0032653582321b80140
8a8a1b8a235920b80003265358b0032545b8018050582321b8018023211b
b003254523212321591b2159442db8005b2c4b535845441b2121592db800
5c2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db8
005d2c2020456944b001602db8005e2cb8005d2a212db8005f2c2046b003
254652582359208a208a49648a204620686164b004254620686164525823
658a592f20b00053586920b000545821b040591b6920b000545821b04065
59593a2db800602c2046b00425465258238a592046206a6164b004254620
6a61645258238a592ffd2db800612c4b20b0032650585158b080441bb040
44591b21212045b0c05058b0c0441b2159592db800622c2020456944b001
602020457d691844b001602db800632cb800622a2db800642c4b20b00326
5358b0401bb000598a8a20b0032653582321b0808a8a1b8a235920b00326
53582321b800c08a8a1b8a235920b0032653582321b801008a8a1b8a2359
20b0032653582321b801408a8a1b8a235920b80003265358b0032545b801
8050582321b8018023211bb003254523212321591b2159442db800652c4b
535845441b2121592d0000010000000100000f3b1cca5f0f3cf500110800
00000000a2272e8000000000cdb9bab7f7dcfc270b7e0946000100090001
000000000000000100000629fe2900000c01f7dcfcdb0b7e000100000000
00000000000000000000000205c7009a047300420000003400ba00000001
00000002007a0009006c00080002001000100066000007e80b9700040001
0000000100120001000000000006001500005346495357512b48656c7665
746963612d426f6c6400b8005c2bb800522bb800482bb8003e2bb800342b
b8002a2bb10840ba019000145df44009011f04000b1fd819eebe012e000d
00e6012e000d00b0012e400c0d000963833c1f63838348294109014b0037
0401001f014500240401001f0144b224ab1fb8013eb224231fb8013db224
231fb80102b2371d1fb80100400937241ffd37621ffc37b80801401b1ff8
24931ff724931ff6243f1ff524311fd1371d1fd037471fcd41b80801b21f
cb2ab80201b21fca24b80401400f1fc824811fb537291fb4373b1fb227b8
0401b21fb141b80401b61fa437811fa384b80401b21fa22ab80401b21fa1
24b8019ab21fa024b8019ab61f9f243f1f9683b80401b21f9527b80401b2
1f8227b80401b21f7084b80801b21f6fb3b80801b21f6eb3b802abb61f6d
24261f6224b80101400b1f5d246c1f5c24391f5441b80125b21f4d27b804
01b61f4c27cd1f4b41b80401b21f4024b8019ab21f3683b80401b21f3524
b80201b21f3224b8019ab61f2c24bb1f2884b80801b21f2241b804014013
1f20244c1f1d24261f2ca0961f2c245e1f412ab801a8b748282a24482796
36b801f4b21f4d27b801f4b21f9527b801f4b21f6e27b801f4b21f6327bd
01a700470029015a00250199b348296fb3b80190b21f83b3b8019ab34828
3725b803e840121fb327482784274827362748272527482755b80154402c
0797076407550733072b072907260721071e071b071408120810080e080c
080a080808060804080208000814b8ffe0402b0000010014061000000100
060400000100041000000100100200000100020000000100000201080200
4a00b806008516763f183f123e113946443e113946443e113946443e1139
46443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b
2b2b2b2b2b2b2b18011db0964b5358b0aa1d59b0324b5358b0ff1d592b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b65422b2b2b4b5279b35279eb564565234560234565
60234560b08b766818b080622020b1eb794565234520b003266062636820
b003266165b079236544b0eb234420b152564565234520b0032660626368
20b003266165b056236544b0522344b10056455458b156406544b2524052
4523614459b35045484e456523456023456560234560b089766818b08062
2020b148454565234520b003266062636820b003266165b045236544b048
234420b1504e4565234520b003266062636820b003266165b04e236544b0
502344b1004e455458b14e406544b250405045236144592b2b4569534200
00>
[373 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 104 1 <00020042ffdb04250461002b002c007e404f09100626190d030904210b0b
4b0a490b472144204829d703081d22200c0a04162b04161a2c2c1207042c
280b2c2c0f150a201d164d2207152d074d251a2e0c001d4d0f2d004d2b19
2d2e8721484e182b2b4ef44dedf4ed12394e10f64dedf41139ed11393911
12392f003fed3f3cfdcd10cd11173931305e5d5e015d0116171633323635
342726252627263534363332041721262726232206151417161716171615
140623202635010163091e358f54632828feffb94c4cedd7cc010113fee3
06192f715d4f2a2affaa5554f1fcfefff501fb015c4c203932323019193d
2e45448097d9a3c837203a3a27311617382851527ba2cdd9a8030300>HIBBAA+Helvetica-Bold AddT42Char 
1 0 0 <0002009a0000053d05c200030007003e402105061d02010004071d03000a
05041d0303021a0906071d0100190809aa216c3c182b2b4ef43c4dfd3c4e
10f63c4d10fd3c003f3cfd3c3f3cfd3c313033112111271121119a04a3b8
fccd05c2fa3eb80452fbae000000>HIBBAA+Helvetica-Bold AddT42Char 
HIBBAA+Helvetica-Bold /CharStrings get begin
/s 1 def
end
HIBBAA+Helvetica-Bold /Encoding get
dup 115 /s put
pop
end
%ADOEndSubsetFont
/GJZIJO+Helvetica-Bold /HIBBAA+Helvetica-Bold findfont ct_VMDictPut
/GJZIJO+Helvetica-Bold*1 
[115{/.notdef}rp /s 140{/.notdef}rp]
GJZIJO+Helvetica-Bold nf
GJZIJO+Helvetica-Bold*1 [7.3378 0 0 -7.3378 0 0 ]msf
365.631 445.151 mo
(s)sh
327.069 426.195 mo
332.45 426.195 li
336.486 430.231 li
336.486 435.612 li
332.45 439.647 li
327.069 439.647 li
323.033 435.612 li
323.033 430.231 li
cp
0 0 0 0 cmyk
f
327.069 426.501 mo
332.45 426.501 li
336.792 430.231 li
336.792 435.612 li
332.45 439.953 li
327.069 439.953 li
323.339 435.612 li
323.339 430.231 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
GJZIJO+Helvetica-Bold*1 [7.3378 0 0 -7.3378 0 0 ]msf
327.719 435.367 mo
(s)sh
411.759 400.513 mo
417.14 400.513 li
421.176 404.549 li
421.176 409.93 li
417.14 413.966 li
411.759 413.966 li
407.723 409.93 li
407.723 404.549 li
cp
0 0 0 0 cmyk
f
411.759 400.819 mo
417.14 400.819 li
421.176 404.549 li
421.176 409.93 li
417.14 414.271 li
411.759 414.271 li
407.723 409.93 li
407.723 404.549 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
GJZIJO+Helvetica-Bold*1 [7.3378 0 0 -7.3378 0 0 ]msf
412.409 409.685 mo
(s)sh
430.104 324.919 mo
435.485 324.919 li
439.521 328.955 li
439.521 334.336 li
435.485 338.371 li
430.104 338.371 li
426.068 334.336 li
426.068 328.955 li
cp
0 0 0 0 cmyk
f
430.104 324.995 mo
435.485 324.995 li
439.52 328.954 li
439.52 334.335 li
435.485 338.448 li
430.104 338.448 li
426.068 334.335 li
426.068 328.954 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
GJZIJO+Helvetica-Bold*1 [7.3378 0 0 -7.3378 0 0 ]msf
430.754 334.091 mo
(s)sh
411.759 291.669 mo
417.14 291.669 li
421.176 295.705 li
421.176 301.086 li
417.14 305.122 li
411.759 305.122 li
407.723 301.086 li
407.723 295.705 li
cp
0 0 0 0 cmyk
f
411.759 291.975 mo
417.14 291.975 li
421.176 295.705 li
421.176 301.086 li
417.14 305.428 li
411.759 305.428 li
407.723 301.086 li
407.723 295.705 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
GJZIJO+Helvetica-Bold*1 [7.3378 0 0 -7.3378 0 0 ]msf
412.409 300.842 mo
(s)sh
375.188 261.936 mo
380.569 261.936 li
384.605 265.972 li
384.605 271.353 li
380.569 275.389 li
375.188 275.389 li
371.152 271.353 li
371.152 265.972 li
cp
0 0 0 0 cmyk
f
375.188 262.013 mo
380.569 262.013 li
384.487 265.972 li
384.487 271.353 li
380.569 275.465 li
375.188 275.465 li
371.035 271.353 li
371.035 265.972 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
GJZIJO+Helvetica-Bold*1 [7.3378 0 0 -7.3378 0 0 ]msf
375.838 271.108 mo
(s)sh
324.012 265.987 mo
329.393 265.987 li
333.429 270.023 li
333.429 275.404 li
329.393 279.44 li
324.012 279.44 li
319.976 275.404 li
319.976 270.023 li
cp
0 0 0 0 cmyk
f
324.012 266.293 mo
329.393 266.293 li
333.734 270.023 li
333.734 275.404 li
329.393 279.746 li
324.012 279.746 li
320.282 275.404 li
320.282 270.023 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
GJZIJO+Helvetica-Bold*1 [7.3378 0 0 -7.3378 0 0 ]msf
324.662 275.159 mo
(s)sh
430.104 371.391 mo
435.485 371.391 li
439.521 375.427 li
439.521 380.808 li
435.485 384.843 li
430.104 384.843 li
426.068 380.808 li
426.068 375.427 li
cp
0 0 0 0 cmyk
f
430.104 371.468 mo
435.485 371.468 li
439.52 375.427 li
439.52 380.808 li
435.485 384.92 li
430.104 384.92 li
426.068 380.808 li
426.068 375.427 li
cp
0 0 0 1 cmyk
@
GJZIJO+Helvetica-Bold*1 [7.3378 0 0 -7.3378 0 0 ]msf
430.754 380.563 mo
(s)sh
[.611481 1.83444 ] 0 dsh
336.27 429.603 mo
346.303 424.489 li
@
363.76 436.776 mo
357.906 427.902 li
@
412.962 400.214 mo
410.434 388.276 li
@
425.779 329.217 mo
415.962 325.818 li
@
412.903 305.421 mo
410.493 316.365 li
@
333.72 274.972 mo
346.284 279.017 li
@
415.976 380.327 mo
425.765 379.041 li
@
360.3 277.682 mo
371.381 271.993 li
@
[] 0 dsh
320.526 478.477 mo
442.639 478.477 li
@
447.531 478.171 mo
442.639 476.336 li
442.639 480.005 li
cp
f
0 lc
0 lj
447.531 478.171 mo
442.639 476.336 li
442.639 480.005 li
cp
@
315.635 478.171 mo
320.527 480.005 li
320.527 476.336 li
cp
f
315.635 478.171 mo
320.526 480.005 li
320.526 476.336 li
cp
@
371.152 471.765 mo
395.611 471.765 li
395.611 486.441 li
371.152 486.441 li
cp
0 0 0 0 cmyk
f
0 0 0 1 cmyk
GJZIJN+Helvetica*1 [7.3378 0 0 -7.3378 0 0 ]msf
374.407 481.549 mo
(stage)
[3.66891 2.03989 4.07983 4.0798 0 ]xsh
1 lc
1 lj
170.102 479.088 mo
292.215 479.088 li
@
297.107 478.797 mo
292.215 476.962 li
292.215 480.631 li
cp
f
0 lc
0 lj
297.107 478.797 mo
292.215 476.963 li
292.215 480.632 li
cp
@
165.21 478.797 mo
170.102 480.631 li
170.102 476.962 li
cp
f
165.21 478.797 mo
170.102 480.632 li
170.102 476.963 li
cp
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/GJZIJN+Helvetica*1 uf
/GJZIJN+Helvetica uf
/PBAAAA+Helvetica uf
/GJZIJO+Helvetica-Bold*1 uf
/GJZIJO+Helvetica-Bold uf
/HIBBAA+Helvetica-Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
